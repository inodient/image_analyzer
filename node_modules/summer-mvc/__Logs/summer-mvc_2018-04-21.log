[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:49:05.805Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:49:05.806Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:49:05.808Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:49:05.809Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:49:05.810Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:49:05.811Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:49:05.812Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:49:05.812Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T03:49:05.842Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T03:49:08.879Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T03:49:08.880Z] REQUEST PATH : /getData 
[DEBUG] - [\application\controllers\controller_db.js : 39 | ANONYMOUS_FUNC - 2018-04-21T03:49:08.991Z] {
    "recordsets": [],
    "output": {},
    "rowsAffected": [
        1
    ]
} 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T03:49:14.608Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T03:49:14.611Z] REQUEST PATH : /getData 
[DEBUG] - [\application\controllers\controller_db.js : 39 | ANONYMOUS_FUNC - 2018-04-21T03:49:14.869Z] {
    "recordsets": [
        [
            {
                "BUKRS": "77000000",
                "EMP_NO": "i0198101",
                "BUTXT": "인프라코어",
                "DEP_BG_CODE": "null",
                "DEP_BG_NAME": "null",
                "DEP_CODE": "77010010",
                "DEP_NAME": "전략&Digital혁신 IT기획팀 R&D IT Part",
                "EMP_NAME": "박명진",
                "EMP_NM_ENG": "Park Myoungjin",
                "EMP_STAT": "재직",
                "ENT_DATE": "null",
                "RET_DATE": "",
                "RSPT_NAME": "",
                "DEP_HEAD": "N",
                "POS_NAME": "차장",
                "TELF1": "032-211-8063",
                "TELF3": "010-2761-2838",
                "TELF2": "",
                "SMTP_ADDR": "changho1.kang@doosan.com",
                "ADACCOUNT": "i0198101",
                "CPUDT": "2018-03-17 01:42:24.0",
                "COM_ORG_ID": "null",
                "ORG_NM_ENG": "null"
            }
        ]
    ],
    "recordset": [
        {
            "BUKRS": "77000000",
            "EMP_NO": "i0198101",
            "BUTXT": "인프라코어",
            "DEP_BG_CODE": "null",
            "DEP_BG_NAME": "null",
            "DEP_CODE": "77010010",
            "DEP_NAME": "전략&Digital혁신 IT기획팀 R&D IT Part",
            "EMP_NAME": "박명진",
            "EMP_NM_ENG": "Park Myoungjin",
            "EMP_STAT": "재직",
            "ENT_DATE": "null",
            "RET_DATE": "",
            "RSPT_NAME": "",
            "DEP_HEAD": "N",
            "POS_NAME": "차장",
            "TELF1": "032-211-8063",
            "TELF3": "010-2761-2838",
            "TELF2": "",
            "SMTP_ADDR": "changho1.kang@doosan.com",
            "ADACCOUNT": "i0198101",
            "CPUDT": "2018-03-17 01:42:24.0",
            "COM_ORG_ID": "null",
            "ORG_NM_ENG": "null"
        }
    ],
    "output": {},
    "rowsAffected": [
        1
    ]
} 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T03:49:22.768Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T03:49:22.770Z] REQUEST PATH : /getData 
[DEBUG] - [\application\controllers\controller_db.js : 39 | ANONYMOUS_FUNC - 2018-04-21T03:49:22.811Z] {
    "recordsets": [
        [
            {
                "BUKRS": "77000000",
                "EMP_NO": "i0198101",
                "BUTXT": "인프라코어",
                "DEP_BG_CODE": "null",
                "DEP_BG_NAME": "null",
                "DEP_CODE": "77010010",
                "DEP_NAME": "전략&Digital혁신 IT기획팀 R&D IT Part",
                "EMP_NAME": "박명진",
                "EMP_NM_ENG": "Park Myoungjin",
                "EMP_STAT": "재직",
                "ENT_DATE": "null",
                "RET_DATE": "",
                "RSPT_NAME": "",
                "DEP_HEAD": "N",
                "POS_NAME": "차장",
                "TELF1": "032-211-8063",
                "TELF3": "010-2761-2838",
                "TELF2": "",
                "SMTP_ADDR": "changho1.kang@doosan.com",
                "ADACCOUNT": "i0198101",
                "CPUDT": "2018-03-17 01:42:24.0",
                "COM_ORG_ID": "null",
                "ORG_NM_ENG": "null"
            }
        ]
    ],
    "recordset": [
        {
            "BUKRS": "77000000",
            "EMP_NO": "i0198101",
            "BUTXT": "인프라코어",
            "DEP_BG_CODE": "null",
            "DEP_BG_NAME": "null",
            "DEP_CODE": "77010010",
            "DEP_NAME": "전략&Digital혁신 IT기획팀 R&D IT Part",
            "EMP_NAME": "박명진",
            "EMP_NM_ENG": "Park Myoungjin",
            "EMP_STAT": "재직",
            "ENT_DATE": "null",
            "RET_DATE": "",
            "RSPT_NAME": "",
            "DEP_HEAD": "N",
            "POS_NAME": "차장",
            "TELF1": "032-211-8063",
            "TELF3": "010-2761-2838",
            "TELF2": "",
            "SMTP_ADDR": "changho1.kang@doosan.com",
            "ADACCOUNT": "i0198101",
            "CPUDT": "2018-03-17 01:42:24.0",
            "COM_ORG_ID": "null",
            "ORG_NM_ENG": "null"
        }
    ],
    "output": {},
    "rowsAffected": [
        1
    ]
} 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:50:40.365Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:50:40.368Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:50:40.370Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:50:40.372Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:50:40.373Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:50:40.374Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:50:40.375Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:50:40.376Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T03:50:40.404Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T03:50:43.779Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T03:50:43.781Z] REQUEST PATH : /getData 
[DEBUG] - [\application\controllers\controller_db.js : 39 | ANONYMOUS_FUNC - 2018-04-21T03:50:43.836Z] {
    "recordsets": [],
    "output": {},
    "rowsAffected": [
        1
    ]
} 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T03:50:46.981Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T03:50:46.983Z] REQUEST PATH : /getData 
[DEBUG] - [\application\controllers\controller_db.js : 39 | ANONYMOUS_FUNC - 2018-04-21T03:50:47.041Z] {
    "recordsets": [
        [
            {
                "BUKRS": "77000000",
                "EMP_NO": "i0198101",
                "BUTXT": "인프라코어",
                "DEP_BG_CODE": "null",
                "DEP_BG_NAME": "null",
                "DEP_CODE": "77010010",
                "DEP_NAME": "전략&Digital혁신 IT기획팀 R&D IT Part",
                "EMP_NAME": "박명진",
                "EMP_NM_ENG": "Park Myoungjin",
                "EMP_STAT": "재직",
                "ENT_DATE": "null",
                "RET_DATE": "",
                "RSPT_NAME": "",
                "DEP_HEAD": "N",
                "POS_NAME": "차장",
                "TELF1": "032-211-8063",
                "TELF3": "010-2761-2838",
                "TELF2": "",
                "SMTP_ADDR": "changho1.kang@doosan.com",
                "ADACCOUNT": "i0198101",
                "CPUDT": "2018-03-17 01:42:24.0",
                "COM_ORG_ID": "null",
                "ORG_NM_ENG": "null"
            }
        ]
    ],
    "recordset": [
        {
            "BUKRS": "77000000",
            "EMP_NO": "i0198101",
            "BUTXT": "인프라코어",
            "DEP_BG_CODE": "null",
            "DEP_BG_NAME": "null",
            "DEP_CODE": "77010010",
            "DEP_NAME": "전략&Digital혁신 IT기획팀 R&D IT Part",
            "EMP_NAME": "박명진",
            "EMP_NM_ENG": "Park Myoungjin",
            "EMP_STAT": "재직",
            "ENT_DATE": "null",
            "RET_DATE": "",
            "RSPT_NAME": "",
            "DEP_HEAD": "N",
            "POS_NAME": "차장",
            "TELF1": "032-211-8063",
            "TELF3": "010-2761-2838",
            "TELF2": "",
            "SMTP_ADDR": "changho1.kang@doosan.com",
            "ADACCOUNT": "i0198101",
            "CPUDT": "2018-03-17 01:42:24.0",
            "COM_ORG_ID": "null",
            "ORG_NM_ENG": "null"
        }
    ],
    "output": {},
    "rowsAffected": [
        1
    ]
} 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:51:26.351Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:51:26.354Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:51:26.356Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:51:26.357Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:51:26.358Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:51:26.359Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:51:26.360Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T03:51:26.361Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T03:51:26.384Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T03:51:28.634Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T03:51:28.636Z] REQUEST PATH : /getData 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T03:51:28.660Z] Error Occured when [/getData] called.
Global connection already exists. Call sql.close() first.
	Object.connect (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\mssql\lib\base.js:1591:31)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:20:9
	getPool (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:19:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:102:3
	executeTransaction (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:100:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:86:4
	Object.executeQuery (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:79:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:37:16
	Object.exports.control (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:3:9)
	executeController (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:132:57)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:01:37.630Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:01:37.634Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:01:37.635Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:01:37.636Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:01:37.637Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:01:37.638Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:01:37.639Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:01:37.640Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T04:01:37.664Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:02:37.952Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:02:37.954Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:02:37.956Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:02:37.957Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:02:37.958Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:02:37.959Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:02:37.960Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:02:37.961Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T04:02:37.985Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:02:59.928Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:02:59.930Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:02:59.932Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:02:59.934Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:02:59.935Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:02:59.936Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:02:59.937Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:02:59.938Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T04:02:59.962Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T04:03:05.325Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T04:03:05.327Z] REQUEST PATH : /getData 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T04:03:05.337Z] Error Occured when [/getData] called.
sql is not defined
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:102:21
	executeTransaction (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:100:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:86:4
	Object.executeQuery (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:79:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:37:16
	Object.exports.control (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:3:9)
	executeController (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:132:57)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:26:11
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:03:15.020Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:03:15.023Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:03:15.025Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:03:15.026Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:03:15.027Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:03:15.028Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:03:15.029Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:03:15.030Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T04:03:15.057Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T04:03:19.108Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T04:03:19.110Z] REQUEST PATH : /getData 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T04:03:19.132Z] Error Occured when [/getData] called.
Connection not yet open.
	ConnectionError (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\mssql\lib\base.js:1427:7)
	ConnectionPool._acquire (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\mssql\lib\base.js:181:29)
	ConnectionPool.acquire (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\mssql\lib\base.js:172:12)
	Immediate._begin.err (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\mssql\lib\tedious.js:284:19)
	runCallback (timers.js:637:20)
	tryOnImmediate (timers.js:610:5)
	processImmediate [as _immediateCallback] (timers.js:582:5)

[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T04:05:27.364Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T04:05:27.366Z] REQUEST PATH : / 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T04:05:30.677Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T04:05:30.678Z] REQUEST PATH : /getData 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T04:05:30.684Z] Error Occured when [/getData] called.
Connection not yet open.
	ConnectionError (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\mssql\lib\base.js:1427:7)
	ConnectionPool._acquire (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\mssql\lib\base.js:181:29)
	ConnectionPool.acquire (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\mssql\lib\base.js:172:12)
	Immediate._begin.err (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\mssql\lib\tedious.js:284:19)
	runCallback (timers.js:637:20)
	tryOnImmediate (timers.js:610:5)
	processImmediate [as _immediateCallback] (timers.js:582:5)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:06:46.028Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:06:46.030Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:06:46.032Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:06:46.033Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:06:46.034Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:06:46.035Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:06:46.036Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:06:46.036Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T04:06:46.061Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T04:06:50.208Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T04:06:50.209Z] REQUEST PATH : /getData 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T04:06:50.375Z] Error Occured when [/getData] called.
results is not defined
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:90:47
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:07:25.951Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:07:25.954Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:07:25.956Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:07:25.957Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:07:25.958Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:07:25.959Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:07:25.960Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:07:25.961Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T04:07:25.990Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T04:07:26.982Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T04:07:26.983Z] REQUEST PATH : /getData 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T04:07:27.128Z] Error Occured when [/getData] called.
results is not defined
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:90:52
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:07:44.046Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:07:44.048Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:07:44.050Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:07:44.051Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:07:44.052Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:07:44.053Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:07:44.054Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T04:07:44.055Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T04:07:44.079Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T04:07:44.751Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T04:07:44.752Z] REQUEST PATH : /getData 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T04:07:44.874Z] Error Occured when [/getData] called.
results is not defined
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:93:52
	process._tickCallback (internal/process/next_tick.js:103:7)

[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T05:55:05.295Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ESOCKET",
        "originalError": {
            "message": "Failed to connect to DIOPRDB01:1433 - getaddrinfo ENOTFOUND DIOPRDB01",
            "code": "ESOCKET"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T05:55:10.711Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ESOCKET",
        "originalError": {
            "message": "Failed to connect to DIOPRDB01:1433 - getaddrinfo ENOTFOUND DIOPRDB01",
            "code": "ESOCKET"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T05:55:16.272Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ESOCKET",
        "originalError": {
            "message": "Failed to connect to DIOPRDB01:1433 - getaddrinfo ENOTFOUND DIOPRDB01",
            "code": "ESOCKET"
        },
        "name": "ConnectionError"
    }
} 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:01:18.264Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:01:18.266Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:01:18.267Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:01:18.268Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:01:18.269Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:01:18.270Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:01:18.270Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:01:18.271Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:01:18.296Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:01:32.078Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:01:32.079Z] REQUEST PATH : / 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:01:36.322Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:01:36.324Z] REQUEST PATH : /getData 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:01:36.526Z] Error Occured when [/getData] called.
results is not defined
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:93:52
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:04:07.150Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:04:07.154Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:04:07.154Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:04:07.155Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:04:07.156Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:04:07.156Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:04:07.157Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:04:07.157Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:04:07.180Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:04:36.340Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:04:36.344Z] REQUEST PATH : /getData 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:04:36.456Z] Error Occured when [/getData] called.
results is not defined
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:89:79
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:04:48.105Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:04:48.107Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:04:48.109Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:04:48.110Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:04:48.111Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:04:48.111Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:04:48.112Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:04:48.113Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:04:48.142Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:05:10.533Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:05:10.535Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:05:10.538Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:05:10.539Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:05:10.540Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:05:10.540Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:05:10.541Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:05:10.541Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:05:10.575Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:05:13.078Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:05:13.079Z] REQUEST PATH : /getData 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:05:13.220Z] Error Occured when [/getData] called.
results is not defined
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:89:79
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:04.908Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:04.912Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:04.915Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:04.917Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:04.918Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:04.919Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:04.920Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:04.921Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:08:04.969Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:08:05.474Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:08:05.475Z] REQUEST PATH : /getData 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:08:05.659Z] Error Occured when [/getData] called.
results is not defined
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:89:68
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:27.912Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:27.914Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:27.915Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:27.916Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:27.917Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:27.917Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:27.918Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:27.918Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:08:27.947Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:08:28.106Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:08:28.108Z] REQUEST PATH : /getData 
[DEBUG] - [\application\controllers\controller_db.js : 39 | ANONYMOUS_FUNC - 2018-04-21T06:08:28.196Z] {
    "connection": null,
    "results": {
        "recordsets": [],
        "output": {},
        "rowsAffected": [
            1
        ],
        "pool": {
            "domain": null,
            "_events": {},
            "_eventsCount": 0,
            "config": {
                "user": "usrCERND",
                "password": "usrIMSI^0730CERND",
                "server": "DIOPRDB01",
                "database": "front2007",
                "port": 1433,
                "options": {},
                "stream": false,
                "parseJSON": false
            },
            "_connected": false,
            "_connecting": false,
            "pool": null
        }
    }
} 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:58.971Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:58.973Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:58.975Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:58.977Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:58.978Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:58.978Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:58.979Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:08:58.980Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:08:59.014Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:09:08.799Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:09:08.800Z] REQUEST PATH : /getData 
[DEBUG] - [\application\controllers\controller_db.js : 39 | ANONYMOUS_FUNC - 2018-04-21T06:09:08.869Z] { connection: 
   Request {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     canceled: false,
     parent: 
      ConnectionPool {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        config: 
         { user: 'usrCERND',
           password: 'usrIMSI^0730CERND',
           server: 'DIOPRDB01',
           database: 'front2007',
           port: 1433,
           options: {},
           stream: false,
           parseJSON: false },
        _connected: true,
        _connecting: false,
        pool: 
         Pool {
           domain: null,
           _events: 
            { factoryCreateError: [Function: bound emit],
              factoryDestroyError: [Function: bound emit] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _config: 
            PoolOptions {
              fifo: true,
              priorityRange: 1,
              testOnBorrow: true,
              testOnReturn: false,
              autostart: true,
              acquireTimeoutMillis: 15000,
              max: 10,
              min: 0,
              evictionRunIntervalMillis: 1000,
              numTestsPerEvictionRun: 3,
              softIdleTimeoutMillis: -1,
              idleTimeoutMillis: 30000,
              Promise: [Function: Promise] },
           _Promise: [Function: Promise],
           _factory: 
            { create: [Function: bound _poolCreate],
              validate: [Function: bound _poolValidate],
              destroy: [Function: bound _poolDestroy] },
           _draining: false,
           _started: true,
           _waitingClientsQueue: 
            PriorityQueue {
              _size: 1,
              _slots: 
               [ Queue {
                   _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
           _factoryCreateOperations: Set {},
           _factoryDestroyOperations: Set {},
           _availableObjects: 
            Deque {
              _list: 
               DoublyLinkedList {
                 head: 
                  { prev: null,
                    next: null,
                    data: 
                     PooledResource {
                       creationTime: 1524290948859,
                       lastReturnTime: 1524290948869,
                       lastBorrowTime: 1524290948860,
                       lastIdleTime: 1524290948869,
                       obj: 
                        Connection {
                          domain: null,
                          _events: { error: [ [Function] ] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          config: 
                           { server: 'DIOPRDB01',
                             userName: 'usrCERND',
                             password: 'usrIMSI^0730CERND',
                             domain: undefined,
                             securityPackage: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true } },
                          reset: [Function: bound reset],
                          socketClose: [Function: bound socketClose],
                          socketEnd: [Function: bound socketEnd],
                          socketConnect: [Function: bound socketConnect],
                          socketError: [Function: bound socketError],
                          requestTimeout: [Function: bound requestTimeout],
                          connectTimeout: [Function: bound connectTimeout],
                          retryTimeout: [Function: bound retryTimeout],
                          debug: 
                           Debug {
                             domain: null,
                             _events: { debug: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             options: { data: false, packet: false, payload: false, token: false },
                             indent: '  ' },
                          tokenStreamParser: 
                           Parser {
                             domain: null,
                             _events: 
                              { infoMessage: [Function],
                                sspichallenge: [Function],
                                errorMessage: [Function],
                                databaseChange: [Function],
                                languageChange: [Function],
                                charsetChange: [Function],
                                loginack: [Function],
                                routingChange: [Function],
                                packetSizeChange: [Function],
                                beginTransaction: [Function],
                                commitTransaction: [Function],
                                rollbackTransaction: [Function],
                                columnMetadata: [Function],
                                order: [Function],
                                row: [Function],
                                returnStatus: [Function],
                                returnValue: [Function],
                                doneProc: [Function],
                                doneInProc: [Function],
                                done: [Function],
                                endOfMessage: [Function],
                                resetConnection: [Function],
                                tokenStreamError: [Function],
                                drain: [Function] },
                             _eventsCount: 24,
                             _maxListeners: undefined,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             colMetadata: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true },
                             parser: 
                              Parser {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   drain: [Function] },
                                _eventsCount: 4,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'utf8' },
                                debug: 
                                 Debug {
                                   domain: null,
                                   _events: { debug: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   options: { data: false, packet: false, payload: false, token: false },
                                   indent: '  ' },
                                colMetadata: undefined,
                                options: 
                                 { abortTransactionOnError: false,
                                   appName: 'node-mssql',
                                   camelCaseColumns: false,
                                   cancelTimeout: 5000,
                                   columnNameReplacer: undefined,
                                   connectionRetryInterval: 500,
                                   connectTimeout: 15000,
                                   connectionIsolationLevel: 2,
                                   cryptoCredentialsDetails: {},
                                   database: 'front2007',
                                   datefirst: 7,
                                   dateFormat: 'mdy',
                                   debug: { data: false, packet: false, payload: false, token: false },
                                   enableAnsiNull: true,
                                   enableAnsiNullDefault: true,
                                   enableAnsiPadding: true,
                                   enableAnsiWarnings: true,
                                   enableArithAbort: false,
                                   enableConcatNullYieldsNull: true,
                                   enableCursorCloseOnCommit: undefined,
                                   enableImplicitTransactions: false,
                                   enableNumericRoundabort: false,
                                   enableQuotedIdentifier: true,
                                   encrypt: false,
                                   fallbackToDefaultDb: false,
                                   instanceName: undefined,
                                   isolationLevel: 2,
                                   language: 'us_english',
                                   localAddress: undefined,
                                   maxRetriesOnTransientErrors: 3,
                                   multiSubnetFailover: false,
                                   packetSize: 4096,
                                   port: 1433,
                                   readOnlyIntent: false,
                                   requestTimeout: 15000,
                                   rowCollectionOnDone: false,
                                   rowCollectionOnRequestCompletion: false,
                                   tdsVersion: '7_4',
                                   textsize: '2147483647',
                                   trustServerCertificate: true,
                                   useColumnNames: false,
                                   useUTC: true },
                                endOfMessageMarker: {},
                                buffer: <Buffer ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                position: 31,
                                suspended: false,
                                await: [Function],
                                next: undefined } },
                          inTransaction: false,
                          transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                          state: 
                           { name: 'LoggedIn',
                             events: { socketError: [Function: socketError] } },
                          connectTimer: 
                           Timeout {
                             '0': null,
                             _called: false,
                             _idleTimeout: -1,
                             _idlePrev: null,
                             _idleNext: null,
                             _idleStart: 12062,
                             _onTimeout: null,
                             _timerArgs: undefined,
                             _repeat: null },
                          curTransientRetryCount: 0,
                          transientErrorLookup: TransientErrorLookup {},
                          cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                          socket: 
                           Socket {
                             connecting: false,
                             _hadError: false,
                             _handle: 
                              TCP {
                                bytesRead: 874,
                                _externalStream: {},
                                fd: -1,
                                reading: true,
                                owner: [Circular],
                                onread: [Function: onread],
                                onconnection: null,
                                writeQueueSize: 0 },
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: 
                                 ReadablePacketStream {
                                   _readableState: 
                                    ReadableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: null,
                                      pipesCount: 0,
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: false,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      defaultEncoding: 'utf8',
                                      ranOut: false,
                                      awaitDrain: 0,
                                      readingMore: false,
                                      decoder: null,
                                      encoding: null },
                                   readable: true,
                                   domain: null,
                                   _events: 
                                    { end: { [Function: g] listener: [Function: onend] },
                                      prefinish: { [Function: g] listener: [Function] },
                                      data: [Function],
                                      unpipe: [Function: onunpipe],
                                      drain: [Function],
                                      error: [Function: onerror],
                                      close: { [Function: g] listener: [Function: onclose] },
                                      finish: { [Function: g] listener: [Function: onfinish] } },
                                   _eventsCount: 8,
                                   _maxListeners: undefined,
                                   _writableState: 
                                    WritableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      decodeStrings: true,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function],
                                      writecb: null,
                                      writelen: 0,
                                      bufferedRequest: null,
                                      lastBufferedRequest: null,
                                      pendingcb: 0,
                                      prefinished: false,
                                      errorEmitted: false,
                                      bufferedRequestCount: 0,
                                      corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                   writable: true,
                                   allowHalfOpen: true,
                                   _transformState: 
                                    TransformState {
                                      afterTransform: [Function],
                                      needTransform: true,
                                      transforming: false,
                                      writecb: null,
                                      writechunk: null,
                                      writeencoding: 'buffer' },
                                   buffer: <Buffer 04 01 00 27 00 c8 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                   position: 39 },
                                pipesCount: 1,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: bound socketEnd],
                                   { [Function: g] listener: [Function: onend] } ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                error: [Function: bound socketError],
                                close: [Function: bound socketClose],
                                data: [Function: ondata] },
                             _eventsCount: 6,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: false,
                             destroyed: false,
                             _bytesDispatched: 1313,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: null,
                             _server: null,
                             read: [Function],
                             _consuming: true },
                          messageIo: 
                           MessageIO {
                             domain: null,
                             _events: 
                              { data: [Function],
                                message: [Function],
                                secure: [Function: bound emit] },
                             _eventsCount: 3,
                             _maxListeners: undefined,
                             socket: 
                              Socket {
                                connecting: false,
                                _hadError: false,
                                _handle: 
                                 TCP {
                                   bytesRead: 874,
                                   _externalStream: {},
                                   fd: -1,
                                   reading: true,
                                   owner: [Circular],
                                   onread: [Function: onread],
                                   onconnection: null,
                                   writeQueueSize: 0 },
                                _parent: null,
                                _host: null,
                                _readableState: 
                                 ReadableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: 
                                    ReadablePacketStream {
                                      _readableState: 
                                       ReadableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         buffer: BufferList { head: null, tail: null, length: 0 },
                                         length: 0,
                                         pipes: null,
                                         pipesCount: 0,
                                         flowing: true,
                                         ended: false,
                                         endEmitted: false,
                                         reading: false,
                                         sync: false,
                                         needReadable: true,
                                         emittedReadable: false,
                                         readableListening: false,
                                         resumeScheduled: false,
                                         defaultEncoding: 'utf8',
                                         ranOut: false,
                                         awaitDrain: 0,
                                         readingMore: false,
                                         decoder: null,
                                         encoding: null },
                                      readable: true,
                                      domain: null,
                                      _events: 
                                       { end: { [Function: g] listener: [Function: onend] },
                                         prefinish: { [Function: g] listener: [Function] },
                                         data: [Function],
                                         unpipe: [Function: onunpipe],
                                         drain: [Function],
                                         error: [Function: onerror],
                                         close: { [Function: g] listener: [Function: onclose] },
                                         finish: { [Function: g] listener: [Function: onfinish] } },
                                      _eventsCount: 8,
                                      _maxListeners: undefined,
                                      _writableState: 
                                       WritableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         needDrain: false,
                                         ending: false,
                                         ended: false,
                                         finished: false,
                                         decodeStrings: true,
                                         defaultEncoding: 'utf8',
                                         length: 0,
                                         writing: false,
                                         corked: 0,
                                         sync: false,
                                         bufferProcessing: false,
                                         onwrite: [Function],
                                         writecb: null,
                                         writelen: 0,
                                         bufferedRequest: null,
                                         lastBufferedRequest: null,
                                         pendingcb: 0,
                                         prefinished: false,
                                         errorEmitted: false,
                                         bufferedRequestCount: 0,
                                         corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                      writable: true,
                                      allowHalfOpen: true,
                                      _transformState: 
                                       TransformState {
                                         afterTransform: [Function],
                                         needTransform: true,
                                         transforming: false,
                                         writecb: null,
                                         writechunk: null,
                                         writeencoding: 'buffer' },
                                      buffer: <Buffer 04 01 00 27 00 c8 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                      position: 39 },
                                   pipesCount: 1,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: true,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: 
                                    [ { [Function: g] listener: [Function: onend] },
                                      [Function: bound socketEnd],
                                      { [Function: g] listener: [Function: onend] } ],
                                   finish: [Function: onSocketFinish],
                                   _socketEnd: [Function: onSocketEnd],
                                   error: [Function: bound socketError],
                                   close: [Function: bound socketClose],
                                   data: [Function: ondata] },
                                _eventsCount: 6,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: false,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: false,
                                destroyed: false,
                                _bytesDispatched: 1313,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: null,
                                _server: null,
                                read: [Function],
                                _consuming: true },
                             _packetSize: 4096,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             sendPacket: [Function: bound sendPacket],
                             packetStream: 
                              ReadablePacketStream {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   unpipe: [Function: onunpipe],
                                   drain: [Function],
                                   error: [Function: onerror],
                                   close: { [Function: g] listener: [Function: onclose] },
                                   finish: { [Function: g] listener: [Function: onfinish] } },
                                _eventsCount: 8,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'buffer' },
                                buffer: <Buffer 04 01 00 27 00 c8 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                position: 39 },
                             packetDataSize: 4088 },
                          closed: false,
                          messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                          routingData: undefined,
                          loggedIn: true,
                          isSqlBatch: false,
                          request: undefined,
                          requestTimer: undefined,
                          resetConnectionOnNextRequest: false,
                          procReturnStatusValue: undefined },
                       state: 'IDLE' } },
                 tail: 
                  { prev: null,
                    next: null,
                    data: 
                     PooledResource {
                       creationTime: 1524290948859,
                       lastReturnTime: 1524290948869,
                       lastBorrowTime: 1524290948860,
                       lastIdleTime: 1524290948869,
                       obj: 
                        Connection {
                          domain: null,
                          _events: { error: [ [Function] ] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          config: 
                           { server: 'DIOPRDB01',
                             userName: 'usrCERND',
                             password: 'usrIMSI^0730CERND',
                             domain: undefined,
                             securityPackage: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true } },
                          reset: [Function: bound reset],
                          socketClose: [Function: bound socketClose],
                          socketEnd: [Function: bound socketEnd],
                          socketConnect: [Function: bound socketConnect],
                          socketError: [Function: bound socketError],
                          requestTimeout: [Function: bound requestTimeout],
                          connectTimeout: [Function: bound connectTimeout],
                          retryTimeout: [Function: bound retryTimeout],
                          debug: 
                           Debug {
                             domain: null,
                             _events: { debug: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             options: { data: false, packet: false, payload: false, token: false },
                             indent: '  ' },
                          tokenStreamParser: 
                           Parser {
                             domain: null,
                             _events: 
                              { infoMessage: [Function],
                                sspichallenge: [Function],
                                errorMessage: [Function],
                                databaseChange: [Function],
                                languageChange: [Function],
                                charsetChange: [Function],
                                loginack: [Function],
                                routingChange: [Function],
                                packetSizeChange: [Function],
                                beginTransaction: [Function],
                                commitTransaction: [Function],
                                rollbackTransaction: [Function],
                                columnMetadata: [Function],
                                order: [Function],
                                row: [Function],
                                returnStatus: [Function],
                                returnValue: [Function],
                                doneProc: [Function],
                                doneInProc: [Function],
                                done: [Function],
                                endOfMessage: [Function],
                                resetConnection: [Function],
                                tokenStreamError: [Function],
                                drain: [Function] },
                             _eventsCount: 24,
                             _maxListeners: undefined,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             colMetadata: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true },
                             parser: 
                              Parser {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   drain: [Function] },
                                _eventsCount: 4,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'utf8' },
                                debug: 
                                 Debug {
                                   domain: null,
                                   _events: { debug: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   options: { data: false, packet: false, payload: false, token: false },
                                   indent: '  ' },
                                colMetadata: undefined,
                                options: 
                                 { abortTransactionOnError: false,
                                   appName: 'node-mssql',
                                   camelCaseColumns: false,
                                   cancelTimeout: 5000,
                                   columnNameReplacer: undefined,
                                   connectionRetryInterval: 500,
                                   connectTimeout: 15000,
                                   connectionIsolationLevel: 2,
                                   cryptoCredentialsDetails: {},
                                   database: 'front2007',
                                   datefirst: 7,
                                   dateFormat: 'mdy',
                                   debug: { data: false, packet: false, payload: false, token: false },
                                   enableAnsiNull: true,
                                   enableAnsiNullDefault: true,
                                   enableAnsiPadding: true,
                                   enableAnsiWarnings: true,
                                   enableArithAbort: false,
                                   enableConcatNullYieldsNull: true,
                                   enableCursorCloseOnCommit: undefined,
                                   enableImplicitTransactions: false,
                                   enableNumericRoundabort: false,
                                   enableQuotedIdentifier: true,
                                   encrypt: false,
                                   fallbackToDefaultDb: false,
                                   instanceName: undefined,
                                   isolationLevel: 2,
                                   language: 'us_english',
                                   localAddress: undefined,
                                   maxRetriesOnTransientErrors: 3,
                                   multiSubnetFailover: false,
                                   packetSize: 4096,
                                   port: 1433,
                                   readOnlyIntent: false,
                                   requestTimeout: 15000,
                                   rowCollectionOnDone: false,
                                   rowCollectionOnRequestCompletion: false,
                                   tdsVersion: '7_4',
                                   textsize: '2147483647',
                                   trustServerCertificate: true,
                                   useColumnNames: false,
                                   useUTC: true },
                                endOfMessageMarker: {},
                                buffer: <Buffer ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                position: 31,
                                suspended: false,
                                await: [Function],
                                next: undefined } },
                          inTransaction: false,
                          transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                          state: 
                           { name: 'LoggedIn',
                             events: { socketError: [Function: socketError] } },
                          connectTimer: 
                           Timeout {
                             '0': null,
                             _called: false,
                             _idleTimeout: -1,
                             _idlePrev: null,
                             _idleNext: null,
                             _idleStart: 12062,
                             _onTimeout: null,
                             _timerArgs: undefined,
                             _repeat: null },
                          curTransientRetryCount: 0,
                          transientErrorLookup: TransientErrorLookup {},
                          cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                          socket: 
                           Socket {
                             connecting: false,
                             _hadError: false,
                             _handle: 
                              TCP {
                                bytesRead: 874,
                                _externalStream: {},
                                fd: -1,
                                reading: true,
                                owner: [Circular],
                                onread: [Function: onread],
                                onconnection: null,
                                writeQueueSize: 0 },
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: 
                                 ReadablePacketStream {
                                   _readableState: 
                                    ReadableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: null,
                                      pipesCount: 0,
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: false,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      defaultEncoding: 'utf8',
                                      ranOut: false,
                                      awaitDrain: 0,
                                      readingMore: false,
                                      decoder: null,
                                      encoding: null },
                                   readable: true,
                                   domain: null,
                                   _events: 
                                    { end: { [Function: g] listener: [Function: onend] },
                                      prefinish: { [Function: g] listener: [Function] },
                                      data: [Function],
                                      unpipe: [Function: onunpipe],
                                      drain: [Function],
                                      error: [Function: onerror],
                                      close: { [Function: g] listener: [Function: onclose] },
                                      finish: { [Function: g] listener: [Function: onfinish] } },
                                   _eventsCount: 8,
                                   _maxListeners: undefined,
                                   _writableState: 
                                    WritableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      decodeStrings: true,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function],
                                      writecb: null,
                                      writelen: 0,
                                      bufferedRequest: null,
                                      lastBufferedRequest: null,
                                      pendingcb: 0,
                                      prefinished: false,
                                      errorEmitted: false,
                                      bufferedRequestCount: 0,
                                      corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                   writable: true,
                                   allowHalfOpen: true,
                                   _transformState: 
                                    TransformState {
                                      afterTransform: [Function],
                                      needTransform: true,
                                      transforming: false,
                                      writecb: null,
                                      writechunk: null,
                                      writeencoding: 'buffer' },
                                   buffer: <Buffer 04 01 00 27 00 c8 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                   position: 39 },
                                pipesCount: 1,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: bound socketEnd],
                                   { [Function: g] listener: [Function: onend] } ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                error: [Function: bound socketError],
                                close: [Function: bound socketClose],
                                data: [Function: ondata] },
                             _eventsCount: 6,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: false,
                             destroyed: false,
                             _bytesDispatched: 1313,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: null,
                             _server: null,
                             read: [Function],
                             _consuming: true },
                          messageIo: 
                           MessageIO {
                             domain: null,
                             _events: 
                              { data: [Function],
                                message: [Function],
                                secure: [Function: bound emit] },
                             _eventsCount: 3,
                             _maxListeners: undefined,
                             socket: 
                              Socket {
                                connecting: false,
                                _hadError: false,
                                _handle: 
                                 TCP {
                                   bytesRead: 874,
                                   _externalStream: {},
                                   fd: -1,
                                   reading: true,
                                   owner: [Circular],
                                   onread: [Function: onread],
                                   onconnection: null,
                                   writeQueueSize: 0 },
                                _parent: null,
                                _host: null,
                                _readableState: 
                                 ReadableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: 
                                    ReadablePacketStream {
                                      _readableState: 
                                       ReadableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         buffer: BufferList { head: null, tail: null, length: 0 },
                                         length: 0,
                                         pipes: null,
                                         pipesCount: 0,
                                         flowing: true,
                                         ended: false,
                                         endEmitted: false,
                                         reading: false,
                                         sync: false,
                                         needReadable: true,
                                         emittedReadable: false,
                                         readableListening: false,
                                         resumeScheduled: false,
                                         defaultEncoding: 'utf8',
                                         ranOut: false,
                                         awaitDrain: 0,
                                         readingMore: false,
                                         decoder: null,
                                         encoding: null },
                                      readable: true,
                                      domain: null,
                                      _events: 
                                       { end: { [Function: g] listener: [Function: onend] },
                                         prefinish: { [Function: g] listener: [Function] },
                                         data: [Function],
                                         unpipe: [Function: onunpipe],
                                         drain: [Function],
                                         error: [Function: onerror],
                                         close: { [Function: g] listener: [Function: onclose] },
                                         finish: { [Function: g] listener: [Function: onfinish] } },
                                      _eventsCount: 8,
                                      _maxListeners: undefined,
                                      _writableState: 
                                       WritableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         needDrain: false,
                                         ending: false,
                                         ended: false,
                                         finished: false,
                                         decodeStrings: true,
                                         defaultEncoding: 'utf8',
                                         length: 0,
                                         writing: false,
                                         corked: 0,
                                         sync: false,
                                         bufferProcessing: false,
                                         onwrite: [Function],
                                         writecb: null,
                                         writelen: 0,
                                         bufferedRequest: null,
                                         lastBufferedRequest: null,
                                         pendingcb: 0,
                                         prefinished: false,
                                         errorEmitted: false,
                                         bufferedRequestCount: 0,
                                         corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                      writable: true,
                                      allowHalfOpen: true,
                                      _transformState: 
                                       TransformState {
                                         afterTransform: [Function],
                                         needTransform: true,
                                         transforming: false,
                                         writecb: null,
                                         writechunk: null,
                                         writeencoding: 'buffer' },
                                      buffer: <Buffer 04 01 00 27 00 c8 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                      position: 39 },
                                   pipesCount: 1,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: true,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: 
                                    [ { [Function: g] listener: [Function: onend] },
                                      [Function: bound socketEnd],
                                      { [Function: g] listener: [Function: onend] } ],
                                   finish: [Function: onSocketFinish],
                                   _socketEnd: [Function: onSocketEnd],
                                   error: [Function: bound socketError],
                                   close: [Function: bound socketClose],
                                   data: [Function: ondata] },
                                _eventsCount: 6,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: false,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: false,
                                destroyed: false,
                                _bytesDispatched: 1313,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: null,
                                _server: null,
                                read: [Function],
                                _consuming: true },
                             _packetSize: 4096,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             sendPacket: [Function: bound sendPacket],
                             packetStream: 
                              ReadablePacketStream {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   unpipe: [Function: onunpipe],
                                   drain: [Function],
                                   error: [Function: onerror],
                                   close: { [Function: g] listener: [Function: onclose] },
                                   finish: { [Function: g] listener: [Function: onfinish] } },
                                _eventsCount: 8,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'buffer' },
                                buffer: <Buffer 04 01 00 27 00 c8 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                position: 39 },
                             packetDataSize: 4088 },
                          closed: false,
                          messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                          routingData: undefined,
                          loggedIn: true,
                          isSqlBatch: false,
                          request: undefined,
                          requestTimer: undefined,
                          resetConnectionOnNextRequest: false,
                          procReturnStatusValue: undefined },
                       state: 'IDLE' } },
                 length: 1 } },
           _testOnBorrowResources: Set {},
           _testOnReturnResources: Set {},
           _validationOperations: Set {},
           _allObjects: 
            Set {
              PooledResource {
              creationTime: 1524290948859,
              lastReturnTime: 1524290948869,
              lastBorrowTime: 1524290948860,
              lastIdleTime: 1524290948869,
              obj: 
               Connection {
                 domain: null,
                 _events: { error: [ [Function] ] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 config: 
                  { server: 'DIOPRDB01',
                    userName: 'usrCERND',
                    password: 'usrIMSI^0730CERND',
                    domain: undefined,
                    securityPackage: undefined,
                    options: 
                     { abortTransactionOnError: false,
                       appName: 'node-mssql',
                       camelCaseColumns: false,
                       cancelTimeout: 5000,
                       columnNameReplacer: undefined,
                       connectionRetryInterval: 500,
                       connectTimeout: 15000,
                       connectionIsolationLevel: 2,
                       cryptoCredentialsDetails: {},
                       database: 'front2007',
                       datefirst: 7,
                       dateFormat: 'mdy',
                       debug: { data: false, packet: false, payload: false, token: false },
                       enableAnsiNull: true,
                       enableAnsiNullDefault: true,
                       enableAnsiPadding: true,
                       enableAnsiWarnings: true,
                       enableArithAbort: false,
                       enableConcatNullYieldsNull: true,
                       enableCursorCloseOnCommit: undefined,
                       enableImplicitTransactions: false,
                       enableNumericRoundabort: false,
                       enableQuotedIdentifier: true,
                       encrypt: false,
                       fallbackToDefaultDb: false,
                       instanceName: undefined,
                       isolationLevel: 2,
                       language: 'us_english',
                       localAddress: undefined,
                       maxRetriesOnTransientErrors: 3,
                       multiSubnetFailover: false,
                       packetSize: 4096,
                       port: 1433,
                       readOnlyIntent: false,
                       requestTimeout: 15000,
                       rowCollectionOnDone: false,
                       rowCollectionOnRequestCompletion: false,
                       tdsVersion: '7_4',
                       textsize: '2147483647',
                       trustServerCertificate: true,
                       useColumnNames: false,
                       useUTC: true } },
                 reset: [Function: bound reset],
                 socketClose: [Function: bound socketClose],
                 socketEnd: [Function: bound socketEnd],
                 socketConnect: [Function: bound socketConnect],
                 socketError: [Function: bound socketError],
                 requestTimeout: [Function: bound requestTimeout],
                 connectTimeout: [Function: bound connectTimeout],
                 retryTimeout: [Function: bound retryTimeout],
                 debug: 
                  Debug {
                    domain: null,
                    _events: { debug: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    options: { data: false, packet: false, payload: false, token: false },
                    indent: '  ' },
                 tokenStreamParser: 
                  Parser {
                    domain: null,
                    _events: 
                     { infoMessage: [Function],
                       sspichallenge: [Function],
                       errorMessage: [Function],
                       databaseChange: [Function],
                       languageChange: [Function],
                       charsetChange: [Function],
                       loginack: [Function],
                       routingChange: [Function],
                       packetSizeChange: [Function],
                       beginTransaction: [Function],
                       commitTransaction: [Function],
                       rollbackTransaction: [Function],
                       columnMetadata: [Function],
                       order: [Function],
                       row: [Function],
                       returnStatus: [Function],
                       returnValue: [Function],
                       doneProc: [Function],
                       doneInProc: [Function],
                       done: [Function],
                       endOfMessage: [Function],
                       resetConnection: [Function],
                       tokenStreamError: [Function],
                       drain: [Function] },
                    _eventsCount: 24,
                    _maxListeners: undefined,
                    debug: 
                     Debug {
                       domain: null,
                       _events: { debug: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       options: { data: false, packet: false, payload: false, token: false },
                       indent: '  ' },
                    colMetadata: undefined,
                    options: 
                     { abortTransactionOnError: false,
                       appName: 'node-mssql',
                       camelCaseColumns: false,
                       cancelTimeout: 5000,
                       columnNameReplacer: undefined,
                       connectionRetryInterval: 500,
                       connectTimeout: 15000,
                       connectionIsolationLevel: 2,
                       cryptoCredentialsDetails: {},
                       database: 'front2007',
                       datefirst: 7,
                       dateFormat: 'mdy',
                       debug: { data: false, packet: false, payload: false, token: false },
                       enableAnsiNull: true,
                       enableAnsiNullDefault: true,
                       enableAnsiPadding: true,
                       enableAnsiWarnings: true,
                       enableArithAbort: false,
                       enableConcatNullYieldsNull: true,
                       enableCursorCloseOnCommit: undefined,
                       enableImplicitTransactions: false,
                       enableNumericRoundabort: false,
                       enableQuotedIdentifier: true,
                       encrypt: false,
                       fallbackToDefaultDb: false,
                       instanceName: undefined,
                       isolationLevel: 2,
                       language: 'us_english',
                       localAddress: undefined,
                       maxRetriesOnTransientErrors: 3,
                       multiSubnetFailover: false,
                       packetSize: 4096,
                       port: 1433,
                       readOnlyIntent: false,
                       requestTimeout: 15000,
                       rowCollectionOnDone: false,
                       rowCollectionOnRequestCompletion: false,
                       tdsVersion: '7_4',
                       textsize: '2147483647',
                       trustServerCertificate: true,
                       useColumnNames: false,
                       useUTC: true },
                    parser: 
                     Parser {
                       _readableState: 
                        ReadableState {
                          objectMode: true,
                          highWaterMark: 16,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: false,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: { [Function: g] listener: [Function: onend] },
                          prefinish: { [Function: g] listener: [Function] },
                          data: [Function],
                          drain: [Function] },
                       _eventsCount: 4,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: true,
                          highWaterMark: 16,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: true,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 0,
                          prefinished: false,
                          errorEmitted: false,
                          bufferedRequestCount: 0,
                          corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                       writable: true,
                       allowHalfOpen: true,
                       _transformState: 
                        TransformState {
                          afterTransform: [Function],
                          needTransform: true,
                          transforming: false,
                          writecb: null,
                          writechunk: null,
                          writeencoding: 'utf8' },
                       debug: 
                        Debug {
                          domain: null,
                          _events: { debug: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          options: { data: false, packet: false, payload: false, token: false },
                          indent: '  ' },
                       colMetadata: undefined,
                       options: 
                        { abortTransactionOnError: false,
                          appName: 'node-mssql',
                          camelCaseColumns: false,
                          cancelTimeout: 5000,
                          columnNameReplacer: undefined,
                          connectionRetryInterval: 500,
                          connectTimeout: 15000,
                          connectionIsolationLevel: 2,
                          cryptoCredentialsDetails: {},
                          database: 'front2007',
                          datefirst: 7,
                          dateFormat: 'mdy',
                          debug: { data: false, packet: false, payload: false, token: false },
                          enableAnsiNull: true,
                          enableAnsiNullDefault: true,
                          enableAnsiPadding: true,
                          enableAnsiWarnings: true,
                          enableArithAbort: false,
                          enableConcatNullYieldsNull: true,
                          enableCursorCloseOnCommit: undefined,
                          enableImplicitTransactions: false,
                          enableNumericRoundabort: false,
                          enableQuotedIdentifier: true,
                          encrypt: false,
                          fallbackToDefaultDb: false,
                          instanceName: undefined,
                          isolationLevel: 2,
                          language: 'us_english',
                          localAddress: undefined,
                          maxRetriesOnTransientErrors: 3,
                          multiSubnetFailover: false,
                          packetSize: 4096,
                          port: 1433,
                          readOnlyIntent: false,
                          requestTimeout: 15000,
                          rowCollectionOnDone: false,
                          rowCollectionOnRequestCompletion: false,
                          tdsVersion: '7_4',
                          textsize: '2147483647',
                          trustServerCertificate: true,
                          useColumnNames: false,
                          useUTC: true },
                       endOfMessageMarker: {},
                       buffer: <Buffer ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                       position: 31,
                       suspended: false,
                       await: [Function],
                       next: undefined } },
                 inTransaction: false,
                 transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                 state: 
                  { name: 'LoggedIn',
                    events: { socketError: [Function: socketError] } },
                 connectTimer: 
                  Timeout {
                    '0': null,
                    _called: false,
                    _idleTimeout: -1,
                    _idlePrev: null,
                    _idleNext: null,
                    _idleStart: 12062,
                    _onTimeout: null,
                    _timerArgs: undefined,
                    _repeat: null },
                 curTransientRetryCount: 0,
                 transientErrorLookup: TransientErrorLookup {},
                 cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                 socket: 
                  Socket {
                    connecting: false,
                    _hadError: false,
                    _handle: 
                     TCP {
                       bytesRead: 874,
                       _externalStream: {},
                       fd: -1,
                       reading: true,
                       owner: [Circular],
                       onread: [Function: onread],
                       onconnection: null,
                       writeQueueSize: 0 },
                    _parent: null,
                    _host: null,
                    _readableState: 
                     ReadableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       buffer: BufferList { head: null, tail: null, length: 0 },
                       length: 0,
                       pipes: 
                        ReadablePacketStream {
                          _readableState: 
                           ReadableState {
                             objectMode: true,
                             highWaterMark: 16,
                             buffer: BufferList { head: null, tail: null, length: 0 },
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: false,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: { [Function: g] listener: [Function: onend] },
                             prefinish: { [Function: g] listener: [Function] },
                             data: [Function],
                             unpipe: [Function: onunpipe],
                             drain: [Function],
                             error: [Function: onerror],
                             close: { [Function: g] listener: [Function: onclose] },
                             finish: { [Function: g] listener: [Function: onfinish] } },
                          _eventsCount: 8,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: true,
                             highWaterMark: 16,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: true,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 0,
                             prefinished: false,
                             errorEmitted: false,
                             bufferedRequestCount: 0,
                             corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                          writable: true,
                          allowHalfOpen: true,
                          _transformState: 
                           TransformState {
                             afterTransform: [Function],
                             needTransform: true,
                             transforming: false,
                             writecb: null,
                             writechunk: null,
                             writeencoding: 'buffer' },
                          buffer: <Buffer 04 01 00 27 00 c8 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                          position: 39 },
                       pipesCount: 1,
                       flowing: true,
                       ended: false,
                       endEmitted: false,
                       reading: true,
                       sync: false,
                       needReadable: true,
                       emittedReadable: false,
                       readableListening: false,
                       resumeScheduled: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: true,
                    domain: null,
                    _events: 
                     { end: 
                        [ { [Function: g] listener: [Function: onend] },
                          [Function: bound socketEnd],
                          { [Function: g] listener: [Function: onend] } ],
                       finish: [Function: onSocketFinish],
                       _socketEnd: [Function: onSocketEnd],
                       error: [Function: bound socketError],
                       close: [Function: bound socketClose],
                       data: [Function: ondata] },
                    _eventsCount: 6,
                    _maxListeners: undefined,
                    _writableState: 
                     WritableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       needDrain: false,
                       ending: false,
                       ended: false,
                       finished: false,
                       decodeStrings: false,
                       defaultEncoding: 'utf8',
                       length: 0,
                       writing: false,
                       corked: 0,
                       sync: false,
                       bufferProcessing: false,
                       onwrite: [Function],
                       writecb: null,
                       writelen: 0,
                       bufferedRequest: null,
                       lastBufferedRequest: null,
                       pendingcb: 0,
                       prefinished: false,
                       errorEmitted: false,
                       bufferedRequestCount: 0,
                       corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                    writable: true,
                    allowHalfOpen: false,
                    destroyed: false,
                    _bytesDispatched: 1313,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: null,
                    _server: null,
                    read: [Function],
                    _consuming: true },
                 messageIo: 
                  MessageIO {
                    domain: null,
                    _events: 
                     { data: [Function],
                       message: [Function],
                       secure: [Function: bound emit] },
                    _eventsCount: 3,
                    _maxListeners: undefined,
                    socket: 
                     Socket {
                       connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          bytesRead: 874,
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: 
                           ReadablePacketStream {
                             _readableState: 
                              ReadableState {
                                objectMode: true,
                                highWaterMark: 16,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: null,
                                pipesCount: 0,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: false,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: { [Function: g] listener: [Function: onend] },
                                prefinish: { [Function: g] listener: [Function] },
                                data: [Function],
                                unpipe: [Function: onunpipe],
                                drain: [Function],
                                error: [Function: onerror],
                                close: { [Function: g] listener: [Function: onclose] },
                                finish: { [Function: g] listener: [Function: onfinish] } },
                             _eventsCount: 8,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: true,
                                highWaterMark: 16,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: true,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: true,
                             _transformState: 
                              TransformState {
                                afterTransform: [Function],
                                needTransform: true,
                                transforming: false,
                                writecb: null,
                                writechunk: null,
                                writeencoding: 'buffer' },
                             buffer: <Buffer 04 01 00 27 00 c8 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                             position: 39 },
                          pipesCount: 1,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: bound socketEnd],
                             { [Function: g] listener: [Function: onend] } ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          error: [Function: bound socketError],
                          close: [Function: bound socketClose],
                          data: [Function: ondata] },
                       _eventsCount: 6,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 0,
                          prefinished: false,
                          errorEmitted: false,
                          bufferedRequestCount: 0,
                          corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                       writable: true,
                       allowHalfOpen: false,
                       destroyed: false,
                       _bytesDispatched: 1313,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: null,
                       _server: null,
                       read: [Function],
                       _consuming: true },
                    _packetSize: 4096,
                    debug: 
                     Debug {
                       domain: null,
                       _events: { debug: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       options: { data: false, packet: false, payload: false, token: false },
                       indent: '  ' },
                    sendPacket: [Function: bound sendPacket],
                    packetStream: 
                     ReadablePacketStream {
                       _readableState: 
                        ReadableState {
                          objectMode: true,
                          highWaterMark: 16,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: false,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: { [Function: g] listener: [Function: onend] },
                          prefinish: { [Function: g] listener: [Function] },
                          data: [Function],
                          unpipe: [Function: onunpipe],
                          drain: [Function],
                          error: [Function: onerror],
                          close: { [Function: g] listener: [Function: onclose] },
                          finish: { [Function: g] listener: [Function: onfinish] } },
                       _eventsCount: 8,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: true,
                          highWaterMark: 16,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: true,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 0,
                          prefinished: false,
                          errorEmitted: false,
                          bufferedRequestCount: 0,
                          corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                       writable: true,
                       allowHalfOpen: true,
                       _transformState: 
                        TransformState {
                          afterTransform: [Function],
                          needTransform: true,
                          transforming: false,
                          writecb: null,
                          writechunk: null,
                          writeencoding: 'buffer' },
                       buffer: <Buffer 04 01 00 27 00 c8 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                       position: 39 },
                    packetDataSize: 4088 },
                 closed: false,
                 messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                 routingData: undefined,
                 loggedIn: true,
                 isSqlBatch: false,
                 request: undefined,
                 requestTimer: undefined,
                 resetConnectionOnNextRequest: false,
                 procReturnStatusValue: undefined },
              state: 'IDLE' } },
           _resourceLoans: Map {},
           _evictionIterator: 
            DequeIterator {
              _list: 
               DoublyLinkedList {
                 head: 
                  { prev: null,
                    next: null,
                    data: 
                     PooledResource {
                       creationTime: 1524290948859,
                       lastReturnTime: 1524290948869,
                       lastBorrowTime: 1524290948860,
                       lastIdleTime: 1524290948869,
                       obj: 
                        Connection {
                          domain: null,
                          _events: { error: [ [Function] ] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          config: 
                           { server: 'DIOPRDB01',
                             userName: 'usrCERND',
                             password: 'usrIMSI^0730CERND',
                             domain: undefined,
                             securityPackage: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true } },
                          reset: [Function: bound reset],
                          socketClose: [Function: bound socketClose],
                          socketEnd: [Function: bound socketEnd],
                          socketConnect: [Function: bound socketConnect],
                          socketError: [Function: bound socketError],
                          requestTimeout: [Function: bound requestTimeout],
                          connectTimeout: [Function: bound connectTimeout],
                          retryTimeout: [Function: bound retryTimeout],
                          debug: 
                           Debug {
                             domain: null,
                             _events: { debug: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             options: { data: false, packet: false, payload: false, token: false },
                             indent: '  ' },
                          tokenStreamParser: 
                           Parser {
                             domain: null,
                             _events: 
                              { infoMessage: [Function],
                                sspichallenge: [Function],
                                errorMessage: [Function],
                                databaseChange: [Function],
                                languageChange: [Function],
                                charsetChange: [Function],
                                loginack: [Function],
                                routingChange: [Function],
                                packetSizeChange: [Function],
                                beginTransaction: [Function],
                                commitTransaction: [Function],
                                rollbackTransaction: [Function],
                                columnMetadata: [Function],
                                order: [Function],
                                row: [Function],
                                returnStatus: [Function],
                                returnValue: [Function],
                                doneProc: [Function],
                                doneInProc: [Function],
                                done: [Function],
                                endOfMessage: [Function],
                                resetConnection: [Function],
                                tokenStreamError: [Function],
                                drain: [Function] },
                             _eventsCount: 24,
                             _maxListeners: undefined,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             colMetadata: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true },
                             parser: 
                              Parser {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   drain: [Function] },
                                _eventsCount: 4,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'utf8' },
                                debug: 
                                 Debug {
                                   domain: null,
                                   _events: { debug: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   options: { data: false, packet: false, payload: false, token: false },
                                   indent: '  ' },
                                colMetadata: undefined,
                                options: 
                                 { abortTransactionOnError: false,
                                   appName: 'node-mssql',
                                   camelCaseColumns: false,
                                   cancelTimeout: 5000,
                                   columnNameReplacer: undefined,
                                   connectionRetryInterval: 500,
                                   connectTimeout: 15000,
                                   connectionIsolationLevel: 2,
                                   cryptoCredentialsDetails: {},
                                   database: 'front2007',
                                   datefirst: 7,
                                   dateFormat: 'mdy',
                                   debug: { data: false, packet: false, payload: false, token: false },
                                   enableAnsiNull: true,
                                   enableAnsiNullDefault: true,
                                   enableAnsiPadding: true,
                                   enableAnsiWarnings: true,
                                   enableArithAbort: false,
                                   enableConcatNullYieldsNull: true,
                                   enableCursorCloseOnCommit: undefined,
                                   enableImplicitTransactions: false,
                                   enableNumericRoundabort: false,
                                   enableQuotedIdentifier: true,
                                   encrypt: false,
                                   fallbackToDefaultDb: false,
                                   instanceName: undefined,
                                   isolationLevel: 2,
                                   language: 'us_english',
                                   localAddress: undefined,
                                   maxRetriesOnTransientErrors: 3,
                                   multiSubnetFailover: false,
                                   packetSize: 4096,
                                   port: 1433,
                                   readOnlyIntent: false,
                                   requestTimeout: 15000,
                                   rowCollectionOnDone: false,
                                   rowCollectionOnRequestCompletion: false,
                                   tdsVersion: '7_4',
                                   textsize: '2147483647',
                                   trustServerCertificate: true,
                                   useColumnNames: false,
                                   useUTC: true },
                                endOfMessageMarker: {},
                                buffer: <Buffer ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                position: 31,
                                suspended: false,
                                await: [Function],
                                next: undefined } },
                          inTransaction: false,
                          transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                          state: 
                           { name: 'LoggedIn',
                             events: { socketError: [Function: socketError] } },
                          connectTimer: 
                           Timeout {
                             '0': null,
                             _called: false,
                             _idleTimeout: -1,
                             _idlePrev: null,
                             _idleNext: null,
                             _idleStart: 12062,
                             _onTimeout: null,
                             _timerArgs: undefined,
                             _repeat: null },
                          curTransientRetryCount: 0,
                          transientErrorLookup: TransientErrorLookup {},
                          cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                          socket: 
                           Socket {
                             connecting: false,
                             _hadError: false,
                             _handle: 
                              TCP {
                                bytesRead: 874,
                                _externalStream: {},
                                fd: -1,
                                reading: true,
                                owner: [Circular],
                                onread: [Function: onread],
                                onconnection: null,
                                writeQueueSize: 0 },
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: 
                                 ReadablePacketStream {
                                   _readableState: 
                                    ReadableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: null,
                                      pipesCount: 0,
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: false,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      defaultEncoding: 'utf8',
                                      ranOut: false,
                                      awaitDrain: 0,
                                      readingMore: false,
                                      decoder: null,
                                      encoding: null },
                                   readable: true,
                                   domain: null,
                                   _events: 
                                    { end: { [Function: g] listener: [Function: onend] },
                                      prefinish: { [Function: g] listener: [Function] },
                                      data: [Function],
                                      unpipe: [Function: onunpipe],
                                      drain: [Function],
                                      error: [Function: onerror],
                                      close: { [Function: g] listener: [Function: onclose] },
                                      finish: { [Function: g] listener: [Function: onfinish] } },
                                   _eventsCount: 8,
                                   _maxListeners: undefined,
                                   _writableState: 
                                    WritableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      decodeStrings: true,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function],
                                      writecb: null,
                                      writelen: 0,
                                      bufferedRequest: null,
                                      lastBufferedRequest: null,
                                      pendingcb: 0,
                                      prefinished: false,
                                      errorEmitted: false,
                                      bufferedRequestCount: 0,
                                      corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                   writable: true,
                                   allowHalfOpen: true,
                                   _transformState: 
                                    TransformState {
                                      afterTransform: [Function],
                                      needTransform: true,
                                      transforming: false,
                                      writecb: null,
                                      writechunk: null,
                                      writeencoding: 'buffer' },
                                   buffer: <Buffer 04 01 00 27 00 c8 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                   position: 39 },
                                pipesCount: 1,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: bound socketEnd],
                                   { [Function: g] listener: [Function: onend] } ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                error: [Function: bound socketError],
                                close: [Function: bound socketClose],
                                data: [Function: ondata] },
                             _eventsCount: 6,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: false,
                             destroyed: false,
                             _bytesDispatched: 1313,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: null,
                             _server: null,
                             read: [Function],
                             _consuming: true },
                          messageIo: 
                           MessageIO {
                             domain: null,
                             _events: 
                              { data: [Function],
                                message: [Function],
                                secure: [Function: bound emit] },
                             _eventsCount: 3,
                             _maxListeners: undefined,
                             socket: 
                              Socket {
                                connecting: false,
                                _hadError: false,
                                _handle: 
                                 TCP {
                                   bytesRead: 874,
                                   _externalStream: {},
                                   fd: -1,
                                   reading: true,
                                   owner: [Circular],
                                   onread: [Function: onread],
                                   onconnection: null,
                                   writeQueueSize: 0 },
                                _parent: null,
                                _host: null,
                                _readableState: 
                                 ReadableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: 
                                    ReadablePacketStream {
                                      _readableState: 
                                       ReadableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         buffer: BufferList { head: null, tail: null, length: 0 },
                                         length: 0,
                                         pipes: null,
                                         pipesCount: 0,
                                         flowing: true,
                                         ended: false,
                                         endEmitted: false,
                                         reading: false,
                                         sync: false,
                                         needReadable: true,
                                         emittedReadable: false,
                                         readableListening: false,
                                         resumeScheduled: false,
                                         defaultEncoding: 'utf8',
                                         ranOut: false,
                                         awaitDrain: 0,
                                         readingMore: false,
                                         decoder: null,
                                         encoding: null },
                                      readable: true,
                                      domain: null,
                                      _events: 
                                       { end: { [Function: g] listener: [Function: onend] },
                                         prefinish: { [Function: g] listener: [Function] },
                                         data: [Function],
                                         unpipe: [Function: onunpipe],
                                         drain: [Function],
                                         error: [Function: onerror],
                                         close: { [Function: g] listener: [Function: onclose] },
                                         finish: { [Function: g] listener: [Function: onfinish] } },
                                      _eventsCount: 8,
                                      _maxListeners: undefined,
                                      _writableState: 
                                       WritableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         needDrain: false,
                                         ending: false,
                                         ended: false,
                                         finished: false,
                                         decodeStrings: true,
                                         defaultEncoding: 'utf8',
                                         length: 0,
                                         writing: false,
                                         corked: 0,
                                         sync: false,
                                         bufferProcessing: false,
                                         onwrite: [Function],
                                         writecb: null,
                                         writelen: 0,
                                         bufferedRequest: null,
                                         lastBufferedRequest: null,
                                         pendingcb: 0,
                                         prefinished: false,
                                         errorEmitted: false,
                                         bufferedRequestCount: 0,
                                         corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                      writable: true,
                                      allowHalfOpen: true,
                                      _transformState: 
                                       TransformState {
                                         afterTransform: [Function],
                                         needTransform: true,
                                         transforming: false,
                                         writecb: null,
                                         writechunk: null,
                                         writeencoding: 'buffer' },
                                      buffer: <Buffer 04 01 00 27 00 c8 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                      position: 39 },
                                   pipesCount: 1,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: true,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: 
                                    [ { [Function: g] listener: [Function: onend] },
                                      [Function: bound socketEnd],
                                      { [Function: g] listener: [Function: onend] } ],
                                   finish: [Function: onSocketFinish],
                                   _socketEnd: [Function: onSocketEnd],
                                   error: [Function: bound socketError],
                                   close: [Function: bound socketClose],
                                   data: [Function: ondata] },
                                _eventsCount: 6,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: false,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: false,
                                destroyed: false,
                                _bytesDispatched: 1313,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: null,
                                _server: null,
                                read: [Function],
                                _consuming: true },
                             _packetSize: 4096,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             sendPacket: [Function: bound sendPacket],
                             packetStream: 
                              ReadablePacketStream {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   unpipe: [Function: onunpipe],
                                   drain: [Function],
                                   error: [Function: onerror],
                                   close: { [Function: g] listener: [Function: onclose] },
                                   finish: { [Function: g] listener: [Function: onfinish] } },
                                _eventsCount: 8,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'buffer' },
                                buffer: <Buffer 04 01 00 27 00 c8 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                position: 39 },
                             packetDataSize: 4088 },
                          closed: false,
                          messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                          routingData: undefined,
                          loggedIn: true,
                          isSqlBatch: false,
                          request: undefined,
                          requestTimer: undefined,
                          resetConnectionOnNextRequest: false,
                          procReturnStatusValue: undefined },
                       state: 'IDLE' } },
                 tail: 
                  { prev: null,
                    next: null,
                    data: 
                     PooledResource {
                       creationTime: 1524290948859,
                       lastReturnTime: 1524290948869,
                       lastBorrowTime: 1524290948860,
                       lastIdleTime: 1524290948869,
                       obj: 
                        Connection {
                          domain: null,
                          _events: { error: [ [Function] ] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          config: 
                           { server: 'DIOPRDB01',
                             userName: 'usrCERND',
                             password: 'usrIMSI^0730CERND',
                             domain: undefined,
                             securityPackage: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true } },
                          reset: [Function: bound reset],
                          socketClose: [Function: bound socketClose],
                          socketEnd: [Function: bound socketEnd],
                          socketConnect: [Function: bound socketConnect],
                          socketError: [Function: bound socketError],
                          requestTimeout: [Function: bound requestTimeout],
                          connectTimeout: [Function: bound connectTimeout],
                          retryTimeout: [Function: bound retryTimeout],
                          debug: 
                           Debug {
                             domain: null,
                             _events: { debug: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             options: { data: false, packet: false, payload: false, token: false },
                             indent: '  ' },
                          tokenStreamParser: 
                           Parser {
                             domain: null,
                             _events: 
                              { infoMessage: [Function],
                                sspichallenge: [Function],
                                errorMessage: [Function],
                                databaseChange: [Function],
                                languageChange: [Function],
                                charsetChange: [Function],
                                loginack: [Function],
                                routingChange: [Function],
                                packetSizeChange: [Function],
                                beginTransaction: [Function],
                                commitTransaction: [Function],
                                rollbackTransaction: [Function],
                                columnMetadata: [Function],
                                order: [Function],
                                row: [Function],
                                returnStatus: [Function],
                                returnValue: [Function],
                                doneProc: [Function],
                                doneInProc: [Function],
                                done: [Function],
                                endOfMessage: [Function],
                                resetConnection: [Function],
                                tokenStreamError: [Function],
                                drain: [Function] },
                             _eventsCount: 24,
                             _maxListeners: undefined,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             colMetadata: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true },
                             parser: 
                              Parser {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   drain: [Function] },
                                _eventsCount: 4,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'utf8' },
                                debug: 
                                 Debug {
                                   domain: null,
                                   _events: { debug: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   options: { data: false, packet: false, payload: false, token: false },
                                   indent: '  ' },
                                colMetadata: undefined,
                                options: 
                                 { abortTransactionOnError: false,
                                   appName: 'node-mssql',
                                   camelCaseColumns: false,
                                   cancelTimeout: 5000,
                                   columnNameReplacer: undefined,
                                   connectionRetryInterval: 500,
                                   connectTimeout: 15000,
                                   connectionIsolationLevel: 2,
                                   cryptoCredentialsDetails: {},
                                   database: 'front2007',
                                   datefirst: 7,
                                   dateFormat: 'mdy',
                                   debug: { data: false, packet: false, payload: false, token: false },
                                   enableAnsiNull: true,
                                   enableAnsiNullDefault: true,
                                   enableAnsiPadding: true,
                                   enableAnsiWarnings: true,
                                   enableArithAbort: false,
                                   enableConcatNullYieldsNull: true,
                                   enableCursorCloseOnCommit: undefined,
                                   enableImplicitTransactions: false,
                                   enableNumericRoundabort: false,
                                   enableQuotedIdentifier: true,
                                   encrypt: false,
                                   fallbackToDefaultDb: false,
                                   instanceName: undefined,
                                   isolationLevel: 2,
                                   language: 'us_english',
                                   localAddress: undefined,
                                   maxRetriesOnTransientErrors: 3,
                                   multiSubnetFailover: false,
                                   packetSize: 4096,
                                   port: 1433,
                                   readOnlyIntent: false,
                                   requestTimeout: 15000,
                                   rowCollectionOnDone: false,
                                   rowCollectionOnRequestCompletion: false,
                                   tdsVersion: '7_4',
                                   textsize: '2147483647',
                                   trustServerCertificate: true,
                                   useColumnNames: false,
                                   useUTC: true },
                                endOfMessageMarker: {},
                                buffer: <Buffer ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                position: 31,
                                suspended: false,
                                await: [Function],
                                next: undefined } },
                          inTransaction: false,
                          transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                          state: 
                           { name: 'LoggedIn',
                             events: { socketError: [Function: socketError] } },
                          connectTimer: 
                           Timeout {
                             '0': null,
                             _called: false,
                             _idleTimeout: -1,
                             _idlePrev: null,
                             _idleNext: null,
                             _idleStart: 12062,
                             _onTimeout: null,
                             _timerArgs: undefined,
                             _repeat: null },
                          curTransientRetryCount: 0,
                          transientErrorLookup: TransientErrorLookup {},
                          cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                          socket: 
                           Socket {
                             connecting: false,
                             _hadError: false,
                             _handle: 
                              TCP {
                                bytesRead: 874,
                                _externalStream: {},
                                fd: -1,
                                reading: true,
                                owner: [Circular],
                                onread: [Function: onread],
                                onconnection: null,
                                writeQueueSize: 0 },
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: 
                                 ReadablePacketStream {
                                   _readableState: 
                                    ReadableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: null,
                                      pipesCount: 0,
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: false,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      defaultEncoding: 'utf8',
                                      ranOut: false,
                                      awaitDrain: 0,
                                      readingMore: false,
                                      decoder: null,
                                      encoding: null },
                                   readable: true,
                                   domain: null,
                                   _events: 
                                    { end: { [Function: g] listener: [Function: onend] },
                                      prefinish: { [Function: g] listener: [Function] },
                                      data: [Function],
                                      unpipe: [Function: onunpipe],
                                      drain: [Function],
                                      error: [Function: onerror],
                                      close: { [Function: g] listener: [Function: onclose] },
                                      finish: { [Function: g] listener: [Function: onfinish] } },
                                   _eventsCount: 8,
                                   _maxListeners: undefined,
                                   _writableState: 
                                    WritableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      decodeStrings: true,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function],
                                      writecb: null,
                                      writelen: 0,
                                      bufferedRequest: null,
                                      lastBufferedRequest: null,
                                      pendingcb: 0,
                                      prefinished: false,
                                      errorEmitted: false,
                                      bufferedRequestCount: 0,
                                      corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                   writable: true,
                                   allowHalfOpen: true,
                                   _transformState: 
                                    TransformState {
                                      afterTransform: [Function],
                                      needTransform: true,
                                      transforming: false,
                                      writecb: null,
                                      writechunk: null,
                                      writeencoding: 'buffer' },
                                   buffer: <Buffer 04 01 00 27 00 c8 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                   position: 39 },
                                pipesCount: 1,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: bound socketEnd],
                                   { [Function: g] listener: [Function: onend] } ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                error: [Function: bound socketError],
                                close: [Function: bound socketClose],
                                data: [Function: ondata] },
                             _eventsCount: 6,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: false,
                             destroyed: false,
                             _bytesDispatched: 1313,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: null,
                             _server: null,
                             read: [Function],
                             _consuming: true },
                          messageIo: 
                           MessageIO {
                             domain: null,
                             _events: 
                              { data: [Function],
                                message: [Function],
                                secure: [Function: bound emit] },
                             _eventsCount: 3,
                             _maxListeners: undefined,
                             socket: 
                              Socket {
                                connecting: false,
                                _hadError: false,
                                _handle: 
                                 TCP {
                                   bytesRead: 874,
                                   _externalStream: {},
                                   fd: -1,
                                   reading: true,
                                   owner: [Circular],
                                   onread: [Function: onread],
                                   onconnection: null,
                                   writeQueueSize: 0 },
                                _parent: null,
                                _host: null,
                                _readableState: 
                                 ReadableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: 
                                    ReadablePacketStream {
                                      _readableState: 
                                       ReadableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         buffer: BufferList { head: null, tail: null, length: 0 },
                                         length: 0,
                                         pipes: null,
                                         pipesCount: 0,
                                         flowing: true,
                                         ended: false,
                                         endEmitted: false,
                                         reading: false,
                                         sync: false,
                                         needReadable: true,
                                         emittedReadable: false,
                                         readableListening: false,
                                         resumeScheduled: false,
                                         defaultEncoding: 'utf8',
                                         ranOut: false,
                                         awaitDrain: 0,
                                         readingMore: false,
                                         decoder: null,
                                         encoding: null },
                                      readable: true,
                                      domain: null,
                                      _events: 
                                       { end: { [Function: g] listener: [Function: onend] },
                                         prefinish: { [Function: g] listener: [Function] },
                                         data: [Function],
                                         unpipe: [Function: onunpipe],
                                         drain: [Function],
                                         error: [Function: onerror],
                                         close: { [Function: g] listener: [Function: onclose] },
                                         finish: { [Function: g] listener: [Function: onfinish] } },
                                      _eventsCount: 8,
                                      _maxListeners: undefined,
                                      _writableState: 
                                       WritableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         needDrain: false,
                                         ending: false,
                                         ended: false,
                                         finished: false,
                                         decodeStrings: true,
                                         defaultEncoding: 'utf8',
                                         length: 0,
                                         writing: false,
                                         corked: 0,
                                         sync: false,
                                         bufferProcessing: false,
                                         onwrite: [Function],
                                         writecb: null,
                                         writelen: 0,
                                         bufferedRequest: null,
                                         lastBufferedRequest: null,
                                         pendingcb: 0,
                                         prefinished: false,
                                         errorEmitted: false,
                                         bufferedRequestCount: 0,
                                         corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                      writable: true,
                                      allowHalfOpen: true,
                                      _transformState: 
                                       TransformState {
                                         afterTransform: [Function],
                                         needTransform: true,
                                         transforming: false,
                                         writecb: null,
                                         writechunk: null,
                                         writeencoding: 'buffer' },
                                      buffer: <Buffer 04 01 00 27 00 c8 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                      position: 39 },
                                   pipesCount: 1,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: true,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: 
                                    [ { [Function: g] listener: [Function: onend] },
                                      [Function: bound socketEnd],
                                      { [Function: g] listener: [Function: onend] } ],
                                   finish: [Function: onSocketFinish],
                                   _socketEnd: [Function: onSocketEnd],
                                   error: [Function: bound socketError],
                                   close: [Function: bound socketClose],
                                   data: [Function: ondata] },
                                _eventsCount: 6,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: false,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: false,
                                destroyed: false,
                                _bytesDispatched: 1313,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: null,
                                _server: null,
                                read: [Function],
                                _consuming: true },
                             _packetSize: 4096,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             sendPacket: [Function: bound sendPacket],
                             packetStream: 
                              ReadablePacketStream {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   unpipe: [Function: onunpipe],
                                   drain: [Function],
                                   error: [Function: onerror],
                                   close: { [Function: g] listener: [Function: onclose] },
                                   finish: { [Function: g] listener: [Function: onfinish] } },
                                _eventsCount: 8,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'buffer' },
                                buffer: <Buffer 04 01 00 27 00 c8 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                position: 39 },
                             packetDataSize: 4088 },
                          closed: false,
                          messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                          routingData: undefined,
                          loggedIn: true,
                          isSqlBatch: false,
                          request: undefined,
                          requestTimer: undefined,
                          resetConnectionOnNextRequest: false,
                          procReturnStatusValue: undefined },
                       state: 'IDLE' } },
                 length: 1 },
              _direction: 'next',
              _startPosition: 'head',
              _started: false,
              _cursor: null,
              _done: false },
           _evictor: DefaultEvictor {},
           _scheduledEviction: 
            Timeout {
              _called: false,
              _idleTimeout: 1000,
              _idlePrev: 
               TimersList {
                 _idleNext: [Circular],
                 _idlePrev: [Circular],
                 _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
                 _unrefed: false,
                 msecs: 1000 },
              _idleNext: 
               TimersList {
                 _idleNext: [Circular],
                 _idlePrev: [Circular],
                 _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
                 _unrefed: false,
                 msecs: 1000 },
              _idleStart: 12063,
              _onTimeout: [Function],
              _timerArgs: undefined,
              _repeat: null } } },
     parameters: {},
     rowsAffected: 0,
     _cancel: null },
  results: 
   { recordsets: [],
     recordset: undefined,
     output: {},
     rowsAffected: [ 1 ] },
  rowsAffacted: undefined } 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:09:22.528Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:09:22.533Z] REQUEST PATH : /getData 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:09:29.390Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:09:29.392Z] REQUEST PATH : /getData 
[DEBUG] - [\application\controllers\controller_db.js : 39 | ANONYMOUS_FUNC - 2018-04-21T06:09:29.449Z] { connection: 
   Request {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     canceled: false,
     parent: 
      ConnectionPool {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        config: 
         { user: 'usrCERND',
           password: 'usrIMSI^0730CERND',
           server: 'DIOPRDB01',
           database: 'front2007',
           port: 1433,
           options: {},
           stream: false,
           parseJSON: false },
        _connected: true,
        _connecting: false,
        pool: 
         Pool {
           domain: null,
           _events: 
            { factoryCreateError: [Function: bound emit],
              factoryDestroyError: [Function: bound emit] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _config: 
            PoolOptions {
              fifo: true,
              priorityRange: 1,
              testOnBorrow: true,
              testOnReturn: false,
              autostart: true,
              acquireTimeoutMillis: 15000,
              max: 10,
              min: 0,
              evictionRunIntervalMillis: 1000,
              numTestsPerEvictionRun: 3,
              softIdleTimeoutMillis: -1,
              idleTimeoutMillis: 30000,
              Promise: [Function: Promise] },
           _Promise: [Function: Promise],
           _factory: 
            { create: [Function: bound _poolCreate],
              validate: [Function: bound _poolValidate],
              destroy: [Function: bound _poolDestroy] },
           _draining: false,
           _started: true,
           _waitingClientsQueue: 
            PriorityQueue {
              _size: 1,
              _slots: 
               [ Queue {
                   _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
           _factoryCreateOperations: Set {},
           _factoryDestroyOperations: Set {},
           _availableObjects: 
            Deque {
              _list: 
               DoublyLinkedList {
                 head: 
                  { prev: null,
                    next: null,
                    data: 
                     PooledResource {
                       creationTime: 1524290969426,
                       lastReturnTime: 1524290969449,
                       lastBorrowTime: 1524290969426,
                       lastIdleTime: 1524290969449,
                       obj: 
                        Connection {
                          domain: null,
                          _events: { error: [ [Function] ] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          config: 
                           { server: 'DIOPRDB01',
                             userName: 'usrCERND',
                             password: 'usrIMSI^0730CERND',
                             domain: undefined,
                             securityPackage: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true } },
                          reset: [Function: bound reset],
                          socketClose: [Function: bound socketClose],
                          socketEnd: [Function: bound socketEnd],
                          socketConnect: [Function: bound socketConnect],
                          socketError: [Function: bound socketError],
                          requestTimeout: [Function: bound requestTimeout],
                          connectTimeout: [Function: bound connectTimeout],
                          retryTimeout: [Function: bound retryTimeout],
                          debug: 
                           Debug {
                             domain: null,
                             _events: { debug: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             options: { data: false, packet: false, payload: false, token: false },
                             indent: '  ' },
                          tokenStreamParser: 
                           Parser {
                             domain: null,
                             _events: 
                              { infoMessage: [Function],
                                sspichallenge: [Function],
                                errorMessage: [Function],
                                databaseChange: [Function],
                                languageChange: [Function],
                                charsetChange: [Function],
                                loginack: [Function],
                                routingChange: [Function],
                                packetSizeChange: [Function],
                                beginTransaction: [Function],
                                commitTransaction: [Function],
                                rollbackTransaction: [Function],
                                columnMetadata: [Function],
                                order: [Function],
                                row: [Function],
                                returnStatus: [Function],
                                returnValue: [Function],
                                doneProc: [Function],
                                doneInProc: [Function],
                                done: [Function],
                                endOfMessage: [Function],
                                resetConnection: [Function],
                                tokenStreamError: [Function],
                                drain: [Function] },
                             _eventsCount: 24,
                             _maxListeners: undefined,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             colMetadata: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true },
                             parser: 
                              Parser {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   drain: [Function] },
                                _eventsCount: 4,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'utf8' },
                                debug: 
                                 Debug {
                                   domain: null,
                                   _events: { debug: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   options: { data: false, packet: false, payload: false, token: false },
                                   indent: '  ' },
                                colMetadata: 
                                 [ { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'BUKRS',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 30,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'EMP_NO',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 200,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'BUTXT',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 200,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_BG_CODE',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_BG_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_CODE',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 30,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 300,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'EMP_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 200,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'EMP_NM_ENG',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 300,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'EMP_STAT',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'ENT_DATE',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 40,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'RET_DATE',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 40,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'RSPT_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_HEAD',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 2,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'POS_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'TELF1',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 140,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'TELF3',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 140,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'TELF2',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 140,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'SMTP_ADDR',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 300,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'ADACCOUNT',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 60,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'CPUDT',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 100,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'COM_ORG_ID',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 40,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'ORG_NM_ENG',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 800,
                                     tableName: undefined } ],
                                options: 
                                 { abortTransactionOnError: false,
                                   appName: 'node-mssql',
                                   camelCaseColumns: false,
                                   cancelTimeout: 5000,
                                   columnNameReplacer: undefined,
                                   connectionRetryInterval: 500,
                                   connectTimeout: 15000,
                                   connectionIsolationLevel: 2,
                                   cryptoCredentialsDetails: {},
                                   database: 'front2007',
                                   datefirst: 7,
                                   dateFormat: 'mdy',
                                   debug: { data: false, packet: false, payload: false, token: false },
                                   enableAnsiNull: true,
                                   enableAnsiNullDefault: true,
                                   enableAnsiPadding: true,
                                   enableAnsiWarnings: true,
                                   enableArithAbort: false,
                                   enableConcatNullYieldsNull: true,
                                   enableCursorCloseOnCommit: undefined,
                                   enableImplicitTransactions: false,
                                   enableNumericRoundabort: false,
                                   enableQuotedIdentifier: true,
                                   encrypt: false,
                                   fallbackToDefaultDb: false,
                                   instanceName: undefined,
                                   isolationLevel: 2,
                                   language: 'us_english',
                                   localAddress: undefined,
                                   maxRetriesOnTransientErrors: 3,
                                   multiSubnetFailover: false,
                                   packetSize: 4096,
                                   port: 1433,
                                   readOnlyIntent: false,
                                   requestTimeout: 15000,
                                   rowCollectionOnDone: false,
                                   rowCollectionOnRequestCompletion: false,
                                   tdsVersion: '7_4',
                                   textsize: '2147483647',
                                   trustServerCertificate: true,
                                   useColumnNames: false,
                                   useUTC: true },
                                endOfMessageMarker: {},
                                buffer: <Buffer 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 06 45 00 4d 00 50 00 5f ... >,
                                position: 1142,
                                suspended: false,
                                await: [Function],
                                next: undefined } },
                          inTransaction: false,
                          transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                          state: 
                           { name: 'LoggedIn',
                             events: { socketError: [Function: socketError] } },
                          connectTimer: 
                           Timeout {
                             '0': null,
                             _called: false,
                             _idleTimeout: -1,
                             _idlePrev: null,
                             _idleNext: null,
                             _idleStart: 32640,
                             _onTimeout: null,
                             _timerArgs: undefined,
                             _repeat: null },
                          curTransientRetryCount: 0,
                          transientErrorLookup: TransientErrorLookup {},
                          cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                          socket: 
                           Socket {
                             connecting: false,
                             _hadError: false,
                             _handle: 
                              TCP {
                                bytesRead: 1985,
                                _externalStream: {},
                                fd: -1,
                                reading: true,
                                owner: [Circular],
                                onread: [Function: onread],
                                onconnection: null,
                                writeQueueSize: 0 },
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: 
                                 ReadablePacketStream {
                                   _readableState: 
                                    ReadableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: null,
                                      pipesCount: 0,
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: false,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      defaultEncoding: 'utf8',
                                      ranOut: false,
                                      awaitDrain: 0,
                                      readingMore: false,
                                      decoder: null,
                                      encoding: null },
                                   readable: true,
                                   domain: null,
                                   _events: 
                                    { end: { [Function: g] listener: [Function: onend] },
                                      prefinish: { [Function: g] listener: [Function] },
                                      data: [Function],
                                      unpipe: [Function: onunpipe],
                                      drain: [Function],
                                      error: [Function: onerror],
                                      close: { [Function: g] listener: [Function: onclose] },
                                      finish: { [Function: g] listener: [Function: onfinish] } },
                                   _eventsCount: 8,
                                   _maxListeners: undefined,
                                   _writableState: 
                                    WritableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      decodeStrings: true,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function],
                                      writecb: null,
                                      writelen: 0,
                                      bufferedRequest: null,
                                      lastBufferedRequest: null,
                                      pendingcb: 0,
                                      prefinished: false,
                                      errorEmitted: false,
                                      bufferedRequestCount: 0,
                                      corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                   writable: true,
                                   allowHalfOpen: true,
                                   _transformState: 
                                    TransformState {
                                      afterTransform: [Function],
                                      needTransform: true,
                                      transforming: false,
                                      writecb: null,
                                      writechunk: null,
                                      writeencoding: 'buffer' },
                                   buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                                   position: 1150 },
                                pipesCount: 1,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: bound socketEnd],
                                   { [Function: g] listener: [Function: onend] } ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                error: [Function: bound socketError],
                                close: [Function: bound socketClose],
                                data: [Function: ondata] },
                             _eventsCount: 6,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: false,
                             destroyed: false,
                             _bytesDispatched: 1285,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: null,
                             _server: null,
                             read: [Function],
                             _consuming: true },
                          messageIo: 
                           MessageIO {
                             domain: null,
                             _events: 
                              { data: [Function],
                                message: [Function],
                                secure: [Function: bound emit] },
                             _eventsCount: 3,
                             _maxListeners: undefined,
                             socket: 
                              Socket {
                                connecting: false,
                                _hadError: false,
                                _handle: 
                                 TCP {
                                   bytesRead: 1985,
                                   _externalStream: {},
                                   fd: -1,
                                   reading: true,
                                   owner: [Circular],
                                   onread: [Function: onread],
                                   onconnection: null,
                                   writeQueueSize: 0 },
                                _parent: null,
                                _host: null,
                                _readableState: 
                                 ReadableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: 
                                    ReadablePacketStream {
                                      _readableState: 
                                       ReadableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         buffer: BufferList { head: null, tail: null, length: 0 },
                                         length: 0,
                                         pipes: null,
                                         pipesCount: 0,
                                         flowing: true,
                                         ended: false,
                                         endEmitted: false,
                                         reading: false,
                                         sync: false,
                                         needReadable: true,
                                         emittedReadable: false,
                                         readableListening: false,
                                         resumeScheduled: false,
                                         defaultEncoding: 'utf8',
                                         ranOut: false,
                                         awaitDrain: 0,
                                         readingMore: false,
                                         decoder: null,
                                         encoding: null },
                                      readable: true,
                                      domain: null,
                                      _events: 
                                       { end: { [Function: g] listener: [Function: onend] },
                                         prefinish: { [Function: g] listener: [Function] },
                                         data: [Function],
                                         unpipe: [Function: onunpipe],
                                         drain: [Function],
                                         error: [Function: onerror],
                                         close: { [Function: g] listener: [Function: onclose] },
                                         finish: { [Function: g] listener: [Function: onfinish] } },
                                      _eventsCount: 8,
                                      _maxListeners: undefined,
                                      _writableState: 
                                       WritableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         needDrain: false,
                                         ending: false,
                                         ended: false,
                                         finished: false,
                                         decodeStrings: true,
                                         defaultEncoding: 'utf8',
                                         length: 0,
                                         writing: false,
                                         corked: 0,
                                         sync: false,
                                         bufferProcessing: false,
                                         onwrite: [Function],
                                         writecb: null,
                                         writelen: 0,
                                         bufferedRequest: null,
                                         lastBufferedRequest: null,
                                         pendingcb: 0,
                                         prefinished: false,
                                         errorEmitted: false,
                                         bufferedRequestCount: 0,
                                         corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                      writable: true,
                                      allowHalfOpen: true,
                                      _transformState: 
                                       TransformState {
                                         afterTransform: [Function],
                                         needTransform: true,
                                         transforming: false,
                                         writecb: null,
                                         writechunk: null,
                                         writeencoding: 'buffer' },
                                      buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                                      position: 1150 },
                                   pipesCount: 1,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: true,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: 
                                    [ { [Function: g] listener: [Function: onend] },
                                      [Function: bound socketEnd],
                                      { [Function: g] listener: [Function: onend] } ],
                                   finish: [Function: onSocketFinish],
                                   _socketEnd: [Function: onSocketEnd],
                                   error: [Function: bound socketError],
                                   close: [Function: bound socketClose],
                                   data: [Function: ondata] },
                                _eventsCount: 6,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: false,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: false,
                                destroyed: false,
                                _bytesDispatched: 1285,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: null,
                                _server: null,
                                read: [Function],
                                _consuming: true },
                             _packetSize: 4096,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             sendPacket: [Function: bound sendPacket],
                             packetStream: 
                              ReadablePacketStream {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   unpipe: [Function: onunpipe],
                                   drain: [Function],
                                   error: [Function: onerror],
                                   close: { [Function: g] listener: [Function: onclose] },
                                   finish: { [Function: g] listener: [Function: onfinish] } },
                                _eventsCount: 8,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'buffer' },
                                buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                                position: 1150 },
                             packetDataSize: 4088 },
                          closed: false,
                          messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                          routingData: undefined,
                          loggedIn: true,
                          isSqlBatch: false,
                          request: undefined,
                          requestTimer: undefined,
                          resetConnectionOnNextRequest: false,
                          procReturnStatusValue: undefined },
                       state: 'IDLE' } },
                 tail: 
                  { prev: null,
                    next: null,
                    data: 
                     PooledResource {
                       creationTime: 1524290969426,
                       lastReturnTime: 1524290969449,
                       lastBorrowTime: 1524290969426,
                       lastIdleTime: 1524290969449,
                       obj: 
                        Connection {
                          domain: null,
                          _events: { error: [ [Function] ] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          config: 
                           { server: 'DIOPRDB01',
                             userName: 'usrCERND',
                             password: 'usrIMSI^0730CERND',
                             domain: undefined,
                             securityPackage: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true } },
                          reset: [Function: bound reset],
                          socketClose: [Function: bound socketClose],
                          socketEnd: [Function: bound socketEnd],
                          socketConnect: [Function: bound socketConnect],
                          socketError: [Function: bound socketError],
                          requestTimeout: [Function: bound requestTimeout],
                          connectTimeout: [Function: bound connectTimeout],
                          retryTimeout: [Function: bound retryTimeout],
                          debug: 
                           Debug {
                             domain: null,
                             _events: { debug: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             options: { data: false, packet: false, payload: false, token: false },
                             indent: '  ' },
                          tokenStreamParser: 
                           Parser {
                             domain: null,
                             _events: 
                              { infoMessage: [Function],
                                sspichallenge: [Function],
                                errorMessage: [Function],
                                databaseChange: [Function],
                                languageChange: [Function],
                                charsetChange: [Function],
                                loginack: [Function],
                                routingChange: [Function],
                                packetSizeChange: [Function],
                                beginTransaction: [Function],
                                commitTransaction: [Function],
                                rollbackTransaction: [Function],
                                columnMetadata: [Function],
                                order: [Function],
                                row: [Function],
                                returnStatus: [Function],
                                returnValue: [Function],
                                doneProc: [Function],
                                doneInProc: [Function],
                                done: [Function],
                                endOfMessage: [Function],
                                resetConnection: [Function],
                                tokenStreamError: [Function],
                                drain: [Function] },
                             _eventsCount: 24,
                             _maxListeners: undefined,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             colMetadata: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true },
                             parser: 
                              Parser {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   drain: [Function] },
                                _eventsCount: 4,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'utf8' },
                                debug: 
                                 Debug {
                                   domain: null,
                                   _events: { debug: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   options: { data: false, packet: false, payload: false, token: false },
                                   indent: '  ' },
                                colMetadata: 
                                 [ { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'BUKRS',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 30,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'EMP_NO',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 200,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'BUTXT',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 200,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_BG_CODE',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_BG_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_CODE',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 30,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 300,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'EMP_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 200,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'EMP_NM_ENG',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 300,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'EMP_STAT',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'ENT_DATE',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 40,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'RET_DATE',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 40,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'RSPT_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_HEAD',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 2,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'POS_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'TELF1',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 140,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'TELF3',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 140,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'TELF2',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 140,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'SMTP_ADDR',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 300,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'ADACCOUNT',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 60,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'CPUDT',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 100,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'COM_ORG_ID',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 40,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'ORG_NM_ENG',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 800,
                                     tableName: undefined } ],
                                options: 
                                 { abortTransactionOnError: false,
                                   appName: 'node-mssql',
                                   camelCaseColumns: false,
                                   cancelTimeout: 5000,
                                   columnNameReplacer: undefined,
                                   connectionRetryInterval: 500,
                                   connectTimeout: 15000,
                                   connectionIsolationLevel: 2,
                                   cryptoCredentialsDetails: {},
                                   database: 'front2007',
                                   datefirst: 7,
                                   dateFormat: 'mdy',
                                   debug: { data: false, packet: false, payload: false, token: false },
                                   enableAnsiNull: true,
                                   enableAnsiNullDefault: true,
                                   enableAnsiPadding: true,
                                   enableAnsiWarnings: true,
                                   enableArithAbort: false,
                                   enableConcatNullYieldsNull: true,
                                   enableCursorCloseOnCommit: undefined,
                                   enableImplicitTransactions: false,
                                   enableNumericRoundabort: false,
                                   enableQuotedIdentifier: true,
                                   encrypt: false,
                                   fallbackToDefaultDb: false,
                                   instanceName: undefined,
                                   isolationLevel: 2,
                                   language: 'us_english',
                                   localAddress: undefined,
                                   maxRetriesOnTransientErrors: 3,
                                   multiSubnetFailover: false,
                                   packetSize: 4096,
                                   port: 1433,
                                   readOnlyIntent: false,
                                   requestTimeout: 15000,
                                   rowCollectionOnDone: false,
                                   rowCollectionOnRequestCompletion: false,
                                   tdsVersion: '7_4',
                                   textsize: '2147483647',
                                   trustServerCertificate: true,
                                   useColumnNames: false,
                                   useUTC: true },
                                endOfMessageMarker: {},
                                buffer: <Buffer 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 06 45 00 4d 00 50 00 5f ... >,
                                position: 1142,
                                suspended: false,
                                await: [Function],
                                next: undefined } },
                          inTransaction: false,
                          transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                          state: 
                           { name: 'LoggedIn',
                             events: { socketError: [Function: socketError] } },
                          connectTimer: 
                           Timeout {
                             '0': null,
                             _called: false,
                             _idleTimeout: -1,
                             _idlePrev: null,
                             _idleNext: null,
                             _idleStart: 32640,
                             _onTimeout: null,
                             _timerArgs: undefined,
                             _repeat: null },
                          curTransientRetryCount: 0,
                          transientErrorLookup: TransientErrorLookup {},
                          cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                          socket: 
                           Socket {
                             connecting: false,
                             _hadError: false,
                             _handle: 
                              TCP {
                                bytesRead: 1985,
                                _externalStream: {},
                                fd: -1,
                                reading: true,
                                owner: [Circular],
                                onread: [Function: onread],
                                onconnection: null,
                                writeQueueSize: 0 },
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: 
                                 ReadablePacketStream {
                                   _readableState: 
                                    ReadableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: null,
                                      pipesCount: 0,
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: false,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      defaultEncoding: 'utf8',
                                      ranOut: false,
                                      awaitDrain: 0,
                                      readingMore: false,
                                      decoder: null,
                                      encoding: null },
                                   readable: true,
                                   domain: null,
                                   _events: 
                                    { end: { [Function: g] listener: [Function: onend] },
                                      prefinish: { [Function: g] listener: [Function] },
                                      data: [Function],
                                      unpipe: [Function: onunpipe],
                                      drain: [Function],
                                      error: [Function: onerror],
                                      close: { [Function: g] listener: [Function: onclose] },
                                      finish: { [Function: g] listener: [Function: onfinish] } },
                                   _eventsCount: 8,
                                   _maxListeners: undefined,
                                   _writableState: 
                                    WritableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      decodeStrings: true,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function],
                                      writecb: null,
                                      writelen: 0,
                                      bufferedRequest: null,
                                      lastBufferedRequest: null,
                                      pendingcb: 0,
                                      prefinished: false,
                                      errorEmitted: false,
                                      bufferedRequestCount: 0,
                                      corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                   writable: true,
                                   allowHalfOpen: true,
                                   _transformState: 
                                    TransformState {
                                      afterTransform: [Function],
                                      needTransform: true,
                                      transforming: false,
                                      writecb: null,
                                      writechunk: null,
                                      writeencoding: 'buffer' },
                                   buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                                   position: 1150 },
                                pipesCount: 1,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: bound socketEnd],
                                   { [Function: g] listener: [Function: onend] } ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                error: [Function: bound socketError],
                                close: [Function: bound socketClose],
                                data: [Function: ondata] },
                             _eventsCount: 6,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: false,
                             destroyed: false,
                             _bytesDispatched: 1285,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: null,
                             _server: null,
                             read: [Function],
                             _consuming: true },
                          messageIo: 
                           MessageIO {
                             domain: null,
                             _events: 
                              { data: [Function],
                                message: [Function],
                                secure: [Function: bound emit] },
                             _eventsCount: 3,
                             _maxListeners: undefined,
                             socket: 
                              Socket {
                                connecting: false,
                                _hadError: false,
                                _handle: 
                                 TCP {
                                   bytesRead: 1985,
                                   _externalStream: {},
                                   fd: -1,
                                   reading: true,
                                   owner: [Circular],
                                   onread: [Function: onread],
                                   onconnection: null,
                                   writeQueueSize: 0 },
                                _parent: null,
                                _host: null,
                                _readableState: 
                                 ReadableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: 
                                    ReadablePacketStream {
                                      _readableState: 
                                       ReadableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         buffer: BufferList { head: null, tail: null, length: 0 },
                                         length: 0,
                                         pipes: null,
                                         pipesCount: 0,
                                         flowing: true,
                                         ended: false,
                                         endEmitted: false,
                                         reading: false,
                                         sync: false,
                                         needReadable: true,
                                         emittedReadable: false,
                                         readableListening: false,
                                         resumeScheduled: false,
                                         defaultEncoding: 'utf8',
                                         ranOut: false,
                                         awaitDrain: 0,
                                         readingMore: false,
                                         decoder: null,
                                         encoding: null },
                                      readable: true,
                                      domain: null,
                                      _events: 
                                       { end: { [Function: g] listener: [Function: onend] },
                                         prefinish: { [Function: g] listener: [Function] },
                                         data: [Function],
                                         unpipe: [Function: onunpipe],
                                         drain: [Function],
                                         error: [Function: onerror],
                                         close: { [Function: g] listener: [Function: onclose] },
                                         finish: { [Function: g] listener: [Function: onfinish] } },
                                      _eventsCount: 8,
                                      _maxListeners: undefined,
                                      _writableState: 
                                       WritableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         needDrain: false,
                                         ending: false,
                                         ended: false,
                                         finished: false,
                                         decodeStrings: true,
                                         defaultEncoding: 'utf8',
                                         length: 0,
                                         writing: false,
                                         corked: 0,
                                         sync: false,
                                         bufferProcessing: false,
                                         onwrite: [Function],
                                         writecb: null,
                                         writelen: 0,
                                         bufferedRequest: null,
                                         lastBufferedRequest: null,
                                         pendingcb: 0,
                                         prefinished: false,
                                         errorEmitted: false,
                                         bufferedRequestCount: 0,
                                         corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                      writable: true,
                                      allowHalfOpen: true,
                                      _transformState: 
                                       TransformState {
                                         afterTransform: [Function],
                                         needTransform: true,
                                         transforming: false,
                                         writecb: null,
                                         writechunk: null,
                                         writeencoding: 'buffer' },
                                      buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                                      position: 1150 },
                                   pipesCount: 1,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: true,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: 
                                    [ { [Function: g] listener: [Function: onend] },
                                      [Function: bound socketEnd],
                                      { [Function: g] listener: [Function: onend] } ],
                                   finish: [Function: onSocketFinish],
                                   _socketEnd: [Function: onSocketEnd],
                                   error: [Function: bound socketError],
                                   close: [Function: bound socketClose],
                                   data: [Function: ondata] },
                                _eventsCount: 6,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: false,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: false,
                                destroyed: false,
                                _bytesDispatched: 1285,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: null,
                                _server: null,
                                read: [Function],
                                _consuming: true },
                             _packetSize: 4096,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             sendPacket: [Function: bound sendPacket],
                             packetStream: 
                              ReadablePacketStream {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   unpipe: [Function: onunpipe],
                                   drain: [Function],
                                   error: [Function: onerror],
                                   close: { [Function: g] listener: [Function: onclose] },
                                   finish: { [Function: g] listener: [Function: onfinish] } },
                                _eventsCount: 8,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'buffer' },
                                buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                                position: 1150 },
                             packetDataSize: 4088 },
                          closed: false,
                          messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                          routingData: undefined,
                          loggedIn: true,
                          isSqlBatch: false,
                          request: undefined,
                          requestTimer: undefined,
                          resetConnectionOnNextRequest: false,
                          procReturnStatusValue: undefined },
                       state: 'IDLE' } },
                 length: 1 } },
           _testOnBorrowResources: Set {},
           _testOnReturnResources: Set {},
           _validationOperations: Set {},
           _allObjects: 
            Set {
              PooledResource {
              creationTime: 1524290969426,
              lastReturnTime: 1524290969449,
              lastBorrowTime: 1524290969426,
              lastIdleTime: 1524290969449,
              obj: 
               Connection {
                 domain: null,
                 _events: { error: [ [Function] ] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 config: 
                  { server: 'DIOPRDB01',
                    userName: 'usrCERND',
                    password: 'usrIMSI^0730CERND',
                    domain: undefined,
                    securityPackage: undefined,
                    options: 
                     { abortTransactionOnError: false,
                       appName: 'node-mssql',
                       camelCaseColumns: false,
                       cancelTimeout: 5000,
                       columnNameReplacer: undefined,
                       connectionRetryInterval: 500,
                       connectTimeout: 15000,
                       connectionIsolationLevel: 2,
                       cryptoCredentialsDetails: {},
                       database: 'front2007',
                       datefirst: 7,
                       dateFormat: 'mdy',
                       debug: { data: false, packet: false, payload: false, token: false },
                       enableAnsiNull: true,
                       enableAnsiNullDefault: true,
                       enableAnsiPadding: true,
                       enableAnsiWarnings: true,
                       enableArithAbort: false,
                       enableConcatNullYieldsNull: true,
                       enableCursorCloseOnCommit: undefined,
                       enableImplicitTransactions: false,
                       enableNumericRoundabort: false,
                       enableQuotedIdentifier: true,
                       encrypt: false,
                       fallbackToDefaultDb: false,
                       instanceName: undefined,
                       isolationLevel: 2,
                       language: 'us_english',
                       localAddress: undefined,
                       maxRetriesOnTransientErrors: 3,
                       multiSubnetFailover: false,
                       packetSize: 4096,
                       port: 1433,
                       readOnlyIntent: false,
                       requestTimeout: 15000,
                       rowCollectionOnDone: false,
                       rowCollectionOnRequestCompletion: false,
                       tdsVersion: '7_4',
                       textsize: '2147483647',
                       trustServerCertificate: true,
                       useColumnNames: false,
                       useUTC: true } },
                 reset: [Function: bound reset],
                 socketClose: [Function: bound socketClose],
                 socketEnd: [Function: bound socketEnd],
                 socketConnect: [Function: bound socketConnect],
                 socketError: [Function: bound socketError],
                 requestTimeout: [Function: bound requestTimeout],
                 connectTimeout: [Function: bound connectTimeout],
                 retryTimeout: [Function: bound retryTimeout],
                 debug: 
                  Debug {
                    domain: null,
                    _events: { debug: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    options: { data: false, packet: false, payload: false, token: false },
                    indent: '  ' },
                 tokenStreamParser: 
                  Parser {
                    domain: null,
                    _events: 
                     { infoMessage: [Function],
                       sspichallenge: [Function],
                       errorMessage: [Function],
                       databaseChange: [Function],
                       languageChange: [Function],
                       charsetChange: [Function],
                       loginack: [Function],
                       routingChange: [Function],
                       packetSizeChange: [Function],
                       beginTransaction: [Function],
                       commitTransaction: [Function],
                       rollbackTransaction: [Function],
                       columnMetadata: [Function],
                       order: [Function],
                       row: [Function],
                       returnStatus: [Function],
                       returnValue: [Function],
                       doneProc: [Function],
                       doneInProc: [Function],
                       done: [Function],
                       endOfMessage: [Function],
                       resetConnection: [Function],
                       tokenStreamError: [Function],
                       drain: [Function] },
                    _eventsCount: 24,
                    _maxListeners: undefined,
                    debug: 
                     Debug {
                       domain: null,
                       _events: { debug: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       options: { data: false, packet: false, payload: false, token: false },
                       indent: '  ' },
                    colMetadata: undefined,
                    options: 
                     { abortTransactionOnError: false,
                       appName: 'node-mssql',
                       camelCaseColumns: false,
                       cancelTimeout: 5000,
                       columnNameReplacer: undefined,
                       connectionRetryInterval: 500,
                       connectTimeout: 15000,
                       connectionIsolationLevel: 2,
                       cryptoCredentialsDetails: {},
                       database: 'front2007',
                       datefirst: 7,
                       dateFormat: 'mdy',
                       debug: { data: false, packet: false, payload: false, token: false },
                       enableAnsiNull: true,
                       enableAnsiNullDefault: true,
                       enableAnsiPadding: true,
                       enableAnsiWarnings: true,
                       enableArithAbort: false,
                       enableConcatNullYieldsNull: true,
                       enableCursorCloseOnCommit: undefined,
                       enableImplicitTransactions: false,
                       enableNumericRoundabort: false,
                       enableQuotedIdentifier: true,
                       encrypt: false,
                       fallbackToDefaultDb: false,
                       instanceName: undefined,
                       isolationLevel: 2,
                       language: 'us_english',
                       localAddress: undefined,
                       maxRetriesOnTransientErrors: 3,
                       multiSubnetFailover: false,
                       packetSize: 4096,
                       port: 1433,
                       readOnlyIntent: false,
                       requestTimeout: 15000,
                       rowCollectionOnDone: false,
                       rowCollectionOnRequestCompletion: false,
                       tdsVersion: '7_4',
                       textsize: '2147483647',
                       trustServerCertificate: true,
                       useColumnNames: false,
                       useUTC: true },
                    parser: 
                     Parser {
                       _readableState: 
                        ReadableState {
                          objectMode: true,
                          highWaterMark: 16,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: false,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: { [Function: g] listener: [Function: onend] },
                          prefinish: { [Function: g] listener: [Function] },
                          data: [Function],
                          drain: [Function] },
                       _eventsCount: 4,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: true,
                          highWaterMark: 16,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: true,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 0,
                          prefinished: false,
                          errorEmitted: false,
                          bufferedRequestCount: 0,
                          corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                       writable: true,
                       allowHalfOpen: true,
                       _transformState: 
                        TransformState {
                          afterTransform: [Function],
                          needTransform: true,
                          transforming: false,
                          writecb: null,
                          writechunk: null,
                          writeencoding: 'utf8' },
                       debug: 
                        Debug {
                          domain: null,
                          _events: { debug: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          options: { data: false, packet: false, payload: false, token: false },
                          indent: '  ' },
                       colMetadata: 
                        [ { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'BUKRS',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 30,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'EMP_NO',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 200,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'BUTXT',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 200,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'DEP_BG_CODE',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 8000,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'DEP_BG_NAME',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 8000,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'DEP_CODE',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 30,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'DEP_NAME',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 300,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'EMP_NAME',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 200,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'EMP_NM_ENG',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 300,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'EMP_STAT',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 8000,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'ENT_DATE',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 40,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'RET_DATE',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 40,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'RSPT_NAME',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 8000,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'DEP_HEAD',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 2,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'POS_NAME',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 8000,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'TELF1',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 140,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'TELF3',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 140,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'TELF2',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 140,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'SMTP_ADDR',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 300,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'ADACCOUNT',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 60,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'CPUDT',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 100,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'COM_ORG_ID',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 40,
                            tableName: undefined },
                          { userType: 0,
                            flags: 9,
                            type: 
                             { id: 231,
                               type: 'NVARCHAR',
                               name: 'NVarChar',
                               hasCollation: true,
                               dataLengthLength: 2,
                               maximumLength: 4000,
                               declaration: [Function: declaration],
                               resolveLength: [Function: resolveLength],
                               writeTypeInfo: [Function: writeTypeInfo],
                               writeParameterData: [Function: writeParameterData],
                               validate: [Function: validate] },
                            colName: 'ORG_NM_ENG',
                            collation: 
                             { lcid: 1042,
                               flags: 208,
                               version: 0,
                               sortId: 0,
                               codepage: 'CP949' },
                            precision: undefined,
                            scale: undefined,
                            udtInfo: undefined,
                            dataLength: 800,
                            tableName: undefined } ],
                       options: 
                        { abortTransactionOnError: false,
                          appName: 'node-mssql',
                          camelCaseColumns: false,
                          cancelTimeout: 5000,
                          columnNameReplacer: undefined,
                          connectionRetryInterval: 500,
                          connectTimeout: 15000,
                          connectionIsolationLevel: 2,
                          cryptoCredentialsDetails: {},
                          database: 'front2007',
                          datefirst: 7,
                          dateFormat: 'mdy',
                          debug: { data: false, packet: false, payload: false, token: false },
                          enableAnsiNull: true,
                          enableAnsiNullDefault: true,
                          enableAnsiPadding: true,
                          enableAnsiWarnings: true,
                          enableArithAbort: false,
                          enableConcatNullYieldsNull: true,
                          enableCursorCloseOnCommit: undefined,
                          enableImplicitTransactions: false,
                          enableNumericRoundabort: false,
                          enableQuotedIdentifier: true,
                          encrypt: false,
                          fallbackToDefaultDb: false,
                          instanceName: undefined,
                          isolationLevel: 2,
                          language: 'us_english',
                          localAddress: undefined,
                          maxRetriesOnTransientErrors: 3,
                          multiSubnetFailover: false,
                          packetSize: 4096,
                          port: 1433,
                          readOnlyIntent: false,
                          requestTimeout: 15000,
                          rowCollectionOnDone: false,
                          rowCollectionOnRequestCompletion: false,
                          tdsVersion: '7_4',
                          textsize: '2147483647',
                          trustServerCertificate: true,
                          useColumnNames: false,
                          useUTC: true },
                       endOfMessageMarker: {},
                       buffer: <Buffer 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 06 45 00 4d 00 50 00 5f ... >,
                       position: 1142,
                       suspended: false,
                       await: [Function],
                       next: undefined } },
                 inTransaction: false,
                 transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                 state: 
                  { name: 'LoggedIn',
                    events: { socketError: [Function: socketError] } },
                 connectTimer: 
                  Timeout {
                    '0': null,
                    _called: false,
                    _idleTimeout: -1,
                    _idlePrev: null,
                    _idleNext: null,
                    _idleStart: 32640,
                    _onTimeout: null,
                    _timerArgs: undefined,
                    _repeat: null },
                 curTransientRetryCount: 0,
                 transientErrorLookup: TransientErrorLookup {},
                 cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                 socket: 
                  Socket {
                    connecting: false,
                    _hadError: false,
                    _handle: 
                     TCP {
                       bytesRead: 1985,
                       _externalStream: {},
                       fd: -1,
                       reading: true,
                       owner: [Circular],
                       onread: [Function: onread],
                       onconnection: null,
                       writeQueueSize: 0 },
                    _parent: null,
                    _host: null,
                    _readableState: 
                     ReadableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       buffer: BufferList { head: null, tail: null, length: 0 },
                       length: 0,
                       pipes: 
                        ReadablePacketStream {
                          _readableState: 
                           ReadableState {
                             objectMode: true,
                             highWaterMark: 16,
                             buffer: BufferList { head: null, tail: null, length: 0 },
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: false,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: { [Function: g] listener: [Function: onend] },
                             prefinish: { [Function: g] listener: [Function] },
                             data: [Function],
                             unpipe: [Function: onunpipe],
                             drain: [Function],
                             error: [Function: onerror],
                             close: { [Function: g] listener: [Function: onclose] },
                             finish: { [Function: g] listener: [Function: onfinish] } },
                          _eventsCount: 8,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: true,
                             highWaterMark: 16,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: true,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 0,
                             prefinished: false,
                             errorEmitted: false,
                             bufferedRequestCount: 0,
                             corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                          writable: true,
                          allowHalfOpen: true,
                          _transformState: 
                           TransformState {
                             afterTransform: [Function],
                             needTransform: true,
                             transforming: false,
                             writecb: null,
                             writechunk: null,
                             writeencoding: 'buffer' },
                          buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                          position: 1150 },
                       pipesCount: 1,
                       flowing: true,
                       ended: false,
                       endEmitted: false,
                       reading: true,
                       sync: false,
                       needReadable: true,
                       emittedReadable: false,
                       readableListening: false,
                       resumeScheduled: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: true,
                    domain: null,
                    _events: 
                     { end: 
                        [ { [Function: g] listener: [Function: onend] },
                          [Function: bound socketEnd],
                          { [Function: g] listener: [Function: onend] } ],
                       finish: [Function: onSocketFinish],
                       _socketEnd: [Function: onSocketEnd],
                       error: [Function: bound socketError],
                       close: [Function: bound socketClose],
                       data: [Function: ondata] },
                    _eventsCount: 6,
                    _maxListeners: undefined,
                    _writableState: 
                     WritableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       needDrain: false,
                       ending: false,
                       ended: false,
                       finished: false,
                       decodeStrings: false,
                       defaultEncoding: 'utf8',
                       length: 0,
                       writing: false,
                       corked: 0,
                       sync: false,
                       bufferProcessing: false,
                       onwrite: [Function],
                       writecb: null,
                       writelen: 0,
                       bufferedRequest: null,
                       lastBufferedRequest: null,
                       pendingcb: 0,
                       prefinished: false,
                       errorEmitted: false,
                       bufferedRequestCount: 0,
                       corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                    writable: true,
                    allowHalfOpen: false,
                    destroyed: false,
                    _bytesDispatched: 1285,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: null,
                    _server: null,
                    read: [Function],
                    _consuming: true },
                 messageIo: 
                  MessageIO {
                    domain: null,
                    _events: 
                     { data: [Function],
                       message: [Function],
                       secure: [Function: bound emit] },
                    _eventsCount: 3,
                    _maxListeners: undefined,
                    socket: 
                     Socket {
                       connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          bytesRead: 1985,
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: 
                           ReadablePacketStream {
                             _readableState: 
                              ReadableState {
                                objectMode: true,
                                highWaterMark: 16,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: null,
                                pipesCount: 0,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: false,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: { [Function: g] listener: [Function: onend] },
                                prefinish: { [Function: g] listener: [Function] },
                                data: [Function],
                                unpipe: [Function: onunpipe],
                                drain: [Function],
                                error: [Function: onerror],
                                close: { [Function: g] listener: [Function: onclose] },
                                finish: { [Function: g] listener: [Function: onfinish] } },
                             _eventsCount: 8,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: true,
                                highWaterMark: 16,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: true,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: true,
                             _transformState: 
                              TransformState {
                                afterTransform: [Function],
                                needTransform: true,
                                transforming: false,
                                writecb: null,
                                writechunk: null,
                                writeencoding: 'buffer' },
                             buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                             position: 1150 },
                          pipesCount: 1,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: bound socketEnd],
                             { [Function: g] listener: [Function: onend] } ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          error: [Function: bound socketError],
                          close: [Function: bound socketClose],
                          data: [Function: ondata] },
                       _eventsCount: 6,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 0,
                          prefinished: false,
                          errorEmitted: false,
                          bufferedRequestCount: 0,
                          corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                       writable: true,
                       allowHalfOpen: false,
                       destroyed: false,
                       _bytesDispatched: 1285,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: null,
                       _server: null,
                       read: [Function],
                       _consuming: true },
                    _packetSize: 4096,
                    debug: 
                     Debug {
                       domain: null,
                       _events: { debug: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       options: { data: false, packet: false, payload: false, token: false },
                       indent: '  ' },
                    sendPacket: [Function: bound sendPacket],
                    packetStream: 
                     ReadablePacketStream {
                       _readableState: 
                        ReadableState {
                          objectMode: true,
                          highWaterMark: 16,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: false,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: { [Function: g] listener: [Function: onend] },
                          prefinish: { [Function: g] listener: [Function] },
                          data: [Function],
                          unpipe: [Function: onunpipe],
                          drain: [Function],
                          error: [Function: onerror],
                          close: { [Function: g] listener: [Function: onclose] },
                          finish: { [Function: g] listener: [Function: onfinish] } },
                       _eventsCount: 8,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: true,
                          highWaterMark: 16,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: true,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 0,
                          prefinished: false,
                          errorEmitted: false,
                          bufferedRequestCount: 0,
                          corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                       writable: true,
                       allowHalfOpen: true,
                       _transformState: 
                        TransformState {
                          afterTransform: [Function],
                          needTransform: true,
                          transforming: false,
                          writecb: null,
                          writechunk: null,
                          writeencoding: 'buffer' },
                       buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                       position: 1150 },
                    packetDataSize: 4088 },
                 closed: false,
                 messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                 routingData: undefined,
                 loggedIn: true,
                 isSqlBatch: false,
                 request: undefined,
                 requestTimer: undefined,
                 resetConnectionOnNextRequest: false,
                 procReturnStatusValue: undefined },
              state: 'IDLE' } },
           _resourceLoans: Map {},
           _evictionIterator: 
            DequeIterator {
              _list: 
               DoublyLinkedList {
                 head: 
                  { prev: null,
                    next: null,
                    data: 
                     PooledResource {
                       creationTime: 1524290969426,
                       lastReturnTime: 1524290969449,
                       lastBorrowTime: 1524290969426,
                       lastIdleTime: 1524290969449,
                       obj: 
                        Connection {
                          domain: null,
                          _events: { error: [ [Function] ] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          config: 
                           { server: 'DIOPRDB01',
                             userName: 'usrCERND',
                             password: 'usrIMSI^0730CERND',
                             domain: undefined,
                             securityPackage: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true } },
                          reset: [Function: bound reset],
                          socketClose: [Function: bound socketClose],
                          socketEnd: [Function: bound socketEnd],
                          socketConnect: [Function: bound socketConnect],
                          socketError: [Function: bound socketError],
                          requestTimeout: [Function: bound requestTimeout],
                          connectTimeout: [Function: bound connectTimeout],
                          retryTimeout: [Function: bound retryTimeout],
                          debug: 
                           Debug {
                             domain: null,
                             _events: { debug: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             options: { data: false, packet: false, payload: false, token: false },
                             indent: '  ' },
                          tokenStreamParser: 
                           Parser {
                             domain: null,
                             _events: 
                              { infoMessage: [Function],
                                sspichallenge: [Function],
                                errorMessage: [Function],
                                databaseChange: [Function],
                                languageChange: [Function],
                                charsetChange: [Function],
                                loginack: [Function],
                                routingChange: [Function],
                                packetSizeChange: [Function],
                                beginTransaction: [Function],
                                commitTransaction: [Function],
                                rollbackTransaction: [Function],
                                columnMetadata: [Function],
                                order: [Function],
                                row: [Function],
                                returnStatus: [Function],
                                returnValue: [Function],
                                doneProc: [Function],
                                doneInProc: [Function],
                                done: [Function],
                                endOfMessage: [Function],
                                resetConnection: [Function],
                                tokenStreamError: [Function],
                                drain: [Function] },
                             _eventsCount: 24,
                             _maxListeners: undefined,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             colMetadata: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true },
                             parser: 
                              Parser {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   drain: [Function] },
                                _eventsCount: 4,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'utf8' },
                                debug: 
                                 Debug {
                                   domain: null,
                                   _events: { debug: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   options: { data: false, packet: false, payload: false, token: false },
                                   indent: '  ' },
                                colMetadata: 
                                 [ { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'BUKRS',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 30,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'EMP_NO',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 200,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'BUTXT',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 200,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_BG_CODE',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_BG_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_CODE',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 30,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 300,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'EMP_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 200,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'EMP_NM_ENG',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 300,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'EMP_STAT',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'ENT_DATE',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 40,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'RET_DATE',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 40,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'RSPT_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_HEAD',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 2,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'POS_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'TELF1',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 140,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'TELF3',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 140,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'TELF2',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 140,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'SMTP_ADDR',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 300,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'ADACCOUNT',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 60,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'CPUDT',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 100,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'COM_ORG_ID',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 40,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'ORG_NM_ENG',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 800,
                                     tableName: undefined } ],
                                options: 
                                 { abortTransactionOnError: false,
                                   appName: 'node-mssql',
                                   camelCaseColumns: false,
                                   cancelTimeout: 5000,
                                   columnNameReplacer: undefined,
                                   connectionRetryInterval: 500,
                                   connectTimeout: 15000,
                                   connectionIsolationLevel: 2,
                                   cryptoCredentialsDetails: {},
                                   database: 'front2007',
                                   datefirst: 7,
                                   dateFormat: 'mdy',
                                   debug: { data: false, packet: false, payload: false, token: false },
                                   enableAnsiNull: true,
                                   enableAnsiNullDefault: true,
                                   enableAnsiPadding: true,
                                   enableAnsiWarnings: true,
                                   enableArithAbort: false,
                                   enableConcatNullYieldsNull: true,
                                   enableCursorCloseOnCommit: undefined,
                                   enableImplicitTransactions: false,
                                   enableNumericRoundabort: false,
                                   enableQuotedIdentifier: true,
                                   encrypt: false,
                                   fallbackToDefaultDb: false,
                                   instanceName: undefined,
                                   isolationLevel: 2,
                                   language: 'us_english',
                                   localAddress: undefined,
                                   maxRetriesOnTransientErrors: 3,
                                   multiSubnetFailover: false,
                                   packetSize: 4096,
                                   port: 1433,
                                   readOnlyIntent: false,
                                   requestTimeout: 15000,
                                   rowCollectionOnDone: false,
                                   rowCollectionOnRequestCompletion: false,
                                   tdsVersion: '7_4',
                                   textsize: '2147483647',
                                   trustServerCertificate: true,
                                   useColumnNames: false,
                                   useUTC: true },
                                endOfMessageMarker: {},
                                buffer: <Buffer 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 06 45 00 4d 00 50 00 5f ... >,
                                position: 1142,
                                suspended: false,
                                await: [Function],
                                next: undefined } },
                          inTransaction: false,
                          transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                          state: 
                           { name: 'LoggedIn',
                             events: { socketError: [Function: socketError] } },
                          connectTimer: 
                           Timeout {
                             '0': null,
                             _called: false,
                             _idleTimeout: -1,
                             _idlePrev: null,
                             _idleNext: null,
                             _idleStart: 32640,
                             _onTimeout: null,
                             _timerArgs: undefined,
                             _repeat: null },
                          curTransientRetryCount: 0,
                          transientErrorLookup: TransientErrorLookup {},
                          cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                          socket: 
                           Socket {
                             connecting: false,
                             _hadError: false,
                             _handle: 
                              TCP {
                                bytesRead: 1985,
                                _externalStream: {},
                                fd: -1,
                                reading: true,
                                owner: [Circular],
                                onread: [Function: onread],
                                onconnection: null,
                                writeQueueSize: 0 },
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: 
                                 ReadablePacketStream {
                                   _readableState: 
                                    ReadableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: null,
                                      pipesCount: 0,
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: false,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      defaultEncoding: 'utf8',
                                      ranOut: false,
                                      awaitDrain: 0,
                                      readingMore: false,
                                      decoder: null,
                                      encoding: null },
                                   readable: true,
                                   domain: null,
                                   _events: 
                                    { end: { [Function: g] listener: [Function: onend] },
                                      prefinish: { [Function: g] listener: [Function] },
                                      data: [Function],
                                      unpipe: [Function: onunpipe],
                                      drain: [Function],
                                      error: [Function: onerror],
                                      close: { [Function: g] listener: [Function: onclose] },
                                      finish: { [Function: g] listener: [Function: onfinish] } },
                                   _eventsCount: 8,
                                   _maxListeners: undefined,
                                   _writableState: 
                                    WritableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      decodeStrings: true,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function],
                                      writecb: null,
                                      writelen: 0,
                                      bufferedRequest: null,
                                      lastBufferedRequest: null,
                                      pendingcb: 0,
                                      prefinished: false,
                                      errorEmitted: false,
                                      bufferedRequestCount: 0,
                                      corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                   writable: true,
                                   allowHalfOpen: true,
                                   _transformState: 
                                    TransformState {
                                      afterTransform: [Function],
                                      needTransform: true,
                                      transforming: false,
                                      writecb: null,
                                      writechunk: null,
                                      writeencoding: 'buffer' },
                                   buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                                   position: 1150 },
                                pipesCount: 1,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: bound socketEnd],
                                   { [Function: g] listener: [Function: onend] } ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                error: [Function: bound socketError],
                                close: [Function: bound socketClose],
                                data: [Function: ondata] },
                             _eventsCount: 6,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: false,
                             destroyed: false,
                             _bytesDispatched: 1285,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: null,
                             _server: null,
                             read: [Function],
                             _consuming: true },
                          messageIo: 
                           MessageIO {
                             domain: null,
                             _events: 
                              { data: [Function],
                                message: [Function],
                                secure: [Function: bound emit] },
                             _eventsCount: 3,
                             _maxListeners: undefined,
                             socket: 
                              Socket {
                                connecting: false,
                                _hadError: false,
                                _handle: 
                                 TCP {
                                   bytesRead: 1985,
                                   _externalStream: {},
                                   fd: -1,
                                   reading: true,
                                   owner: [Circular],
                                   onread: [Function: onread],
                                   onconnection: null,
                                   writeQueueSize: 0 },
                                _parent: null,
                                _host: null,
                                _readableState: 
                                 ReadableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: 
                                    ReadablePacketStream {
                                      _readableState: 
                                       ReadableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         buffer: BufferList { head: null, tail: null, length: 0 },
                                         length: 0,
                                         pipes: null,
                                         pipesCount: 0,
                                         flowing: true,
                                         ended: false,
                                         endEmitted: false,
                                         reading: false,
                                         sync: false,
                                         needReadable: true,
                                         emittedReadable: false,
                                         readableListening: false,
                                         resumeScheduled: false,
                                         defaultEncoding: 'utf8',
                                         ranOut: false,
                                         awaitDrain: 0,
                                         readingMore: false,
                                         decoder: null,
                                         encoding: null },
                                      readable: true,
                                      domain: null,
                                      _events: 
                                       { end: { [Function: g] listener: [Function: onend] },
                                         prefinish: { [Function: g] listener: [Function] },
                                         data: [Function],
                                         unpipe: [Function: onunpipe],
                                         drain: [Function],
                                         error: [Function: onerror],
                                         close: { [Function: g] listener: [Function: onclose] },
                                         finish: { [Function: g] listener: [Function: onfinish] } },
                                      _eventsCount: 8,
                                      _maxListeners: undefined,
                                      _writableState: 
                                       WritableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         needDrain: false,
                                         ending: false,
                                         ended: false,
                                         finished: false,
                                         decodeStrings: true,
                                         defaultEncoding: 'utf8',
                                         length: 0,
                                         writing: false,
                                         corked: 0,
                                         sync: false,
                                         bufferProcessing: false,
                                         onwrite: [Function],
                                         writecb: null,
                                         writelen: 0,
                                         bufferedRequest: null,
                                         lastBufferedRequest: null,
                                         pendingcb: 0,
                                         prefinished: false,
                                         errorEmitted: false,
                                         bufferedRequestCount: 0,
                                         corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                      writable: true,
                                      allowHalfOpen: true,
                                      _transformState: 
                                       TransformState {
                                         afterTransform: [Function],
                                         needTransform: true,
                                         transforming: false,
                                         writecb: null,
                                         writechunk: null,
                                         writeencoding: 'buffer' },
                                      buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                                      position: 1150 },
                                   pipesCount: 1,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: true,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: 
                                    [ { [Function: g] listener: [Function: onend] },
                                      [Function: bound socketEnd],
                                      { [Function: g] listener: [Function: onend] } ],
                                   finish: [Function: onSocketFinish],
                                   _socketEnd: [Function: onSocketEnd],
                                   error: [Function: bound socketError],
                                   close: [Function: bound socketClose],
                                   data: [Function: ondata] },
                                _eventsCount: 6,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: false,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: false,
                                destroyed: false,
                                _bytesDispatched: 1285,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: null,
                                _server: null,
                                read: [Function],
                                _consuming: true },
                             _packetSize: 4096,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             sendPacket: [Function: bound sendPacket],
                             packetStream: 
                              ReadablePacketStream {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   unpipe: [Function: onunpipe],
                                   drain: [Function],
                                   error: [Function: onerror],
                                   close: { [Function: g] listener: [Function: onclose] },
                                   finish: { [Function: g] listener: [Function: onfinish] } },
                                _eventsCount: 8,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'buffer' },
                                buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                                position: 1150 },
                             packetDataSize: 4088 },
                          closed: false,
                          messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                          routingData: undefined,
                          loggedIn: true,
                          isSqlBatch: false,
                          request: undefined,
                          requestTimer: undefined,
                          resetConnectionOnNextRequest: false,
                          procReturnStatusValue: undefined },
                       state: 'IDLE' } },
                 tail: 
                  { prev: null,
                    next: null,
                    data: 
                     PooledResource {
                       creationTime: 1524290969426,
                       lastReturnTime: 1524290969449,
                       lastBorrowTime: 1524290969426,
                       lastIdleTime: 1524290969449,
                       obj: 
                        Connection {
                          domain: null,
                          _events: { error: [ [Function] ] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          config: 
                           { server: 'DIOPRDB01',
                             userName: 'usrCERND',
                             password: 'usrIMSI^0730CERND',
                             domain: undefined,
                             securityPackage: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true } },
                          reset: [Function: bound reset],
                          socketClose: [Function: bound socketClose],
                          socketEnd: [Function: bound socketEnd],
                          socketConnect: [Function: bound socketConnect],
                          socketError: [Function: bound socketError],
                          requestTimeout: [Function: bound requestTimeout],
                          connectTimeout: [Function: bound connectTimeout],
                          retryTimeout: [Function: bound retryTimeout],
                          debug: 
                           Debug {
                             domain: null,
                             _events: { debug: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             options: { data: false, packet: false, payload: false, token: false },
                             indent: '  ' },
                          tokenStreamParser: 
                           Parser {
                             domain: null,
                             _events: 
                              { infoMessage: [Function],
                                sspichallenge: [Function],
                                errorMessage: [Function],
                                databaseChange: [Function],
                                languageChange: [Function],
                                charsetChange: [Function],
                                loginack: [Function],
                                routingChange: [Function],
                                packetSizeChange: [Function],
                                beginTransaction: [Function],
                                commitTransaction: [Function],
                                rollbackTransaction: [Function],
                                columnMetadata: [Function],
                                order: [Function],
                                row: [Function],
                                returnStatus: [Function],
                                returnValue: [Function],
                                doneProc: [Function],
                                doneInProc: [Function],
                                done: [Function],
                                endOfMessage: [Function],
                                resetConnection: [Function],
                                tokenStreamError: [Function],
                                drain: [Function] },
                             _eventsCount: 24,
                             _maxListeners: undefined,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             colMetadata: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true },
                             parser: 
                              Parser {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   drain: [Function] },
                                _eventsCount: 4,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'utf8' },
                                debug: 
                                 Debug {
                                   domain: null,
                                   _events: { debug: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   options: { data: false, packet: false, payload: false, token: false },
                                   indent: '  ' },
                                colMetadata: 
                                 [ { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'BUKRS',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 30,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'EMP_NO',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 200,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'BUTXT',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 200,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_BG_CODE',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_BG_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_CODE',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 30,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 300,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'EMP_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 200,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'EMP_NM_ENG',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 300,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'EMP_STAT',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'ENT_DATE',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 40,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'RET_DATE',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 40,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'RSPT_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'DEP_HEAD',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 2,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'POS_NAME',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 8000,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'TELF1',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 140,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'TELF3',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 140,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'TELF2',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 140,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'SMTP_ADDR',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 300,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'ADACCOUNT',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 60,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'CPUDT',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 100,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'COM_ORG_ID',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 40,
                                     tableName: undefined },
                                   { userType: 0,
                                     flags: 9,
                                     type: 
                                      { id: 231,
                                        type: 'NVARCHAR',
                                        name: 'NVarChar',
                                        hasCollation: true,
                                        dataLengthLength: 2,
                                        maximumLength: 4000,
                                        declaration: [Function: declaration],
                                        resolveLength: [Function: resolveLength],
                                        writeTypeInfo: [Function: writeTypeInfo],
                                        writeParameterData: [Function: writeParameterData],
                                        validate: [Function: validate] },
                                     colName: 'ORG_NM_ENG',
                                     collation: 
                                      { lcid: 1042,
                                        flags: 208,
                                        version: 0,
                                        sortId: 0,
                                        codepage: 'CP949' },
                                     precision: undefined,
                                     scale: undefined,
                                     udtInfo: undefined,
                                     dataLength: 800,
                                     tableName: undefined } ],
                                options: 
                                 { abortTransactionOnError: false,
                                   appName: 'node-mssql',
                                   camelCaseColumns: false,
                                   cancelTimeout: 5000,
                                   columnNameReplacer: undefined,
                                   connectionRetryInterval: 500,
                                   connectTimeout: 15000,
                                   connectionIsolationLevel: 2,
                                   cryptoCredentialsDetails: {},
                                   database: 'front2007',
                                   datefirst: 7,
                                   dateFormat: 'mdy',
                                   debug: { data: false, packet: false, payload: false, token: false },
                                   enableAnsiNull: true,
                                   enableAnsiNullDefault: true,
                                   enableAnsiPadding: true,
                                   enableAnsiWarnings: true,
                                   enableArithAbort: false,
                                   enableConcatNullYieldsNull: true,
                                   enableCursorCloseOnCommit: undefined,
                                   enableImplicitTransactions: false,
                                   enableNumericRoundabort: false,
                                   enableQuotedIdentifier: true,
                                   encrypt: false,
                                   fallbackToDefaultDb: false,
                                   instanceName: undefined,
                                   isolationLevel: 2,
                                   language: 'us_english',
                                   localAddress: undefined,
                                   maxRetriesOnTransientErrors: 3,
                                   multiSubnetFailover: false,
                                   packetSize: 4096,
                                   port: 1433,
                                   readOnlyIntent: false,
                                   requestTimeout: 15000,
                                   rowCollectionOnDone: false,
                                   rowCollectionOnRequestCompletion: false,
                                   tdsVersion: '7_4',
                                   textsize: '2147483647',
                                   trustServerCertificate: true,
                                   useColumnNames: false,
                                   useUTC: true },
                                endOfMessageMarker: {},
                                buffer: <Buffer 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 06 45 00 4d 00 50 00 5f ... >,
                                position: 1142,
                                suspended: false,
                                await: [Function],
                                next: undefined } },
                          inTransaction: false,
                          transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                          state: 
                           { name: 'LoggedIn',
                             events: { socketError: [Function: socketError] } },
                          connectTimer: 
                           Timeout {
                             '0': null,
                             _called: false,
                             _idleTimeout: -1,
                             _idlePrev: null,
                             _idleNext: null,
                             _idleStart: 32640,
                             _onTimeout: null,
                             _timerArgs: undefined,
                             _repeat: null },
                          curTransientRetryCount: 0,
                          transientErrorLookup: TransientErrorLookup {},
                          cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                          socket: 
                           Socket {
                             connecting: false,
                             _hadError: false,
                             _handle: 
                              TCP {
                                bytesRead: 1985,
                                _externalStream: {},
                                fd: -1,
                                reading: true,
                                owner: [Circular],
                                onread: [Function: onread],
                                onconnection: null,
                                writeQueueSize: 0 },
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: 
                                 ReadablePacketStream {
                                   _readableState: 
                                    ReadableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: null,
                                      pipesCount: 0,
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: false,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      defaultEncoding: 'utf8',
                                      ranOut: false,
                                      awaitDrain: 0,
                                      readingMore: false,
                                      decoder: null,
                                      encoding: null },
                                   readable: true,
                                   domain: null,
                                   _events: 
                                    { end: { [Function: g] listener: [Function: onend] },
                                      prefinish: { [Function: g] listener: [Function] },
                                      data: [Function],
                                      unpipe: [Function: onunpipe],
                                      drain: [Function],
                                      error: [Function: onerror],
                                      close: { [Function: g] listener: [Function: onclose] },
                                      finish: { [Function: g] listener: [Function: onfinish] } },
                                   _eventsCount: 8,
                                   _maxListeners: undefined,
                                   _writableState: 
                                    WritableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      decodeStrings: true,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function],
                                      writecb: null,
                                      writelen: 0,
                                      bufferedRequest: null,
                                      lastBufferedRequest: null,
                                      pendingcb: 0,
                                      prefinished: false,
                                      errorEmitted: false,
                                      bufferedRequestCount: 0,
                                      corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                   writable: true,
                                   allowHalfOpen: true,
                                   _transformState: 
                                    TransformState {
                                      afterTransform: [Function],
                                      needTransform: true,
                                      transforming: false,
                                      writecb: null,
                                      writechunk: null,
                                      writeencoding: 'buffer' },
                                   buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                                   position: 1150 },
                                pipesCount: 1,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: bound socketEnd],
                                   { [Function: g] listener: [Function: onend] } ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                error: [Function: bound socketError],
                                close: [Function: bound socketClose],
                                data: [Function: ondata] },
                             _eventsCount: 6,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: false,
                             destroyed: false,
                             _bytesDispatched: 1285,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: null,
                             _server: null,
                             read: [Function],
                             _consuming: true },
                          messageIo: 
                           MessageIO {
                             domain: null,
                             _events: 
                              { data: [Function],
                                message: [Function],
                                secure: [Function: bound emit] },
                             _eventsCount: 3,
                             _maxListeners: undefined,
                             socket: 
                              Socket {
                                connecting: false,
                                _hadError: false,
                                _handle: 
                                 TCP {
                                   bytesRead: 1985,
                                   _externalStream: {},
                                   fd: -1,
                                   reading: true,
                                   owner: [Circular],
                                   onread: [Function: onread],
                                   onconnection: null,
                                   writeQueueSize: 0 },
                                _parent: null,
                                _host: null,
                                _readableState: 
                                 ReadableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: 
                                    ReadablePacketStream {
                                      _readableState: 
                                       ReadableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         buffer: BufferList { head: null, tail: null, length: 0 },
                                         length: 0,
                                         pipes: null,
                                         pipesCount: 0,
                                         flowing: true,
                                         ended: false,
                                         endEmitted: false,
                                         reading: false,
                                         sync: false,
                                         needReadable: true,
                                         emittedReadable: false,
                                         readableListening: false,
                                         resumeScheduled: false,
                                         defaultEncoding: 'utf8',
                                         ranOut: false,
                                         awaitDrain: 0,
                                         readingMore: false,
                                         decoder: null,
                                         encoding: null },
                                      readable: true,
                                      domain: null,
                                      _events: 
                                       { end: { [Function: g] listener: [Function: onend] },
                                         prefinish: { [Function: g] listener: [Function] },
                                         data: [Function],
                                         unpipe: [Function: onunpipe],
                                         drain: [Function],
                                         error: [Function: onerror],
                                         close: { [Function: g] listener: [Function: onclose] },
                                         finish: { [Function: g] listener: [Function: onfinish] } },
                                      _eventsCount: 8,
                                      _maxListeners: undefined,
                                      _writableState: 
                                       WritableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         needDrain: false,
                                         ending: false,
                                         ended: false,
                                         finished: false,
                                         decodeStrings: true,
                                         defaultEncoding: 'utf8',
                                         length: 0,
                                         writing: false,
                                         corked: 0,
                                         sync: false,
                                         bufferProcessing: false,
                                         onwrite: [Function],
                                         writecb: null,
                                         writelen: 0,
                                         bufferedRequest: null,
                                         lastBufferedRequest: null,
                                         pendingcb: 0,
                                         prefinished: false,
                                         errorEmitted: false,
                                         bufferedRequestCount: 0,
                                         corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                      writable: true,
                                      allowHalfOpen: true,
                                      _transformState: 
                                       TransformState {
                                         afterTransform: [Function],
                                         needTransform: true,
                                         transforming: false,
                                         writecb: null,
                                         writechunk: null,
                                         writeencoding: 'buffer' },
                                      buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                                      position: 1150 },
                                   pipesCount: 1,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: true,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: 
                                    [ { [Function: g] listener: [Function: onend] },
                                      [Function: bound socketEnd],
                                      { [Function: g] listener: [Function: onend] } ],
                                   finish: [Function: onSocketFinish],
                                   _socketEnd: [Function: onSocketEnd],
                                   error: [Function: bound socketError],
                                   close: [Function: bound socketClose],
                                   data: [Function: ondata] },
                                _eventsCount: 6,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: false,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: false,
                                destroyed: false,
                                _bytesDispatched: 1285,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: null,
                                _server: null,
                                read: [Function],
                                _consuming: true },
                             _packetSize: 4096,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             sendPacket: [Function: bound sendPacket],
                             packetStream: 
                              ReadablePacketStream {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   unpipe: [Function: onunpipe],
                                   drain: [Function],
                                   error: [Function: onerror],
                                   close: { [Function: g] listener: [Function: onclose] },
                                   finish: { [Function: g] listener: [Function: onfinish] } },
                                _eventsCount: 8,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'buffer' },
                                buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                                position: 1150 },
                             packetDataSize: 4088 },
                          closed: false,
                          messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                          routingData: undefined,
                          loggedIn: true,
                          isSqlBatch: false,
                          request: undefined,
                          requestTimer: undefined,
                          resetConnectionOnNextRequest: false,
                          procReturnStatusValue: undefined },
                       state: 'IDLE' } },
                 length: 1 },
              _direction: 'next',
              _startPosition: 'head',
              _started: true,
              _cursor: 
               { prev: null,
                 next: null,
                 data: 
                  PooledResource {
                    creationTime: 1524290962570,
                    lastReturnTime: 1524290962586,
                    lastBorrowTime: 1524290962570,
                    lastIdleTime: 1524290962586,
                    obj: 
                     Connection {
                       domain: null,
                       _events: { error: [ [Function] ] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       config: 
                        { server: 'DIOPRDB01',
                          userName: 'usrCERND',
                          password: 'usrIMSI^0730CERND',
                          domain: undefined,
                          securityPackage: undefined,
                          options: 
                           { abortTransactionOnError: false,
                             appName: 'node-mssql',
                             camelCaseColumns: false,
                             cancelTimeout: 5000,
                             columnNameReplacer: undefined,
                             connectionRetryInterval: 500,
                             connectTimeout: 15000,
                             connectionIsolationLevel: 2,
                             cryptoCredentialsDetails: {},
                             database: 'front2007',
                             datefirst: 7,
                             dateFormat: 'mdy',
                             debug: { data: false, packet: false, payload: false, token: false },
                             enableAnsiNull: true,
                             enableAnsiNullDefault: true,
                             enableAnsiPadding: true,
                             enableAnsiWarnings: true,
                             enableArithAbort: false,
                             enableConcatNullYieldsNull: true,
                             enableCursorCloseOnCommit: undefined,
                             enableImplicitTransactions: false,
                             enableNumericRoundabort: false,
                             enableQuotedIdentifier: true,
                             encrypt: false,
                             fallbackToDefaultDb: false,
                             instanceName: undefined,
                             isolationLevel: 2,
                             language: 'us_english',
                             localAddress: undefined,
                             maxRetriesOnTransientErrors: 3,
                             multiSubnetFailover: false,
                             packetSize: 4096,
                             port: 1433,
                             readOnlyIntent: false,
                             requestTimeout: 15000,
                             rowCollectionOnDone: false,
                             rowCollectionOnRequestCompletion: false,
                             tdsVersion: '7_4',
                             textsize: '2147483647',
                             trustServerCertificate: true,
                             useColumnNames: false,
                             useUTC: true } },
                       reset: [Function: bound reset],
                       socketClose: [Function: bound socketClose],
                       socketEnd: [Function: bound socketEnd],
                       socketConnect: [Function: bound socketConnect],
                       socketError: [Function: bound socketError],
                       requestTimeout: [Function: bound requestTimeout],
                       connectTimeout: [Function: bound connectTimeout],
                       retryTimeout: [Function: bound retryTimeout],
                       debug: 
                        Debug {
                          domain: null,
                          _events: { debug: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          options: { data: false, packet: false, payload: false, token: false },
                          indent: '  ' },
                       tokenStreamParser: 
                        Parser {
                          domain: null,
                          _events: 
                           { infoMessage: [Function],
                             sspichallenge: [Function],
                             errorMessage: [Function],
                             databaseChange: [Function],
                             languageChange: [Function],
                             charsetChange: [Function],
                             loginack: [Function],
                             routingChange: [Function],
                             packetSizeChange: [Function],
                             beginTransaction: [Function],
                             commitTransaction: [Function],
                             rollbackTransaction: [Function],
                             columnMetadata: [Function],
                             order: [Function],
                             row: [Function],
                             returnStatus: [Function],
                             returnValue: [Function],
                             doneProc: [Function],
                             doneInProc: [Function],
                             done: [Function],
                             endOfMessage: [Function],
                             resetConnection: [Function],
                             tokenStreamError: [Function],
                             drain: [Function] },
                          _eventsCount: 24,
                          _maxListeners: undefined,
                          debug: 
                           Debug {
                             domain: null,
                             _events: { debug: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             options: { data: false, packet: false, payload: false, token: false },
                             indent: '  ' },
                          colMetadata: undefined,
                          options: 
                           { abortTransactionOnError: false,
                             appName: 'node-mssql',
                             camelCaseColumns: false,
                             cancelTimeout: 5000,
                             columnNameReplacer: undefined,
                             connectionRetryInterval: 500,
                             connectTimeout: 15000,
                             connectionIsolationLevel: 2,
                             cryptoCredentialsDetails: {},
                             database: 'front2007',
                             datefirst: 7,
                             dateFormat: 'mdy',
                             debug: { data: false, packet: false, payload: false, token: false },
                             enableAnsiNull: true,
                             enableAnsiNullDefault: true,
                             enableAnsiPadding: true,
                             enableAnsiWarnings: true,
                             enableArithAbort: false,
                             enableConcatNullYieldsNull: true,
                             enableCursorCloseOnCommit: undefined,
                             enableImplicitTransactions: false,
                             enableNumericRoundabort: false,
                             enableQuotedIdentifier: true,
                             encrypt: false,
                             fallbackToDefaultDb: false,
                             instanceName: undefined,
                             isolationLevel: 2,
                             language: 'us_english',
                             localAddress: undefined,
                             maxRetriesOnTransientErrors: 3,
                             multiSubnetFailover: false,
                             packetSize: 4096,
                             port: 1433,
                             readOnlyIntent: false,
                             requestTimeout: 15000,
                             rowCollectionOnDone: false,
                             rowCollectionOnRequestCompletion: false,
                             tdsVersion: '7_4',
                             textsize: '2147483647',
                             trustServerCertificate: true,
                             useColumnNames: false,
                             useUTC: true },
                          parser: 
                           Parser {
                             _readableState: 
                              ReadableState {
                                objectMode: true,
                                highWaterMark: 16,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: null,
                                pipesCount: 0,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: false,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: { [Function: g] listener: [Function: onend] },
                                prefinish: { [Function: g] listener: [Function] },
                                data: [Function],
                                drain: [Function] },
                             _eventsCount: 4,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: true,
                                highWaterMark: 16,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: true,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: true,
                             _transformState: 
                              TransformState {
                                afterTransform: [Function],
                                needTransform: true,
                                transforming: false,
                                writecb: null,
                                writechunk: null,
                                writeencoding: 'utf8' },
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             colMetadata: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true },
                             endOfMessageMarker: {},
                             buffer: <Buffer aa 9a 00 c3 00 00 00 0a 0f 35 00 27 00 76 00 65 00 72 00 73 00 69 00 6f 00 6e 00 27 00 20 00 69 00 73 00 20 00 6e 00 6f 00 74 00 20 00 61 00 20 00 72 ... >,
                             position: 175,
                             suspended: false,
                             await: [Function],
                             next: undefined } },
                       inTransaction: false,
                       transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                       state: 
                        { name: 'Final',
                          enter: [Function: enter],
                          events: 
                           { loginFailed: [Function: loginFailed],
                             connectTimeout: [Function: connectTimeout],
                             message: [Function: message],
                             socketError: [Function: socketError] } },
                       connectTimer: 
                        Timeout {
                          '0': null,
                          _called: false,
                          _idleTimeout: -1,
                          _idlePrev: null,
                          _idleNext: null,
                          _idleStart: 25783,
                          _onTimeout: null,
                          _timerArgs: undefined,
                          _repeat: null },
                       curTransientRetryCount: 0,
                       transientErrorLookup: TransientErrorLookup {},
                       cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                       socket: 
                        Socket {
                          connecting: false,
                          _hadError: false,
                          _handle: null,
                          _parent: null,
                          _host: null,
                          _readableState: 
                           ReadableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             buffer: BufferList { head: null, tail: null, length: 0 },
                             length: 0,
                             pipes: 
                              ReadablePacketStream {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   unpipe: [Function: onunpipe],
                                   drain: [Function],
                                   error: [Function: onerror],
                                   close: { [Function: g] listener: [Function: onclose] },
                                   finish: { [Function: g] listener: [Function: onfinish] } },
                                _eventsCount: 8,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'buffer' },
                                buffer: <Buffer 04 01 00 b7 00 f7 01 00 aa 9a 00 c3 00 00 00 0a 0f 35 00 27 00 76 00 65 00 72 00 73 00 69 00 6f 00 6e 00 27 00 20 00 69 00 73 00 20 00 6e 00 6f 00 74 ... >,
                                position: 183 },
                             pipesCount: 1,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: true,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: false,
                          domain: null,
                          _events: 
                           { end: 
                              [ { [Function: g] listener: [Function: onend] },
                                [Function: bound socketEnd],
                                { [Function: g] listener: [Function: onend] } ],
                             finish: [Function: onSocketFinish],
                             _socketEnd: [Function: onSocketEnd],
                             error: [Function: bound socketError],
                             close: [Function: bound socketClose],
                             data: [Function: ondata] },
                          _eventsCount: 6,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: false,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 0,
                             prefinished: false,
                             errorEmitted: false,
                             bufferedRequestCount: 0,
                             corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                          writable: false,
                          allowHalfOpen: false,
                          destroyed: true,
                          _bytesDispatched: 1219,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: null,
                          _server: null,
                          read: [Function],
                          _consuming: true,
                          _idleNext: null,
                          _idlePrev: null,
                          _idleTimeout: -1 },
                       messageIo: 
                        MessageIO {
                          domain: null,
                          _events: 
                           { data: [Function],
                             message: [Function],
                             secure: [Function: bound emit] },
                          _eventsCount: 3,
                          _maxListeners: undefined,
                          socket: 
                           Socket {
                             connecting: false,
                             _hadError: false,
                             _handle: null,
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: 
                                 ReadablePacketStream {
                                   _readableState: 
                                    ReadableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: null,
                                      pipesCount: 0,
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: false,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      defaultEncoding: 'utf8',
                                      ranOut: false,
                                      awaitDrain: 0,
                                      readingMore: false,
                                      decoder: null,
                                      encoding: null },
                                   readable: true,
                                   domain: null,
                                   _events: 
                                    { end: { [Function: g] listener: [Function: onend] },
                                      prefinish: { [Function: g] listener: [Function] },
                                      data: [Function],
                                      unpipe: [Function: onunpipe],
                                      drain: [Function],
                                      error: [Function: onerror],
                                      close: { [Function: g] listener: [Function: onclose] },
                                      finish: { [Function: g] listener: [Function: onfinish] } },
                                   _eventsCount: 8,
                                   _maxListeners: undefined,
                                   _writableState: 
                                    WritableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      decodeStrings: true,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function],
                                      writecb: null,
                                      writelen: 0,
                                      bufferedRequest: null,
                                      lastBufferedRequest: null,
                                      pendingcb: 0,
                                      prefinished: false,
                                      errorEmitted: false,
                                      bufferedRequestCount: 0,
                                      corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                   writable: true,
                                   allowHalfOpen: true,
                                   _transformState: 
                                    TransformState {
                                      afterTransform: [Function],
                                      needTransform: true,
                                      transforming: false,
                                      writecb: null,
                                      writechunk: null,
                                      writeencoding: 'buffer' },
                                   buffer: <Buffer 04 01 00 b7 00 f7 01 00 aa 9a 00 c3 00 00 00 0a 0f 35 00 27 00 76 00 65 00 72 00 73 00 69 00 6f 00 6e 00 27 00 20 00 69 00 73 00 20 00 6e 00 6f 00 74 ... >,
                                   position: 183 },
                                pipesCount: 1,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: false,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: bound socketEnd],
                                   { [Function: g] listener: [Function: onend] } ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                error: [Function: bound socketError],
                                close: [Function: bound socketClose],
                                data: [Function: ondata] },
                             _eventsCount: 6,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: false,
                             allowHalfOpen: false,
                             destroyed: true,
                             _bytesDispatched: 1219,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: null,
                             _server: null,
                             read: [Function],
                             _consuming: true,
                             _idleNext: null,
                             _idlePrev: null,
                             _idleTimeout: -1 },
                          _packetSize: 4096,
                          debug: 
                           Debug {
                             domain: null,
                             _events: { debug: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             options: { data: false, packet: false, payload: false, token: false },
                             indent: '  ' },
                          sendPacket: [Function: bound sendPacket],
                          packetStream: 
                           ReadablePacketStream {
                             _readableState: 
                              ReadableState {
                                objectMode: true,
                                highWaterMark: 16,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: null,
                                pipesCount: 0,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: false,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: { [Function: g] listener: [Function: onend] },
                                prefinish: { [Function: g] listener: [Function] },
                                data: [Function],
                                unpipe: [Function: onunpipe],
                                drain: [Function],
                                error: [Function: onerror],
                                close: { [Function: g] listener: [Function: onclose] },
                                finish: { [Function: g] listener: [Function: onfinish] } },
                             _eventsCount: 8,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: true,
                                highWaterMark: 16,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: true,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: true,
                             _transformState: 
                              TransformState {
                                afterTransform: [Function],
                                needTransform: true,
                                transforming: false,
                                writecb: null,
                                writechunk: null,
                                writeencoding: 'buffer' },
                             buffer: <Buffer 04 01 00 b7 00 f7 01 00 aa 9a 00 c3 00 00 00 0a 0f 35 00 27 00 76 00 65 00 72 00 73 00 69 00 6f 00 6e 00 27 00 20 00 69 00 73 00 20 00 6e 00 6f 00 74 ... >,
                             position: 183 },
                          packetDataSize: 4088 },
                       closed: true,
                       messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                       routingData: undefined,
                       loggedIn: false,
                       isSqlBatch: false,
                       request: undefined,
                       requestTimer: undefined,
                       resetConnectionOnNextRequest: false,
                       procReturnStatusValue: undefined,
                       loginError: null },
                    state: 'INVALID' } },
              _done: false },
           _evictor: DefaultEvictor {},
           _scheduledEviction: 
            Timeout {
              _called: false,
              _idleTimeout: 1000,
              _idlePrev: 
               TimersList {
                 _idleNext: [Circular],
                 _idlePrev: [Circular],
                 _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
                 _unrefed: false,
                 msecs: 1000 },
              _idleNext: 
               TimersList {
                 _idleNext: [Circular],
                 _idlePrev: [Circular],
                 _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
                 _unrefed: false,
                 msecs: 1000 },
              _idleStart: 32067,
              _onTimeout: [Function],
              _timerArgs: undefined,
              _repeat: null } } },
     parameters: {},
     rowsAffected: 0,
     _cancel: null },
  results: 
   { recordsets: 
      [ [ { BUKRS: '77000000',
            EMP_NO: 'i0198101',
            BUTXT: '인프라코어',
            DEP_BG_CODE: 'null',
            DEP_BG_NAME: 'null',
            DEP_CODE: '77010010',
            DEP_NAME: '전략&Digital혁신 IT기획팀 R&D IT Part',
            EMP_NAME: '박명진',
            EMP_NM_ENG: 'Park Myoungjin',
            EMP_STAT: '재직',
            ENT_DATE: 'null',
            RET_DATE: '',
            RSPT_NAME: '',
            DEP_HEAD: 'N',
            POS_NAME: '차장',
            TELF1: '032-211-8063',
            TELF3: '010-2761-2838',
            TELF2: '',
            SMTP_ADDR: 'changho1.kang@doosan.com',
            ADACCOUNT: 'i0198101',
            CPUDT: '2018-03-17 01:42:24.0',
            COM_ORG_ID: 'null',
            ORG_NM_ENG: 'null' } ] ],
     recordset: 
      [ { BUKRS: '77000000',
          EMP_NO: 'i0198101',
          BUTXT: '인프라코어',
          DEP_BG_CODE: 'null',
          DEP_BG_NAME: 'null',
          DEP_CODE: '77010010',
          DEP_NAME: '전략&Digital혁신 IT기획팀 R&D IT Part',
          EMP_NAME: '박명진',
          EMP_NM_ENG: 'Park Myoungjin',
          EMP_STAT: '재직',
          ENT_DATE: 'null',
          RET_DATE: '',
          RSPT_NAME: '',
          DEP_HEAD: 'N',
          POS_NAME: '차장',
          TELF1: '032-211-8063',
          TELF3: '010-2761-2838',
          TELF2: '',
          SMTP_ADDR: 'changho1.kang@doosan.com',
          ADACCOUNT: 'i0198101',
          CPUDT: '2018-03-17 01:42:24.0',
          COM_ORG_ID: 'null',
          ORG_NM_ENG: 'null' } ],
     output: {},
     rowsAffected: [ 1 ] },
  rowsAffacted: undefined } 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:09:38.538Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:09:38.540Z] REQUEST PATH : /getData 
[DEBUG] - [\application\controllers\controller_db.js : 39 | ANONYMOUS_FUNC - 2018-04-21T06:09:38.635Z] { connection: 
   Request {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     canceled: false,
     parent: 
      ConnectionPool {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        config: 
         { user: 'usrCERND',
           password: 'usrIMSI^0730CERND',
           server: 'DIOPRDB01',
           database: 'front2007',
           port: 1433,
           options: {},
           stream: false,
           parseJSON: false },
        _connected: true,
        _connecting: false,
        pool: 
         Pool {
           domain: null,
           _events: 
            { factoryCreateError: [Function: bound emit],
              factoryDestroyError: [Function: bound emit] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _config: 
            PoolOptions {
              fifo: true,
              priorityRange: 1,
              testOnBorrow: true,
              testOnReturn: false,
              autostart: true,
              acquireTimeoutMillis: 15000,
              max: 10,
              min: 0,
              evictionRunIntervalMillis: 1000,
              numTestsPerEvictionRun: 3,
              softIdleTimeoutMillis: -1,
              idleTimeoutMillis: 30000,
              Promise: [Function: Promise] },
           _Promise: [Function: Promise],
           _factory: 
            { create: [Function: bound _poolCreate],
              validate: [Function: bound _poolValidate],
              destroy: [Function: bound _poolDestroy] },
           _draining: false,
           _started: true,
           _waitingClientsQueue: 
            PriorityQueue {
              _size: 1,
              _slots: 
               [ Queue {
                   _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
           _factoryCreateOperations: Set {},
           _factoryDestroyOperations: Set {},
           _availableObjects: 
            Deque {
              _list: 
               DoublyLinkedList {
                 head: 
                  { prev: null,
                    next: null,
                    data: 
                     PooledResource {
                       creationTime: 1524290978623,
                       lastReturnTime: 1524290978635,
                       lastBorrowTime: 1524290978624,
                       lastIdleTime: 1524290978635,
                       obj: 
                        Connection {
                          domain: null,
                          _events: { error: [ [Function] ] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          config: 
                           { server: 'DIOPRDB01',
                             userName: 'usrCERND',
                             password: 'usrIMSI^0730CERND',
                             domain: undefined,
                             securityPackage: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true } },
                          reset: [Function: bound reset],
                          socketClose: [Function: bound socketClose],
                          socketEnd: [Function: bound socketEnd],
                          socketConnect: [Function: bound socketConnect],
                          socketError: [Function: bound socketError],
                          requestTimeout: [Function: bound requestTimeout],
                          connectTimeout: [Function: bound connectTimeout],
                          retryTimeout: [Function: bound retryTimeout],
                          debug: 
                           Debug {
                             domain: null,
                             _events: { debug: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             options: { data: false, packet: false, payload: false, token: false },
                             indent: '  ' },
                          tokenStreamParser: 
                           Parser {
                             domain: null,
                             _events: 
                              { infoMessage: [Function],
                                sspichallenge: [Function],
                                errorMessage: [Function],
                                databaseChange: [Function],
                                languageChange: [Function],
                                charsetChange: [Function],
                                loginack: [Function],
                                routingChange: [Function],
                                packetSizeChange: [Function],
                                beginTransaction: [Function],
                                commitTransaction: [Function],
                                rollbackTransaction: [Function],
                                columnMetadata: [Function],
                                order: [Function],
                                row: [Function],
                                returnStatus: [Function],
                                returnValue: [Function],
                                doneProc: [Function],
                                doneInProc: [Function],
                                done: [Function],
                                endOfMessage: [Function],
                                resetConnection: [Function],
                                tokenStreamError: [Function],
                                drain: [Function] },
                             _eventsCount: 24,
                             _maxListeners: undefined,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             colMetadata: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true },
                             parser: 
                              Parser {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   drain: [Function] },
                                _eventsCount: 4,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'utf8' },
                                debug: 
                                 Debug {
                                   domain: null,
                                   _events: { debug: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   options: { data: false, packet: false, payload: false, token: false },
                                   indent: '  ' },
                                colMetadata: undefined,
                                options: 
                                 { abortTransactionOnError: false,
                                   appName: 'node-mssql',
                                   camelCaseColumns: false,
                                   cancelTimeout: 5000,
                                   columnNameReplacer: undefined,
                                   connectionRetryInterval: 500,
                                   connectTimeout: 15000,
                                   connectionIsolationLevel: 2,
                                   cryptoCredentialsDetails: {},
                                   database: 'front2007',
                                   datefirst: 7,
                                   dateFormat: 'mdy',
                                   debug: { data: false, packet: false, payload: false, token: false },
                                   enableAnsiNull: true,
                                   enableAnsiNullDefault: true,
                                   enableAnsiPadding: true,
                                   enableAnsiWarnings: true,
                                   enableArithAbort: false,
                                   enableConcatNullYieldsNull: true,
                                   enableCursorCloseOnCommit: undefined,
                                   enableImplicitTransactions: false,
                                   enableNumericRoundabort: false,
                                   enableQuotedIdentifier: true,
                                   encrypt: false,
                                   fallbackToDefaultDb: false,
                                   instanceName: undefined,
                                   isolationLevel: 2,
                                   language: 'us_english',
                                   localAddress: undefined,
                                   maxRetriesOnTransientErrors: 3,
                                   multiSubnetFailover: false,
                                   packetSize: 4096,
                                   port: 1433,
                                   readOnlyIntent: false,
                                   requestTimeout: 15000,
                                   rowCollectionOnDone: false,
                                   rowCollectionOnRequestCompletion: false,
                                   tdsVersion: '7_4',
                                   textsize: '2147483647',
                                   trustServerCertificate: true,
                                   useColumnNames: false,
                                   useUTC: true },
                                endOfMessageMarker: {},
                                buffer: <Buffer ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                position: 31,
                                suspended: false,
                                await: [Function],
                                next: undefined } },
                          inTransaction: false,
                          transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                          state: 
                           { name: 'LoggedIn',
                             events: { socketError: [Function: socketError] } },
                          connectTimer: 
                           Timeout {
                             '0': null,
                             _called: false,
                             _idleTimeout: -1,
                             _idlePrev: null,
                             _idleNext: null,
                             _idleStart: 41793,
                             _onTimeout: null,
                             _timerArgs: undefined,
                             _repeat: null },
                          curTransientRetryCount: 0,
                          transientErrorLookup: TransientErrorLookup {},
                          cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                          socket: 
                           Socket {
                             connecting: false,
                             _hadError: false,
                             _handle: 
                              TCP {
                                bytesRead: 874,
                                _externalStream: {},
                                fd: -1,
                                reading: true,
                                owner: [Circular],
                                onread: [Function: onread],
                                onconnection: null,
                                writeQueueSize: 0 },
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: 
                                 ReadablePacketStream {
                                   _readableState: 
                                    ReadableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: null,
                                      pipesCount: 0,
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: false,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      defaultEncoding: 'utf8',
                                      ranOut: false,
                                      awaitDrain: 0,
                                      readingMore: false,
                                      decoder: null,
                                      encoding: null },
                                   readable: true,
                                   domain: null,
                                   _events: 
                                    { end: { [Function: g] listener: [Function: onend] },
                                      prefinish: { [Function: g] listener: [Function] },
                                      data: [Function],
                                      unpipe: [Function: onunpipe],
                                      drain: [Function],
                                      error: [Function: onerror],
                                      close: { [Function: g] listener: [Function: onclose] },
                                      finish: { [Function: g] listener: [Function: onfinish] } },
                                   _eventsCount: 8,
                                   _maxListeners: undefined,
                                   _writableState: 
                                    WritableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      decodeStrings: true,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function],
                                      writecb: null,
                                      writelen: 0,
                                      bufferedRequest: null,
                                      lastBufferedRequest: null,
                                      pendingcb: 0,
                                      prefinished: false,
                                      errorEmitted: false,
                                      bufferedRequestCount: 0,
                                      corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                   writable: true,
                                   allowHalfOpen: true,
                                   _transformState: 
                                    TransformState {
                                      afterTransform: [Function],
                                      needTransform: true,
                                      transforming: false,
                                      writecb: null,
                                      writechunk: null,
                                      writeencoding: 'buffer' },
                                   buffer: <Buffer 04 01 00 27 00 e4 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                   position: 39 },
                                pipesCount: 1,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: bound socketEnd],
                                   { [Function: g] listener: [Function: onend] } ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                error: [Function: bound socketError],
                                close: [Function: bound socketClose],
                                data: [Function: ondata] },
                             _eventsCount: 6,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: false,
                             destroyed: false,
                             _bytesDispatched: 1313,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: null,
                             _server: null,
                             read: [Function],
                             _consuming: true },
                          messageIo: 
                           MessageIO {
                             domain: null,
                             _events: 
                              { data: [Function],
                                message: [Function],
                                secure: [Function: bound emit] },
                             _eventsCount: 3,
                             _maxListeners: undefined,
                             socket: 
                              Socket {
                                connecting: false,
                                _hadError: false,
                                _handle: 
                                 TCP {
                                   bytesRead: 874,
                                   _externalStream: {},
                                   fd: -1,
                                   reading: true,
                                   owner: [Circular],
                                   onread: [Function: onread],
                                   onconnection: null,
                                   writeQueueSize: 0 },
                                _parent: null,
                                _host: null,
                                _readableState: 
                                 ReadableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: 
                                    ReadablePacketStream {
                                      _readableState: 
                                       ReadableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         buffer: BufferList { head: null, tail: null, length: 0 },
                                         length: 0,
                                         pipes: null,
                                         pipesCount: 0,
                                         flowing: true,
                                         ended: false,
                                         endEmitted: false,
                                         reading: false,
                                         sync: false,
                                         needReadable: true,
                                         emittedReadable: false,
                                         readableListening: false,
                                         resumeScheduled: false,
                                         defaultEncoding: 'utf8',
                                         ranOut: false,
                                         awaitDrain: 0,
                                         readingMore: false,
                                         decoder: null,
                                         encoding: null },
                                      readable: true,
                                      domain: null,
                                      _events: 
                                       { end: { [Function: g] listener: [Function: onend] },
                                         prefinish: { [Function: g] listener: [Function] },
                                         data: [Function],
                                         unpipe: [Function: onunpipe],
                                         drain: [Function],
                                         error: [Function: onerror],
                                         close: { [Function: g] listener: [Function: onclose] },
                                         finish: { [Function: g] listener: [Function: onfinish] } },
                                      _eventsCount: 8,
                                      _maxListeners: undefined,
                                      _writableState: 
                                       WritableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         needDrain: false,
                                         ending: false,
                                         ended: false,
                                         finished: false,
                                         decodeStrings: true,
                                         defaultEncoding: 'utf8',
                                         length: 0,
                                         writing: false,
                                         corked: 0,
                                         sync: false,
                                         bufferProcessing: false,
                                         onwrite: [Function],
                                         writecb: null,
                                         writelen: 0,
                                         bufferedRequest: null,
                                         lastBufferedRequest: null,
                                         pendingcb: 0,
                                         prefinished: false,
                                         errorEmitted: false,
                                         bufferedRequestCount: 0,
                                         corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                      writable: true,
                                      allowHalfOpen: true,
                                      _transformState: 
                                       TransformState {
                                         afterTransform: [Function],
                                         needTransform: true,
                                         transforming: false,
                                         writecb: null,
                                         writechunk: null,
                                         writeencoding: 'buffer' },
                                      buffer: <Buffer 04 01 00 27 00 e4 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                      position: 39 },
                                   pipesCount: 1,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: true,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: 
                                    [ { [Function: g] listener: [Function: onend] },
                                      [Function: bound socketEnd],
                                      { [Function: g] listener: [Function: onend] } ],
                                   finish: [Function: onSocketFinish],
                                   _socketEnd: [Function: onSocketEnd],
                                   error: [Function: bound socketError],
                                   close: [Function: bound socketClose],
                                   data: [Function: ondata] },
                                _eventsCount: 6,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: false,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: false,
                                destroyed: false,
                                _bytesDispatched: 1313,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: null,
                                _server: null,
                                read: [Function],
                                _consuming: true },
                             _packetSize: 4096,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             sendPacket: [Function: bound sendPacket],
                             packetStream: 
                              ReadablePacketStream {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   unpipe: [Function: onunpipe],
                                   drain: [Function],
                                   error: [Function: onerror],
                                   close: { [Function: g] listener: [Function: onclose] },
                                   finish: { [Function: g] listener: [Function: onfinish] } },
                                _eventsCount: 8,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'buffer' },
                                buffer: <Buffer 04 01 00 27 00 e4 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                position: 39 },
                             packetDataSize: 4088 },
                          closed: false,
                          messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                          routingData: undefined,
                          loggedIn: true,
                          isSqlBatch: false,
                          request: undefined,
                          requestTimer: undefined,
                          resetConnectionOnNextRequest: false,
                          procReturnStatusValue: undefined },
                       state: 'IDLE' } },
                 tail: 
                  { prev: null,
                    next: null,
                    data: 
                     PooledResource {
                       creationTime: 1524290978623,
                       lastReturnTime: 1524290978635,
                       lastBorrowTime: 1524290978624,
                       lastIdleTime: 1524290978635,
                       obj: 
                        Connection {
                          domain: null,
                          _events: { error: [ [Function] ] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          config: 
                           { server: 'DIOPRDB01',
                             userName: 'usrCERND',
                             password: 'usrIMSI^0730CERND',
                             domain: undefined,
                             securityPackage: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true } },
                          reset: [Function: bound reset],
                          socketClose: [Function: bound socketClose],
                          socketEnd: [Function: bound socketEnd],
                          socketConnect: [Function: bound socketConnect],
                          socketError: [Function: bound socketError],
                          requestTimeout: [Function: bound requestTimeout],
                          connectTimeout: [Function: bound connectTimeout],
                          retryTimeout: [Function: bound retryTimeout],
                          debug: 
                           Debug {
                             domain: null,
                             _events: { debug: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             options: { data: false, packet: false, payload: false, token: false },
                             indent: '  ' },
                          tokenStreamParser: 
                           Parser {
                             domain: null,
                             _events: 
                              { infoMessage: [Function],
                                sspichallenge: [Function],
                                errorMessage: [Function],
                                databaseChange: [Function],
                                languageChange: [Function],
                                charsetChange: [Function],
                                loginack: [Function],
                                routingChange: [Function],
                                packetSizeChange: [Function],
                                beginTransaction: [Function],
                                commitTransaction: [Function],
                                rollbackTransaction: [Function],
                                columnMetadata: [Function],
                                order: [Function],
                                row: [Function],
                                returnStatus: [Function],
                                returnValue: [Function],
                                doneProc: [Function],
                                doneInProc: [Function],
                                done: [Function],
                                endOfMessage: [Function],
                                resetConnection: [Function],
                                tokenStreamError: [Function],
                                drain: [Function] },
                             _eventsCount: 24,
                             _maxListeners: undefined,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             colMetadata: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true },
                             parser: 
                              Parser {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   drain: [Function] },
                                _eventsCount: 4,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'utf8' },
                                debug: 
                                 Debug {
                                   domain: null,
                                   _events: { debug: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   options: { data: false, packet: false, payload: false, token: false },
                                   indent: '  ' },
                                colMetadata: undefined,
                                options: 
                                 { abortTransactionOnError: false,
                                   appName: 'node-mssql',
                                   camelCaseColumns: false,
                                   cancelTimeout: 5000,
                                   columnNameReplacer: undefined,
                                   connectionRetryInterval: 500,
                                   connectTimeout: 15000,
                                   connectionIsolationLevel: 2,
                                   cryptoCredentialsDetails: {},
                                   database: 'front2007',
                                   datefirst: 7,
                                   dateFormat: 'mdy',
                                   debug: { data: false, packet: false, payload: false, token: false },
                                   enableAnsiNull: true,
                                   enableAnsiNullDefault: true,
                                   enableAnsiPadding: true,
                                   enableAnsiWarnings: true,
                                   enableArithAbort: false,
                                   enableConcatNullYieldsNull: true,
                                   enableCursorCloseOnCommit: undefined,
                                   enableImplicitTransactions: false,
                                   enableNumericRoundabort: false,
                                   enableQuotedIdentifier: true,
                                   encrypt: false,
                                   fallbackToDefaultDb: false,
                                   instanceName: undefined,
                                   isolationLevel: 2,
                                   language: 'us_english',
                                   localAddress: undefined,
                                   maxRetriesOnTransientErrors: 3,
                                   multiSubnetFailover: false,
                                   packetSize: 4096,
                                   port: 1433,
                                   readOnlyIntent: false,
                                   requestTimeout: 15000,
                                   rowCollectionOnDone: false,
                                   rowCollectionOnRequestCompletion: false,
                                   tdsVersion: '7_4',
                                   textsize: '2147483647',
                                   trustServerCertificate: true,
                                   useColumnNames: false,
                                   useUTC: true },
                                endOfMessageMarker: {},
                                buffer: <Buffer ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                position: 31,
                                suspended: false,
                                await: [Function],
                                next: undefined } },
                          inTransaction: false,
                          transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                          state: 
                           { name: 'LoggedIn',
                             events: { socketError: [Function: socketError] } },
                          connectTimer: 
                           Timeout {
                             '0': null,
                             _called: false,
                             _idleTimeout: -1,
                             _idlePrev: null,
                             _idleNext: null,
                             _idleStart: 41793,
                             _onTimeout: null,
                             _timerArgs: undefined,
                             _repeat: null },
                          curTransientRetryCount: 0,
                          transientErrorLookup: TransientErrorLookup {},
                          cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                          socket: 
                           Socket {
                             connecting: false,
                             _hadError: false,
                             _handle: 
                              TCP {
                                bytesRead: 874,
                                _externalStream: {},
                                fd: -1,
                                reading: true,
                                owner: [Circular],
                                onread: [Function: onread],
                                onconnection: null,
                                writeQueueSize: 0 },
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: 
                                 ReadablePacketStream {
                                   _readableState: 
                                    ReadableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: null,
                                      pipesCount: 0,
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: false,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      defaultEncoding: 'utf8',
                                      ranOut: false,
                                      awaitDrain: 0,
                                      readingMore: false,
                                      decoder: null,
                                      encoding: null },
                                   readable: true,
                                   domain: null,
                                   _events: 
                                    { end: { [Function: g] listener: [Function: onend] },
                                      prefinish: { [Function: g] listener: [Function] },
                                      data: [Function],
                                      unpipe: [Function: onunpipe],
                                      drain: [Function],
                                      error: [Function: onerror],
                                      close: { [Function: g] listener: [Function: onclose] },
                                      finish: { [Function: g] listener: [Function: onfinish] } },
                                   _eventsCount: 8,
                                   _maxListeners: undefined,
                                   _writableState: 
                                    WritableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      decodeStrings: true,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function],
                                      writecb: null,
                                      writelen: 0,
                                      bufferedRequest: null,
                                      lastBufferedRequest: null,
                                      pendingcb: 0,
                                      prefinished: false,
                                      errorEmitted: false,
                                      bufferedRequestCount: 0,
                                      corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                   writable: true,
                                   allowHalfOpen: true,
                                   _transformState: 
                                    TransformState {
                                      afterTransform: [Function],
                                      needTransform: true,
                                      transforming: false,
                                      writecb: null,
                                      writechunk: null,
                                      writeencoding: 'buffer' },
                                   buffer: <Buffer 04 01 00 27 00 e4 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                   position: 39 },
                                pipesCount: 1,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: bound socketEnd],
                                   { [Function: g] listener: [Function: onend] } ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                error: [Function: bound socketError],
                                close: [Function: bound socketClose],
                                data: [Function: ondata] },
                             _eventsCount: 6,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: false,
                             destroyed: false,
                             _bytesDispatched: 1313,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: null,
                             _server: null,
                             read: [Function],
                             _consuming: true },
                          messageIo: 
                           MessageIO {
                             domain: null,
                             _events: 
                              { data: [Function],
                                message: [Function],
                                secure: [Function: bound emit] },
                             _eventsCount: 3,
                             _maxListeners: undefined,
                             socket: 
                              Socket {
                                connecting: false,
                                _hadError: false,
                                _handle: 
                                 TCP {
                                   bytesRead: 874,
                                   _externalStream: {},
                                   fd: -1,
                                   reading: true,
                                   owner: [Circular],
                                   onread: [Function: onread],
                                   onconnection: null,
                                   writeQueueSize: 0 },
                                _parent: null,
                                _host: null,
                                _readableState: 
                                 ReadableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: 
                                    ReadablePacketStream {
                                      _readableState: 
                                       ReadableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         buffer: BufferList { head: null, tail: null, length: 0 },
                                         length: 0,
                                         pipes: null,
                                         pipesCount: 0,
                                         flowing: true,
                                         ended: false,
                                         endEmitted: false,
                                         reading: false,
                                         sync: false,
                                         needReadable: true,
                                         emittedReadable: false,
                                         readableListening: false,
                                         resumeScheduled: false,
                                         defaultEncoding: 'utf8',
                                         ranOut: false,
                                         awaitDrain: 0,
                                         readingMore: false,
                                         decoder: null,
                                         encoding: null },
                                      readable: true,
                                      domain: null,
                                      _events: 
                                       { end: { [Function: g] listener: [Function: onend] },
                                         prefinish: { [Function: g] listener: [Function] },
                                         data: [Function],
                                         unpipe: [Function: onunpipe],
                                         drain: [Function],
                                         error: [Function: onerror],
                                         close: { [Function: g] listener: [Function: onclose] },
                                         finish: { [Function: g] listener: [Function: onfinish] } },
                                      _eventsCount: 8,
                                      _maxListeners: undefined,
                                      _writableState: 
                                       WritableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         needDrain: false,
                                         ending: false,
                                         ended: false,
                                         finished: false,
                                         decodeStrings: true,
                                         defaultEncoding: 'utf8',
                                         length: 0,
                                         writing: false,
                                         corked: 0,
                                         sync: false,
                                         bufferProcessing: false,
                                         onwrite: [Function],
                                         writecb: null,
                                         writelen: 0,
                                         bufferedRequest: null,
                                         lastBufferedRequest: null,
                                         pendingcb: 0,
                                         prefinished: false,
                                         errorEmitted: false,
                                         bufferedRequestCount: 0,
                                         corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                      writable: true,
                                      allowHalfOpen: true,
                                      _transformState: 
                                       TransformState {
                                         afterTransform: [Function],
                                         needTransform: true,
                                         transforming: false,
                                         writecb: null,
                                         writechunk: null,
                                         writeencoding: 'buffer' },
                                      buffer: <Buffer 04 01 00 27 00 e4 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                      position: 39 },
                                   pipesCount: 1,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: true,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: 
                                    [ { [Function: g] listener: [Function: onend] },
                                      [Function: bound socketEnd],
                                      { [Function: g] listener: [Function: onend] } ],
                                   finish: [Function: onSocketFinish],
                                   _socketEnd: [Function: onSocketEnd],
                                   error: [Function: bound socketError],
                                   close: [Function: bound socketClose],
                                   data: [Function: ondata] },
                                _eventsCount: 6,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: false,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: false,
                                destroyed: false,
                                _bytesDispatched: 1313,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: null,
                                _server: null,
                                read: [Function],
                                _consuming: true },
                             _packetSize: 4096,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             sendPacket: [Function: bound sendPacket],
                             packetStream: 
                              ReadablePacketStream {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   unpipe: [Function: onunpipe],
                                   drain: [Function],
                                   error: [Function: onerror],
                                   close: { [Function: g] listener: [Function: onclose] },
                                   finish: { [Function: g] listener: [Function: onfinish] } },
                                _eventsCount: 8,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'buffer' },
                                buffer: <Buffer 04 01 00 27 00 e4 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                position: 39 },
                             packetDataSize: 4088 },
                          closed: false,
                          messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                          routingData: undefined,
                          loggedIn: true,
                          isSqlBatch: false,
                          request: undefined,
                          requestTimer: undefined,
                          resetConnectionOnNextRequest: false,
                          procReturnStatusValue: undefined },
                       state: 'IDLE' } },
                 length: 1 } },
           _testOnBorrowResources: Set {},
           _testOnReturnResources: Set {},
           _validationOperations: Set {},
           _allObjects: 
            Set {
              PooledResource {
              creationTime: 1524290978623,
              lastReturnTime: 1524290978635,
              lastBorrowTime: 1524290978624,
              lastIdleTime: 1524290978635,
              obj: 
               Connection {
                 domain: null,
                 _events: { error: [ [Function] ] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 config: 
                  { server: 'DIOPRDB01',
                    userName: 'usrCERND',
                    password: 'usrIMSI^0730CERND',
                    domain: undefined,
                    securityPackage: undefined,
                    options: 
                     { abortTransactionOnError: false,
                       appName: 'node-mssql',
                       camelCaseColumns: false,
                       cancelTimeout: 5000,
                       columnNameReplacer: undefined,
                       connectionRetryInterval: 500,
                       connectTimeout: 15000,
                       connectionIsolationLevel: 2,
                       cryptoCredentialsDetails: {},
                       database: 'front2007',
                       datefirst: 7,
                       dateFormat: 'mdy',
                       debug: { data: false, packet: false, payload: false, token: false },
                       enableAnsiNull: true,
                       enableAnsiNullDefault: true,
                       enableAnsiPadding: true,
                       enableAnsiWarnings: true,
                       enableArithAbort: false,
                       enableConcatNullYieldsNull: true,
                       enableCursorCloseOnCommit: undefined,
                       enableImplicitTransactions: false,
                       enableNumericRoundabort: false,
                       enableQuotedIdentifier: true,
                       encrypt: false,
                       fallbackToDefaultDb: false,
                       instanceName: undefined,
                       isolationLevel: 2,
                       language: 'us_english',
                       localAddress: undefined,
                       maxRetriesOnTransientErrors: 3,
                       multiSubnetFailover: false,
                       packetSize: 4096,
                       port: 1433,
                       readOnlyIntent: false,
                       requestTimeout: 15000,
                       rowCollectionOnDone: false,
                       rowCollectionOnRequestCompletion: false,
                       tdsVersion: '7_4',
                       textsize: '2147483647',
                       trustServerCertificate: true,
                       useColumnNames: false,
                       useUTC: true } },
                 reset: [Function: bound reset],
                 socketClose: [Function: bound socketClose],
                 socketEnd: [Function: bound socketEnd],
                 socketConnect: [Function: bound socketConnect],
                 socketError: [Function: bound socketError],
                 requestTimeout: [Function: bound requestTimeout],
                 connectTimeout: [Function: bound connectTimeout],
                 retryTimeout: [Function: bound retryTimeout],
                 debug: 
                  Debug {
                    domain: null,
                    _events: { debug: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    options: { data: false, packet: false, payload: false, token: false },
                    indent: '  ' },
                 tokenStreamParser: 
                  Parser {
                    domain: null,
                    _events: 
                     { infoMessage: [Function],
                       sspichallenge: [Function],
                       errorMessage: [Function],
                       databaseChange: [Function],
                       languageChange: [Function],
                       charsetChange: [Function],
                       loginack: [Function],
                       routingChange: [Function],
                       packetSizeChange: [Function],
                       beginTransaction: [Function],
                       commitTransaction: [Function],
                       rollbackTransaction: [Function],
                       columnMetadata: [Function],
                       order: [Function],
                       row: [Function],
                       returnStatus: [Function],
                       returnValue: [Function],
                       doneProc: [Function],
                       doneInProc: [Function],
                       done: [Function],
                       endOfMessage: [Function],
                       resetConnection: [Function],
                       tokenStreamError: [Function],
                       drain: [Function] },
                    _eventsCount: 24,
                    _maxListeners: undefined,
                    debug: 
                     Debug {
                       domain: null,
                       _events: { debug: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       options: { data: false, packet: false, payload: false, token: false },
                       indent: '  ' },
                    colMetadata: undefined,
                    options: 
                     { abortTransactionOnError: false,
                       appName: 'node-mssql',
                       camelCaseColumns: false,
                       cancelTimeout: 5000,
                       columnNameReplacer: undefined,
                       connectionRetryInterval: 500,
                       connectTimeout: 15000,
                       connectionIsolationLevel: 2,
                       cryptoCredentialsDetails: {},
                       database: 'front2007',
                       datefirst: 7,
                       dateFormat: 'mdy',
                       debug: { data: false, packet: false, payload: false, token: false },
                       enableAnsiNull: true,
                       enableAnsiNullDefault: true,
                       enableAnsiPadding: true,
                       enableAnsiWarnings: true,
                       enableArithAbort: false,
                       enableConcatNullYieldsNull: true,
                       enableCursorCloseOnCommit: undefined,
                       enableImplicitTransactions: false,
                       enableNumericRoundabort: false,
                       enableQuotedIdentifier: true,
                       encrypt: false,
                       fallbackToDefaultDb: false,
                       instanceName: undefined,
                       isolationLevel: 2,
                       language: 'us_english',
                       localAddress: undefined,
                       maxRetriesOnTransientErrors: 3,
                       multiSubnetFailover: false,
                       packetSize: 4096,
                       port: 1433,
                       readOnlyIntent: false,
                       requestTimeout: 15000,
                       rowCollectionOnDone: false,
                       rowCollectionOnRequestCompletion: false,
                       tdsVersion: '7_4',
                       textsize: '2147483647',
                       trustServerCertificate: true,
                       useColumnNames: false,
                       useUTC: true },
                    parser: 
                     Parser {
                       _readableState: 
                        ReadableState {
                          objectMode: true,
                          highWaterMark: 16,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: false,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: { [Function: g] listener: [Function: onend] },
                          prefinish: { [Function: g] listener: [Function] },
                          data: [Function],
                          drain: [Function] },
                       _eventsCount: 4,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: true,
                          highWaterMark: 16,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: true,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 0,
                          prefinished: false,
                          errorEmitted: false,
                          bufferedRequestCount: 0,
                          corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                       writable: true,
                       allowHalfOpen: true,
                       _transformState: 
                        TransformState {
                          afterTransform: [Function],
                          needTransform: true,
                          transforming: false,
                          writecb: null,
                          writechunk: null,
                          writeencoding: 'utf8' },
                       debug: 
                        Debug {
                          domain: null,
                          _events: { debug: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          options: { data: false, packet: false, payload: false, token: false },
                          indent: '  ' },
                       colMetadata: undefined,
                       options: 
                        { abortTransactionOnError: false,
                          appName: 'node-mssql',
                          camelCaseColumns: false,
                          cancelTimeout: 5000,
                          columnNameReplacer: undefined,
                          connectionRetryInterval: 500,
                          connectTimeout: 15000,
                          connectionIsolationLevel: 2,
                          cryptoCredentialsDetails: {},
                          database: 'front2007',
                          datefirst: 7,
                          dateFormat: 'mdy',
                          debug: { data: false, packet: false, payload: false, token: false },
                          enableAnsiNull: true,
                          enableAnsiNullDefault: true,
                          enableAnsiPadding: true,
                          enableAnsiWarnings: true,
                          enableArithAbort: false,
                          enableConcatNullYieldsNull: true,
                          enableCursorCloseOnCommit: undefined,
                          enableImplicitTransactions: false,
                          enableNumericRoundabort: false,
                          enableQuotedIdentifier: true,
                          encrypt: false,
                          fallbackToDefaultDb: false,
                          instanceName: undefined,
                          isolationLevel: 2,
                          language: 'us_english',
                          localAddress: undefined,
                          maxRetriesOnTransientErrors: 3,
                          multiSubnetFailover: false,
                          packetSize: 4096,
                          port: 1433,
                          readOnlyIntent: false,
                          requestTimeout: 15000,
                          rowCollectionOnDone: false,
                          rowCollectionOnRequestCompletion: false,
                          tdsVersion: '7_4',
                          textsize: '2147483647',
                          trustServerCertificate: true,
                          useColumnNames: false,
                          useUTC: true },
                       endOfMessageMarker: {},
                       buffer: <Buffer ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                       position: 31,
                       suspended: false,
                       await: [Function],
                       next: undefined } },
                 inTransaction: false,
                 transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                 state: 
                  { name: 'LoggedIn',
                    events: { socketError: [Function: socketError] } },
                 connectTimer: 
                  Timeout {
                    '0': null,
                    _called: false,
                    _idleTimeout: -1,
                    _idlePrev: null,
                    _idleNext: null,
                    _idleStart: 41793,
                    _onTimeout: null,
                    _timerArgs: undefined,
                    _repeat: null },
                 curTransientRetryCount: 0,
                 transientErrorLookup: TransientErrorLookup {},
                 cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                 socket: 
                  Socket {
                    connecting: false,
                    _hadError: false,
                    _handle: 
                     TCP {
                       bytesRead: 874,
                       _externalStream: {},
                       fd: -1,
                       reading: true,
                       owner: [Circular],
                       onread: [Function: onread],
                       onconnection: null,
                       writeQueueSize: 0 },
                    _parent: null,
                    _host: null,
                    _readableState: 
                     ReadableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       buffer: BufferList { head: null, tail: null, length: 0 },
                       length: 0,
                       pipes: 
                        ReadablePacketStream {
                          _readableState: 
                           ReadableState {
                             objectMode: true,
                             highWaterMark: 16,
                             buffer: BufferList { head: null, tail: null, length: 0 },
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: false,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: { [Function: g] listener: [Function: onend] },
                             prefinish: { [Function: g] listener: [Function] },
                             data: [Function],
                             unpipe: [Function: onunpipe],
                             drain: [Function],
                             error: [Function: onerror],
                             close: { [Function: g] listener: [Function: onclose] },
                             finish: { [Function: g] listener: [Function: onfinish] } },
                          _eventsCount: 8,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: true,
                             highWaterMark: 16,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: true,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 0,
                             prefinished: false,
                             errorEmitted: false,
                             bufferedRequestCount: 0,
                             corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                          writable: true,
                          allowHalfOpen: true,
                          _transformState: 
                           TransformState {
                             afterTransform: [Function],
                             needTransform: true,
                             transforming: false,
                             writecb: null,
                             writechunk: null,
                             writeencoding: 'buffer' },
                          buffer: <Buffer 04 01 00 27 00 e4 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                          position: 39 },
                       pipesCount: 1,
                       flowing: true,
                       ended: false,
                       endEmitted: false,
                       reading: true,
                       sync: false,
                       needReadable: true,
                       emittedReadable: false,
                       readableListening: false,
                       resumeScheduled: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: true,
                    domain: null,
                    _events: 
                     { end: 
                        [ { [Function: g] listener: [Function: onend] },
                          [Function: bound socketEnd],
                          { [Function: g] listener: [Function: onend] } ],
                       finish: [Function: onSocketFinish],
                       _socketEnd: [Function: onSocketEnd],
                       error: [Function: bound socketError],
                       close: [Function: bound socketClose],
                       data: [Function: ondata] },
                    _eventsCount: 6,
                    _maxListeners: undefined,
                    _writableState: 
                     WritableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       needDrain: false,
                       ending: false,
                       ended: false,
                       finished: false,
                       decodeStrings: false,
                       defaultEncoding: 'utf8',
                       length: 0,
                       writing: false,
                       corked: 0,
                       sync: false,
                       bufferProcessing: false,
                       onwrite: [Function],
                       writecb: null,
                       writelen: 0,
                       bufferedRequest: null,
                       lastBufferedRequest: null,
                       pendingcb: 0,
                       prefinished: false,
                       errorEmitted: false,
                       bufferedRequestCount: 0,
                       corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                    writable: true,
                    allowHalfOpen: false,
                    destroyed: false,
                    _bytesDispatched: 1313,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: null,
                    _server: null,
                    read: [Function],
                    _consuming: true },
                 messageIo: 
                  MessageIO {
                    domain: null,
                    _events: 
                     { data: [Function],
                       message: [Function],
                       secure: [Function: bound emit] },
                    _eventsCount: 3,
                    _maxListeners: undefined,
                    socket: 
                     Socket {
                       connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          bytesRead: 874,
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: 
                           ReadablePacketStream {
                             _readableState: 
                              ReadableState {
                                objectMode: true,
                                highWaterMark: 16,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: null,
                                pipesCount: 0,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: false,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: { [Function: g] listener: [Function: onend] },
                                prefinish: { [Function: g] listener: [Function] },
                                data: [Function],
                                unpipe: [Function: onunpipe],
                                drain: [Function],
                                error: [Function: onerror],
                                close: { [Function: g] listener: [Function: onclose] },
                                finish: { [Function: g] listener: [Function: onfinish] } },
                             _eventsCount: 8,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: true,
                                highWaterMark: 16,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: true,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: true,
                             _transformState: 
                              TransformState {
                                afterTransform: [Function],
                                needTransform: true,
                                transforming: false,
                                writecb: null,
                                writechunk: null,
                                writeencoding: 'buffer' },
                             buffer: <Buffer 04 01 00 27 00 e4 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                             position: 39 },
                          pipesCount: 1,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: bound socketEnd],
                             { [Function: g] listener: [Function: onend] } ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          error: [Function: bound socketError],
                          close: [Function: bound socketClose],
                          data: [Function: ondata] },
                       _eventsCount: 6,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 0,
                          prefinished: false,
                          errorEmitted: false,
                          bufferedRequestCount: 0,
                          corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                       writable: true,
                       allowHalfOpen: false,
                       destroyed: false,
                       _bytesDispatched: 1313,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: null,
                       _server: null,
                       read: [Function],
                       _consuming: true },
                    _packetSize: 4096,
                    debug: 
                     Debug {
                       domain: null,
                       _events: { debug: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       options: { data: false, packet: false, payload: false, token: false },
                       indent: '  ' },
                    sendPacket: [Function: bound sendPacket],
                    packetStream: 
                     ReadablePacketStream {
                       _readableState: 
                        ReadableState {
                          objectMode: true,
                          highWaterMark: 16,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: false,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: { [Function: g] listener: [Function: onend] },
                          prefinish: { [Function: g] listener: [Function] },
                          data: [Function],
                          unpipe: [Function: onunpipe],
                          drain: [Function],
                          error: [Function: onerror],
                          close: { [Function: g] listener: [Function: onclose] },
                          finish: { [Function: g] listener: [Function: onfinish] } },
                       _eventsCount: 8,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: true,
                          highWaterMark: 16,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: true,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 0,
                          prefinished: false,
                          errorEmitted: false,
                          bufferedRequestCount: 0,
                          corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                       writable: true,
                       allowHalfOpen: true,
                       _transformState: 
                        TransformState {
                          afterTransform: [Function],
                          needTransform: true,
                          transforming: false,
                          writecb: null,
                          writechunk: null,
                          writeencoding: 'buffer' },
                       buffer: <Buffer 04 01 00 27 00 e4 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                       position: 39 },
                    packetDataSize: 4088 },
                 closed: false,
                 messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                 routingData: undefined,
                 loggedIn: true,
                 isSqlBatch: false,
                 request: undefined,
                 requestTimer: undefined,
                 resetConnectionOnNextRequest: false,
                 procReturnStatusValue: undefined },
              state: 'IDLE' } },
           _resourceLoans: Map {},
           _evictionIterator: 
            DequeIterator {
              _list: 
               DoublyLinkedList {
                 head: 
                  { prev: null,
                    next: null,
                    data: 
                     PooledResource {
                       creationTime: 1524290978623,
                       lastReturnTime: 1524290978635,
                       lastBorrowTime: 1524290978624,
                       lastIdleTime: 1524290978635,
                       obj: 
                        Connection {
                          domain: null,
                          _events: { error: [ [Function] ] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          config: 
                           { server: 'DIOPRDB01',
                             userName: 'usrCERND',
                             password: 'usrIMSI^0730CERND',
                             domain: undefined,
                             securityPackage: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true } },
                          reset: [Function: bound reset],
                          socketClose: [Function: bound socketClose],
                          socketEnd: [Function: bound socketEnd],
                          socketConnect: [Function: bound socketConnect],
                          socketError: [Function: bound socketError],
                          requestTimeout: [Function: bound requestTimeout],
                          connectTimeout: [Function: bound connectTimeout],
                          retryTimeout: [Function: bound retryTimeout],
                          debug: 
                           Debug {
                             domain: null,
                             _events: { debug: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             options: { data: false, packet: false, payload: false, token: false },
                             indent: '  ' },
                          tokenStreamParser: 
                           Parser {
                             domain: null,
                             _events: 
                              { infoMessage: [Function],
                                sspichallenge: [Function],
                                errorMessage: [Function],
                                databaseChange: [Function],
                                languageChange: [Function],
                                charsetChange: [Function],
                                loginack: [Function],
                                routingChange: [Function],
                                packetSizeChange: [Function],
                                beginTransaction: [Function],
                                commitTransaction: [Function],
                                rollbackTransaction: [Function],
                                columnMetadata: [Function],
                                order: [Function],
                                row: [Function],
                                returnStatus: [Function],
                                returnValue: [Function],
                                doneProc: [Function],
                                doneInProc: [Function],
                                done: [Function],
                                endOfMessage: [Function],
                                resetConnection: [Function],
                                tokenStreamError: [Function],
                                drain: [Function] },
                             _eventsCount: 24,
                             _maxListeners: undefined,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             colMetadata: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true },
                             parser: 
                              Parser {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   drain: [Function] },
                                _eventsCount: 4,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'utf8' },
                                debug: 
                                 Debug {
                                   domain: null,
                                   _events: { debug: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   options: { data: false, packet: false, payload: false, token: false },
                                   indent: '  ' },
                                colMetadata: undefined,
                                options: 
                                 { abortTransactionOnError: false,
                                   appName: 'node-mssql',
                                   camelCaseColumns: false,
                                   cancelTimeout: 5000,
                                   columnNameReplacer: undefined,
                                   connectionRetryInterval: 500,
                                   connectTimeout: 15000,
                                   connectionIsolationLevel: 2,
                                   cryptoCredentialsDetails: {},
                                   database: 'front2007',
                                   datefirst: 7,
                                   dateFormat: 'mdy',
                                   debug: { data: false, packet: false, payload: false, token: false },
                                   enableAnsiNull: true,
                                   enableAnsiNullDefault: true,
                                   enableAnsiPadding: true,
                                   enableAnsiWarnings: true,
                                   enableArithAbort: false,
                                   enableConcatNullYieldsNull: true,
                                   enableCursorCloseOnCommit: undefined,
                                   enableImplicitTransactions: false,
                                   enableNumericRoundabort: false,
                                   enableQuotedIdentifier: true,
                                   encrypt: false,
                                   fallbackToDefaultDb: false,
                                   instanceName: undefined,
                                   isolationLevel: 2,
                                   language: 'us_english',
                                   localAddress: undefined,
                                   maxRetriesOnTransientErrors: 3,
                                   multiSubnetFailover: false,
                                   packetSize: 4096,
                                   port: 1433,
                                   readOnlyIntent: false,
                                   requestTimeout: 15000,
                                   rowCollectionOnDone: false,
                                   rowCollectionOnRequestCompletion: false,
                                   tdsVersion: '7_4',
                                   textsize: '2147483647',
                                   trustServerCertificate: true,
                                   useColumnNames: false,
                                   useUTC: true },
                                endOfMessageMarker: {},
                                buffer: <Buffer ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                position: 31,
                                suspended: false,
                                await: [Function],
                                next: undefined } },
                          inTransaction: false,
                          transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                          state: 
                           { name: 'LoggedIn',
                             events: { socketError: [Function: socketError] } },
                          connectTimer: 
                           Timeout {
                             '0': null,
                             _called: false,
                             _idleTimeout: -1,
                             _idlePrev: null,
                             _idleNext: null,
                             _idleStart: 41793,
                             _onTimeout: null,
                             _timerArgs: undefined,
                             _repeat: null },
                          curTransientRetryCount: 0,
                          transientErrorLookup: TransientErrorLookup {},
                          cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                          socket: 
                           Socket {
                             connecting: false,
                             _hadError: false,
                             _handle: 
                              TCP {
                                bytesRead: 874,
                                _externalStream: {},
                                fd: -1,
                                reading: true,
                                owner: [Circular],
                                onread: [Function: onread],
                                onconnection: null,
                                writeQueueSize: 0 },
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: 
                                 ReadablePacketStream {
                                   _readableState: 
                                    ReadableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: null,
                                      pipesCount: 0,
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: false,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      defaultEncoding: 'utf8',
                                      ranOut: false,
                                      awaitDrain: 0,
                                      readingMore: false,
                                      decoder: null,
                                      encoding: null },
                                   readable: true,
                                   domain: null,
                                   _events: 
                                    { end: { [Function: g] listener: [Function: onend] },
                                      prefinish: { [Function: g] listener: [Function] },
                                      data: [Function],
                                      unpipe: [Function: onunpipe],
                                      drain: [Function],
                                      error: [Function: onerror],
                                      close: { [Function: g] listener: [Function: onclose] },
                                      finish: { [Function: g] listener: [Function: onfinish] } },
                                   _eventsCount: 8,
                                   _maxListeners: undefined,
                                   _writableState: 
                                    WritableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      decodeStrings: true,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function],
                                      writecb: null,
                                      writelen: 0,
                                      bufferedRequest: null,
                                      lastBufferedRequest: null,
                                      pendingcb: 0,
                                      prefinished: false,
                                      errorEmitted: false,
                                      bufferedRequestCount: 0,
                                      corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                   writable: true,
                                   allowHalfOpen: true,
                                   _transformState: 
                                    TransformState {
                                      afterTransform: [Function],
                                      needTransform: true,
                                      transforming: false,
                                      writecb: null,
                                      writechunk: null,
                                      writeencoding: 'buffer' },
                                   buffer: <Buffer 04 01 00 27 00 e4 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                   position: 39 },
                                pipesCount: 1,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: bound socketEnd],
                                   { [Function: g] listener: [Function: onend] } ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                error: [Function: bound socketError],
                                close: [Function: bound socketClose],
                                data: [Function: ondata] },
                             _eventsCount: 6,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: false,
                             destroyed: false,
                             _bytesDispatched: 1313,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: null,
                             _server: null,
                             read: [Function],
                             _consuming: true },
                          messageIo: 
                           MessageIO {
                             domain: null,
                             _events: 
                              { data: [Function],
                                message: [Function],
                                secure: [Function: bound emit] },
                             _eventsCount: 3,
                             _maxListeners: undefined,
                             socket: 
                              Socket {
                                connecting: false,
                                _hadError: false,
                                _handle: 
                                 TCP {
                                   bytesRead: 874,
                                   _externalStream: {},
                                   fd: -1,
                                   reading: true,
                                   owner: [Circular],
                                   onread: [Function: onread],
                                   onconnection: null,
                                   writeQueueSize: 0 },
                                _parent: null,
                                _host: null,
                                _readableState: 
                                 ReadableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: 
                                    ReadablePacketStream {
                                      _readableState: 
                                       ReadableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         buffer: BufferList { head: null, tail: null, length: 0 },
                                         length: 0,
                                         pipes: null,
                                         pipesCount: 0,
                                         flowing: true,
                                         ended: false,
                                         endEmitted: false,
                                         reading: false,
                                         sync: false,
                                         needReadable: true,
                                         emittedReadable: false,
                                         readableListening: false,
                                         resumeScheduled: false,
                                         defaultEncoding: 'utf8',
                                         ranOut: false,
                                         awaitDrain: 0,
                                         readingMore: false,
                                         decoder: null,
                                         encoding: null },
                                      readable: true,
                                      domain: null,
                                      _events: 
                                       { end: { [Function: g] listener: [Function: onend] },
                                         prefinish: { [Function: g] listener: [Function] },
                                         data: [Function],
                                         unpipe: [Function: onunpipe],
                                         drain: [Function],
                                         error: [Function: onerror],
                                         close: { [Function: g] listener: [Function: onclose] },
                                         finish: { [Function: g] listener: [Function: onfinish] } },
                                      _eventsCount: 8,
                                      _maxListeners: undefined,
                                      _writableState: 
                                       WritableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         needDrain: false,
                                         ending: false,
                                         ended: false,
                                         finished: false,
                                         decodeStrings: true,
                                         defaultEncoding: 'utf8',
                                         length: 0,
                                         writing: false,
                                         corked: 0,
                                         sync: false,
                                         bufferProcessing: false,
                                         onwrite: [Function],
                                         writecb: null,
                                         writelen: 0,
                                         bufferedRequest: null,
                                         lastBufferedRequest: null,
                                         pendingcb: 0,
                                         prefinished: false,
                                         errorEmitted: false,
                                         bufferedRequestCount: 0,
                                         corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                      writable: true,
                                      allowHalfOpen: true,
                                      _transformState: 
                                       TransformState {
                                         afterTransform: [Function],
                                         needTransform: true,
                                         transforming: false,
                                         writecb: null,
                                         writechunk: null,
                                         writeencoding: 'buffer' },
                                      buffer: <Buffer 04 01 00 27 00 e4 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                      position: 39 },
                                   pipesCount: 1,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: true,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: 
                                    [ { [Function: g] listener: [Function: onend] },
                                      [Function: bound socketEnd],
                                      { [Function: g] listener: [Function: onend] } ],
                                   finish: [Function: onSocketFinish],
                                   _socketEnd: [Function: onSocketEnd],
                                   error: [Function: bound socketError],
                                   close: [Function: bound socketClose],
                                   data: [Function: ondata] },
                                _eventsCount: 6,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: false,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: false,
                                destroyed: false,
                                _bytesDispatched: 1313,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: null,
                                _server: null,
                                read: [Function],
                                _consuming: true },
                             _packetSize: 4096,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             sendPacket: [Function: bound sendPacket],
                             packetStream: 
                              ReadablePacketStream {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   unpipe: [Function: onunpipe],
                                   drain: [Function],
                                   error: [Function: onerror],
                                   close: { [Function: g] listener: [Function: onclose] },
                                   finish: { [Function: g] listener: [Function: onfinish] } },
                                _eventsCount: 8,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'buffer' },
                                buffer: <Buffer 04 01 00 27 00 e4 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                position: 39 },
                             packetDataSize: 4088 },
                          closed: false,
                          messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                          routingData: undefined,
                          loggedIn: true,
                          isSqlBatch: false,
                          request: undefined,
                          requestTimer: undefined,
                          resetConnectionOnNextRequest: false,
                          procReturnStatusValue: undefined },
                       state: 'IDLE' } },
                 tail: 
                  { prev: null,
                    next: null,
                    data: 
                     PooledResource {
                       creationTime: 1524290978623,
                       lastReturnTime: 1524290978635,
                       lastBorrowTime: 1524290978624,
                       lastIdleTime: 1524290978635,
                       obj: 
                        Connection {
                          domain: null,
                          _events: { error: [ [Function] ] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          config: 
                           { server: 'DIOPRDB01',
                             userName: 'usrCERND',
                             password: 'usrIMSI^0730CERND',
                             domain: undefined,
                             securityPackage: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true } },
                          reset: [Function: bound reset],
                          socketClose: [Function: bound socketClose],
                          socketEnd: [Function: bound socketEnd],
                          socketConnect: [Function: bound socketConnect],
                          socketError: [Function: bound socketError],
                          requestTimeout: [Function: bound requestTimeout],
                          connectTimeout: [Function: bound connectTimeout],
                          retryTimeout: [Function: bound retryTimeout],
                          debug: 
                           Debug {
                             domain: null,
                             _events: { debug: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             options: { data: false, packet: false, payload: false, token: false },
                             indent: '  ' },
                          tokenStreamParser: 
                           Parser {
                             domain: null,
                             _events: 
                              { infoMessage: [Function],
                                sspichallenge: [Function],
                                errorMessage: [Function],
                                databaseChange: [Function],
                                languageChange: [Function],
                                charsetChange: [Function],
                                loginack: [Function],
                                routingChange: [Function],
                                packetSizeChange: [Function],
                                beginTransaction: [Function],
                                commitTransaction: [Function],
                                rollbackTransaction: [Function],
                                columnMetadata: [Function],
                                order: [Function],
                                row: [Function],
                                returnStatus: [Function],
                                returnValue: [Function],
                                doneProc: [Function],
                                doneInProc: [Function],
                                done: [Function],
                                endOfMessage: [Function],
                                resetConnection: [Function],
                                tokenStreamError: [Function],
                                drain: [Function] },
                             _eventsCount: 24,
                             _maxListeners: undefined,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             colMetadata: undefined,
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true },
                             parser: 
                              Parser {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   drain: [Function] },
                                _eventsCount: 4,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'utf8' },
                                debug: 
                                 Debug {
                                   domain: null,
                                   _events: { debug: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   options: { data: false, packet: false, payload: false, token: false },
                                   indent: '  ' },
                                colMetadata: undefined,
                                options: 
                                 { abortTransactionOnError: false,
                                   appName: 'node-mssql',
                                   camelCaseColumns: false,
                                   cancelTimeout: 5000,
                                   columnNameReplacer: undefined,
                                   connectionRetryInterval: 500,
                                   connectTimeout: 15000,
                                   connectionIsolationLevel: 2,
                                   cryptoCredentialsDetails: {},
                                   database: 'front2007',
                                   datefirst: 7,
                                   dateFormat: 'mdy',
                                   debug: { data: false, packet: false, payload: false, token: false },
                                   enableAnsiNull: true,
                                   enableAnsiNullDefault: true,
                                   enableAnsiPadding: true,
                                   enableAnsiWarnings: true,
                                   enableArithAbort: false,
                                   enableConcatNullYieldsNull: true,
                                   enableCursorCloseOnCommit: undefined,
                                   enableImplicitTransactions: false,
                                   enableNumericRoundabort: false,
                                   enableQuotedIdentifier: true,
                                   encrypt: false,
                                   fallbackToDefaultDb: false,
                                   instanceName: undefined,
                                   isolationLevel: 2,
                                   language: 'us_english',
                                   localAddress: undefined,
                                   maxRetriesOnTransientErrors: 3,
                                   multiSubnetFailover: false,
                                   packetSize: 4096,
                                   port: 1433,
                                   readOnlyIntent: false,
                                   requestTimeout: 15000,
                                   rowCollectionOnDone: false,
                                   rowCollectionOnRequestCompletion: false,
                                   tdsVersion: '7_4',
                                   textsize: '2147483647',
                                   trustServerCertificate: true,
                                   useColumnNames: false,
                                   useUTC: true },
                                endOfMessageMarker: {},
                                buffer: <Buffer ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                position: 31,
                                suspended: false,
                                await: [Function],
                                next: undefined } },
                          inTransaction: false,
                          transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                          state: 
                           { name: 'LoggedIn',
                             events: { socketError: [Function: socketError] } },
                          connectTimer: 
                           Timeout {
                             '0': null,
                             _called: false,
                             _idleTimeout: -1,
                             _idlePrev: null,
                             _idleNext: null,
                             _idleStart: 41793,
                             _onTimeout: null,
                             _timerArgs: undefined,
                             _repeat: null },
                          curTransientRetryCount: 0,
                          transientErrorLookup: TransientErrorLookup {},
                          cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                          socket: 
                           Socket {
                             connecting: false,
                             _hadError: false,
                             _handle: 
                              TCP {
                                bytesRead: 874,
                                _externalStream: {},
                                fd: -1,
                                reading: true,
                                owner: [Circular],
                                onread: [Function: onread],
                                onconnection: null,
                                writeQueueSize: 0 },
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: 
                                 ReadablePacketStream {
                                   _readableState: 
                                    ReadableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: null,
                                      pipesCount: 0,
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: false,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      defaultEncoding: 'utf8',
                                      ranOut: false,
                                      awaitDrain: 0,
                                      readingMore: false,
                                      decoder: null,
                                      encoding: null },
                                   readable: true,
                                   domain: null,
                                   _events: 
                                    { end: { [Function: g] listener: [Function: onend] },
                                      prefinish: { [Function: g] listener: [Function] },
                                      data: [Function],
                                      unpipe: [Function: onunpipe],
                                      drain: [Function],
                                      error: [Function: onerror],
                                      close: { [Function: g] listener: [Function: onclose] },
                                      finish: { [Function: g] listener: [Function: onfinish] } },
                                   _eventsCount: 8,
                                   _maxListeners: undefined,
                                   _writableState: 
                                    WritableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      decodeStrings: true,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function],
                                      writecb: null,
                                      writelen: 0,
                                      bufferedRequest: null,
                                      lastBufferedRequest: null,
                                      pendingcb: 0,
                                      prefinished: false,
                                      errorEmitted: false,
                                      bufferedRequestCount: 0,
                                      corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                   writable: true,
                                   allowHalfOpen: true,
                                   _transformState: 
                                    TransformState {
                                      afterTransform: [Function],
                                      needTransform: true,
                                      transforming: false,
                                      writecb: null,
                                      writechunk: null,
                                      writeencoding: 'buffer' },
                                   buffer: <Buffer 04 01 00 27 00 e4 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                   position: 39 },
                                pipesCount: 1,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: bound socketEnd],
                                   { [Function: g] listener: [Function: onend] } ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                error: [Function: bound socketError],
                                close: [Function: bound socketClose],
                                data: [Function: ondata] },
                             _eventsCount: 6,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: false,
                             destroyed: false,
                             _bytesDispatched: 1313,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: null,
                             _server: null,
                             read: [Function],
                             _consuming: true },
                          messageIo: 
                           MessageIO {
                             domain: null,
                             _events: 
                              { data: [Function],
                                message: [Function],
                                secure: [Function: bound emit] },
                             _eventsCount: 3,
                             _maxListeners: undefined,
                             socket: 
                              Socket {
                                connecting: false,
                                _hadError: false,
                                _handle: 
                                 TCP {
                                   bytesRead: 874,
                                   _externalStream: {},
                                   fd: -1,
                                   reading: true,
                                   owner: [Circular],
                                   onread: [Function: onread],
                                   onconnection: null,
                                   writeQueueSize: 0 },
                                _parent: null,
                                _host: null,
                                _readableState: 
                                 ReadableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: 
                                    ReadablePacketStream {
                                      _readableState: 
                                       ReadableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         buffer: BufferList { head: null, tail: null, length: 0 },
                                         length: 0,
                                         pipes: null,
                                         pipesCount: 0,
                                         flowing: true,
                                         ended: false,
                                         endEmitted: false,
                                         reading: false,
                                         sync: false,
                                         needReadable: true,
                                         emittedReadable: false,
                                         readableListening: false,
                                         resumeScheduled: false,
                                         defaultEncoding: 'utf8',
                                         ranOut: false,
                                         awaitDrain: 0,
                                         readingMore: false,
                                         decoder: null,
                                         encoding: null },
                                      readable: true,
                                      domain: null,
                                      _events: 
                                       { end: { [Function: g] listener: [Function: onend] },
                                         prefinish: { [Function: g] listener: [Function] },
                                         data: [Function],
                                         unpipe: [Function: onunpipe],
                                         drain: [Function],
                                         error: [Function: onerror],
                                         close: { [Function: g] listener: [Function: onclose] },
                                         finish: { [Function: g] listener: [Function: onfinish] } },
                                      _eventsCount: 8,
                                      _maxListeners: undefined,
                                      _writableState: 
                                       WritableState {
                                         objectMode: true,
                                         highWaterMark: 16,
                                         needDrain: false,
                                         ending: false,
                                         ended: false,
                                         finished: false,
                                         decodeStrings: true,
                                         defaultEncoding: 'utf8',
                                         length: 0,
                                         writing: false,
                                         corked: 0,
                                         sync: false,
                                         bufferProcessing: false,
                                         onwrite: [Function],
                                         writecb: null,
                                         writelen: 0,
                                         bufferedRequest: null,
                                         lastBufferedRequest: null,
                                         pendingcb: 0,
                                         prefinished: false,
                                         errorEmitted: false,
                                         bufferedRequestCount: 0,
                                         corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                      writable: true,
                                      allowHalfOpen: true,
                                      _transformState: 
                                       TransformState {
                                         afterTransform: [Function],
                                         needTransform: true,
                                         transforming: false,
                                         writecb: null,
                                         writechunk: null,
                                         writeencoding: 'buffer' },
                                      buffer: <Buffer 04 01 00 27 00 e4 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                      position: 39 },
                                   pipesCount: 1,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: true,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: 
                                    [ { [Function: g] listener: [Function: onend] },
                                      [Function: bound socketEnd],
                                      { [Function: g] listener: [Function: onend] } ],
                                   finish: [Function: onSocketFinish],
                                   _socketEnd: [Function: onSocketEnd],
                                   error: [Function: bound socketError],
                                   close: [Function: bound socketClose],
                                   data: [Function: ondata] },
                                _eventsCount: 6,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: false,
                                   highWaterMark: 16384,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: false,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: false,
                                destroyed: false,
                                _bytesDispatched: 1313,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: null,
                                _server: null,
                                read: [Function],
                                _consuming: true },
                             _packetSize: 4096,
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             sendPacket: [Function: bound sendPacket],
                             packetStream: 
                              ReadablePacketStream {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   unpipe: [Function: onunpipe],
                                   drain: [Function],
                                   error: [Function: onerror],
                                   close: { [Function: g] listener: [Function: onclose] },
                                   finish: { [Function: g] listener: [Function: onfinish] } },
                                _eventsCount: 8,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'buffer' },
                                buffer: <Buffer 04 01 00 27 00 e4 01 00 ff 11 00 c3 00 01 00 00 00 00 00 00 00 79 00 00 00 00 fe 00 00 e0 00 00 00 00 00 00 00 00 00>,
                                position: 39 },
                             packetDataSize: 4088 },
                          closed: false,
                          messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                          routingData: undefined,
                          loggedIn: true,
                          isSqlBatch: false,
                          request: undefined,
                          requestTimer: undefined,
                          resetConnectionOnNextRequest: false,
                          procReturnStatusValue: undefined },
                       state: 'IDLE' } },
                 length: 1 },
              _direction: 'next',
              _startPosition: 'head',
              _started: true,
              _cursor: 
               { prev: null,
                 next: null,
                 data: 
                  PooledResource {
                    creationTime: 1524290969426,
                    lastReturnTime: 1524290969449,
                    lastBorrowTime: 1524290969426,
                    lastIdleTime: 1524290969449,
                    obj: 
                     Connection {
                       domain: null,
                       _events: { error: [ [Function] ] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       config: 
                        { server: 'DIOPRDB01',
                          userName: 'usrCERND',
                          password: 'usrIMSI^0730CERND',
                          domain: undefined,
                          securityPackage: undefined,
                          options: 
                           { abortTransactionOnError: false,
                             appName: 'node-mssql',
                             camelCaseColumns: false,
                             cancelTimeout: 5000,
                             columnNameReplacer: undefined,
                             connectionRetryInterval: 500,
                             connectTimeout: 15000,
                             connectionIsolationLevel: 2,
                             cryptoCredentialsDetails: {},
                             database: 'front2007',
                             datefirst: 7,
                             dateFormat: 'mdy',
                             debug: { data: false, packet: false, payload: false, token: false },
                             enableAnsiNull: true,
                             enableAnsiNullDefault: true,
                             enableAnsiPadding: true,
                             enableAnsiWarnings: true,
                             enableArithAbort: false,
                             enableConcatNullYieldsNull: true,
                             enableCursorCloseOnCommit: undefined,
                             enableImplicitTransactions: false,
                             enableNumericRoundabort: false,
                             enableQuotedIdentifier: true,
                             encrypt: false,
                             fallbackToDefaultDb: false,
                             instanceName: undefined,
                             isolationLevel: 2,
                             language: 'us_english',
                             localAddress: undefined,
                             maxRetriesOnTransientErrors: 3,
                             multiSubnetFailover: false,
                             packetSize: 4096,
                             port: 1433,
                             readOnlyIntent: false,
                             requestTimeout: 15000,
                             rowCollectionOnDone: false,
                             rowCollectionOnRequestCompletion: false,
                             tdsVersion: '7_4',
                             textsize: '2147483647',
                             trustServerCertificate: true,
                             useColumnNames: false,
                             useUTC: true } },
                       reset: [Function: bound reset],
                       socketClose: [Function: bound socketClose],
                       socketEnd: [Function: bound socketEnd],
                       socketConnect: [Function: bound socketConnect],
                       socketError: [Function: bound socketError],
                       requestTimeout: [Function: bound requestTimeout],
                       connectTimeout: [Function: bound connectTimeout],
                       retryTimeout: [Function: bound retryTimeout],
                       debug: 
                        Debug {
                          domain: null,
                          _events: { debug: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          options: { data: false, packet: false, payload: false, token: false },
                          indent: '  ' },
                       tokenStreamParser: 
                        Parser {
                          domain: null,
                          _events: 
                           { infoMessage: [Function],
                             sspichallenge: [Function],
                             errorMessage: [Function],
                             databaseChange: [Function],
                             languageChange: [Function],
                             charsetChange: [Function],
                             loginack: [Function],
                             routingChange: [Function],
                             packetSizeChange: [Function],
                             beginTransaction: [Function],
                             commitTransaction: [Function],
                             rollbackTransaction: [Function],
                             columnMetadata: [Function],
                             order: [Function],
                             row: [Function],
                             returnStatus: [Function],
                             returnValue: [Function],
                             doneProc: [Function],
                             doneInProc: [Function],
                             done: [Function],
                             endOfMessage: [Function],
                             resetConnection: [Function],
                             tokenStreamError: [Function],
                             drain: [Function] },
                          _eventsCount: 24,
                          _maxListeners: undefined,
                          debug: 
                           Debug {
                             domain: null,
                             _events: { debug: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             options: { data: false, packet: false, payload: false, token: false },
                             indent: '  ' },
                          colMetadata: undefined,
                          options: 
                           { abortTransactionOnError: false,
                             appName: 'node-mssql',
                             camelCaseColumns: false,
                             cancelTimeout: 5000,
                             columnNameReplacer: undefined,
                             connectionRetryInterval: 500,
                             connectTimeout: 15000,
                             connectionIsolationLevel: 2,
                             cryptoCredentialsDetails: {},
                             database: 'front2007',
                             datefirst: 7,
                             dateFormat: 'mdy',
                             debug: { data: false, packet: false, payload: false, token: false },
                             enableAnsiNull: true,
                             enableAnsiNullDefault: true,
                             enableAnsiPadding: true,
                             enableAnsiWarnings: true,
                             enableArithAbort: false,
                             enableConcatNullYieldsNull: true,
                             enableCursorCloseOnCommit: undefined,
                             enableImplicitTransactions: false,
                             enableNumericRoundabort: false,
                             enableQuotedIdentifier: true,
                             encrypt: false,
                             fallbackToDefaultDb: false,
                             instanceName: undefined,
                             isolationLevel: 2,
                             language: 'us_english',
                             localAddress: undefined,
                             maxRetriesOnTransientErrors: 3,
                             multiSubnetFailover: false,
                             packetSize: 4096,
                             port: 1433,
                             readOnlyIntent: false,
                             requestTimeout: 15000,
                             rowCollectionOnDone: false,
                             rowCollectionOnRequestCompletion: false,
                             tdsVersion: '7_4',
                             textsize: '2147483647',
                             trustServerCertificate: true,
                             useColumnNames: false,
                             useUTC: true },
                          parser: 
                           Parser {
                             _readableState: 
                              ReadableState {
                                objectMode: true,
                                highWaterMark: 16,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: null,
                                pipesCount: 0,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: false,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: { [Function: g] listener: [Function: onend] },
                                prefinish: { [Function: g] listener: [Function] },
                                data: [Function],
                                drain: [Function] },
                             _eventsCount: 4,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: true,
                                highWaterMark: 16,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: true,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: true,
                             _transformState: 
                              TransformState {
                                afterTransform: [Function],
                                needTransform: true,
                                transforming: false,
                                writecb: null,
                                writechunk: null,
                                writeencoding: 'utf8' },
                             debug: 
                              Debug {
                                domain: null,
                                _events: { debug: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                options: { data: false, packet: false, payload: false, token: false },
                                indent: '  ' },
                             colMetadata: 
                              [ { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'BUKRS',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 30,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'EMP_NO',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 200,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'BUTXT',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 200,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'DEP_BG_CODE',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 8000,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'DEP_BG_NAME',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 8000,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'DEP_CODE',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 30,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'DEP_NAME',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 300,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'EMP_NAME',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 200,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'EMP_NM_ENG',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 300,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'EMP_STAT',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 8000,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'ENT_DATE',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 40,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'RET_DATE',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 40,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'RSPT_NAME',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 8000,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'DEP_HEAD',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 2,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'POS_NAME',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 8000,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'TELF1',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 140,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'TELF3',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 140,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'TELF2',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 140,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'SMTP_ADDR',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 300,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'ADACCOUNT',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 60,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'CPUDT',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 100,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'COM_ORG_ID',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 40,
                                  tableName: undefined },
                                { userType: 0,
                                  flags: 9,
                                  type: 
                                   { id: 231,
                                     type: 'NVARCHAR',
                                     name: 'NVarChar',
                                     hasCollation: true,
                                     dataLengthLength: 2,
                                     maximumLength: 4000,
                                     declaration: [Function: declaration],
                                     resolveLength: [Function: resolveLength],
                                     writeTypeInfo: [Function: writeTypeInfo],
                                     writeParameterData: [Function: writeParameterData],
                                     validate: [Function: validate] },
                                  colName: 'ORG_NM_ENG',
                                  collation: 
                                   { lcid: 1042,
                                     flags: 208,
                                     version: 0,
                                     sortId: 0,
                                     codepage: 'CP949' },
                                  precision: undefined,
                                  scale: undefined,
                                  udtInfo: undefined,
                                  dataLength: 800,
                                  tableName: undefined } ],
                             options: 
                              { abortTransactionOnError: false,
                                appName: 'node-mssql',
                                camelCaseColumns: false,
                                cancelTimeout: 5000,
                                columnNameReplacer: undefined,
                                connectionRetryInterval: 500,
                                connectTimeout: 15000,
                                connectionIsolationLevel: 2,
                                cryptoCredentialsDetails: {},
                                database: 'front2007',
                                datefirst: 7,
                                dateFormat: 'mdy',
                                debug: { data: false, packet: false, payload: false, token: false },
                                enableAnsiNull: true,
                                enableAnsiNullDefault: true,
                                enableAnsiPadding: true,
                                enableAnsiWarnings: true,
                                enableArithAbort: false,
                                enableConcatNullYieldsNull: true,
                                enableCursorCloseOnCommit: undefined,
                                enableImplicitTransactions: false,
                                enableNumericRoundabort: false,
                                enableQuotedIdentifier: true,
                                encrypt: false,
                                fallbackToDefaultDb: false,
                                instanceName: undefined,
                                isolationLevel: 2,
                                language: 'us_english',
                                localAddress: undefined,
                                maxRetriesOnTransientErrors: 3,
                                multiSubnetFailover: false,
                                packetSize: 4096,
                                port: 1433,
                                readOnlyIntent: false,
                                requestTimeout: 15000,
                                rowCollectionOnDone: false,
                                rowCollectionOnRequestCompletion: false,
                                tdsVersion: '7_4',
                                textsize: '2147483647',
                                trustServerCertificate: true,
                                useColumnNames: false,
                                useUTC: true },
                             endOfMessageMarker: {},
                             buffer: <Buffer 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 06 45 00 4d 00 50 00 5f ... >,
                             position: 1142,
                             suspended: false,
                             await: [Function],
                             next: undefined } },
                       inTransaction: false,
                       transactionDescriptors: [ <Buffer 00 00 00 00 00 00 00 00> ],
                       state: 
                        { name: 'Final',
                          enter: [Function: enter],
                          events: 
                           { loginFailed: [Function: loginFailed],
                             connectTimeout: [Function: connectTimeout],
                             message: [Function: message],
                             socketError: [Function: socketError] } },
                       connectTimer: 
                        Timeout {
                          '0': null,
                          _called: false,
                          _idleTimeout: -1,
                          _idlePrev: null,
                          _idleNext: null,
                          _idleStart: 32640,
                          _onTimeout: null,
                          _timerArgs: undefined,
                          _repeat: null },
                       curTransientRetryCount: 0,
                       transientErrorLookup: TransientErrorLookup {},
                       cleanupTypeEnum: { NORMAL: 0, REDIRECT: 1, RETRY: 2 },
                       socket: 
                        Socket {
                          connecting: false,
                          _hadError: false,
                          _handle: null,
                          _parent: null,
                          _host: null,
                          _readableState: 
                           ReadableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             buffer: BufferList { head: null, tail: null, length: 0 },
                             length: 0,
                             pipes: 
                              ReadablePacketStream {
                                _readableState: 
                                 ReadableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   buffer: BufferList { head: null, tail: null, length: 0 },
                                   length: 0,
                                   pipes: null,
                                   pipesCount: 0,
                                   flowing: true,
                                   ended: false,
                                   endEmitted: false,
                                   reading: false,
                                   sync: false,
                                   needReadable: true,
                                   emittedReadable: false,
                                   readableListening: false,
                                   resumeScheduled: false,
                                   defaultEncoding: 'utf8',
                                   ranOut: false,
                                   awaitDrain: 0,
                                   readingMore: false,
                                   decoder: null,
                                   encoding: null },
                                readable: true,
                                domain: null,
                                _events: 
                                 { end: { [Function: g] listener: [Function: onend] },
                                   prefinish: { [Function: g] listener: [Function] },
                                   data: [Function],
                                   unpipe: [Function: onunpipe],
                                   drain: [Function],
                                   error: [Function: onerror],
                                   close: { [Function: g] listener: [Function: onclose] },
                                   finish: { [Function: g] listener: [Function: onfinish] } },
                                _eventsCount: 8,
                                _maxListeners: undefined,
                                _writableState: 
                                 WritableState {
                                   objectMode: true,
                                   highWaterMark: 16,
                                   needDrain: false,
                                   ending: false,
                                   ended: false,
                                   finished: false,
                                   decodeStrings: true,
                                   defaultEncoding: 'utf8',
                                   length: 0,
                                   writing: false,
                                   corked: 0,
                                   sync: false,
                                   bufferProcessing: false,
                                   onwrite: [Function],
                                   writecb: null,
                                   writelen: 0,
                                   bufferedRequest: null,
                                   lastBufferedRequest: null,
                                   pendingcb: 0,
                                   prefinished: false,
                                   errorEmitted: false,
                                   bufferedRequestCount: 0,
                                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                writable: true,
                                allowHalfOpen: true,
                                _transformState: 
                                 TransformState {
                                   afterTransform: [Function],
                                   needTransform: true,
                                   transforming: false,
                                   writecb: null,
                                   writechunk: null,
                                   writeencoding: 'buffer' },
                                buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                                position: 1150 },
                             pipesCount: 1,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: true,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: false,
                          domain: null,
                          _events: 
                           { end: 
                              [ { [Function: g] listener: [Function: onend] },
                                [Function: bound socketEnd],
                                { [Function: g] listener: [Function: onend] } ],
                             finish: [Function: onSocketFinish],
                             _socketEnd: [Function: onSocketEnd],
                             error: [Function: bound socketError],
                             close: [Function: bound socketClose],
                             data: [Function: ondata] },
                          _eventsCount: 6,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: false,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 0,
                             prefinished: false,
                             errorEmitted: false,
                             bufferedRequestCount: 0,
                             corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                          writable: false,
                          allowHalfOpen: false,
                          destroyed: true,
                          _bytesDispatched: 1285,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: null,
                          _server: null,
                          read: [Function],
                          _consuming: true,
                          _idleNext: null,
                          _idlePrev: null,
                          _idleTimeout: -1 },
                       messageIo: 
                        MessageIO {
                          domain: null,
                          _events: 
                           { data: [Function],
                             message: [Function],
                             secure: [Function: bound emit] },
                          _eventsCount: 3,
                          _maxListeners: undefined,
                          socket: 
                           Socket {
                             connecting: false,
                             _hadError: false,
                             _handle: null,
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: 
                                 ReadablePacketStream {
                                   _readableState: 
                                    ReadableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: null,
                                      pipesCount: 0,
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: false,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      defaultEncoding: 'utf8',
                                      ranOut: false,
                                      awaitDrain: 0,
                                      readingMore: false,
                                      decoder: null,
                                      encoding: null },
                                   readable: true,
                                   domain: null,
                                   _events: 
                                    { end: { [Function: g] listener: [Function: onend] },
                                      prefinish: { [Function: g] listener: [Function] },
                                      data: [Function],
                                      unpipe: [Function: onunpipe],
                                      drain: [Function],
                                      error: [Function: onerror],
                                      close: { [Function: g] listener: [Function: onclose] },
                                      finish: { [Function: g] listener: [Function: onfinish] } },
                                   _eventsCount: 8,
                                   _maxListeners: undefined,
                                   _writableState: 
                                    WritableState {
                                      objectMode: true,
                                      highWaterMark: 16,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      decodeStrings: true,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function],
                                      writecb: null,
                                      writelen: 0,
                                      bufferedRequest: null,
                                      lastBufferedRequest: null,
                                      pendingcb: 0,
                                      prefinished: false,
                                      errorEmitted: false,
                                      bufferedRequestCount: 0,
                                      corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                                   writable: true,
                                   allowHalfOpen: true,
                                   _transformState: 
                                    TransformState {
                                      afterTransform: [Function],
                                      needTransform: true,
                                      transforming: false,
                                      writecb: null,
                                      writechunk: null,
                                      writeencoding: 'buffer' },
                                   buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                                   position: 1150 },
                                pipesCount: 1,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: false,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: bound socketEnd],
                                   { [Function: g] listener: [Function: onend] } ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                error: [Function: bound socketError],
                                close: [Function: bound socketClose],
                                data: [Function: ondata] },
                             _eventsCount: 6,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: false,
                             allowHalfOpen: false,
                             destroyed: true,
                             _bytesDispatched: 1285,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: null,
                             _server: null,
                             read: [Function],
                             _consuming: true,
                             _idleNext: null,
                             _idlePrev: null,
                             _idleTimeout: -1 },
                          _packetSize: 4096,
                          debug: 
                           Debug {
                             domain: null,
                             _events: { debug: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             options: { data: false, packet: false, payload: false, token: false },
                             indent: '  ' },
                          sendPacket: [Function: bound sendPacket],
                          packetStream: 
                           ReadablePacketStream {
                             _readableState: 
                              ReadableState {
                                objectMode: true,
                                highWaterMark: 16,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: null,
                                pipesCount: 0,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: false,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: { [Function: g] listener: [Function: onend] },
                                prefinish: { [Function: g] listener: [Function] },
                                data: [Function],
                                unpipe: [Function: onunpipe],
                                drain: [Function],
                                error: [Function: onerror],
                                close: { [Function: g] listener: [Function: onclose] },
                                finish: { [Function: g] listener: [Function: onfinish] } },
                             _eventsCount: 8,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: true,
                                highWaterMark: 16,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: true,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 0,
                                prefinished: false,
                                errorEmitted: false,
                                bufferedRequestCount: 0,
                                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                             writable: true,
                             allowHalfOpen: true,
                             _transformState: 
                              TransformState {
                                afterTransform: [Function],
                                needTransform: true,
                                transforming: false,
                                writecb: null,
                                writechunk: null,
                                writeencoding: 'buffer' },
                             buffer: <Buffer 04 01 04 7e 00 e4 01 00 81 17 00 00 00 00 00 09 00 e7 1e 00 12 04 d0 00 00 05 42 00 55 00 4b 00 52 00 53 00 00 00 00 00 09 00 e7 c8 00 12 04 d0 00 00 ... >,
                             position: 1150 },
                          packetDataSize: 4088 },
                       closed: true,
                       messageBuffer: <Buffer 00 00 1a 00 06 01 00 20 00 01 02 00 21 00 01 03 00 22 00 00 04 00 22 00 01 ff 0c 00 07 d0 00 00 02 00 00>,
                       routingData: undefined,
                       loggedIn: false,
                       isSqlBatch: false,
                       request: undefined,
                       requestTimer: undefined,
                       resetConnectionOnNextRequest: false,
                       procReturnStatusValue: undefined,
                       loginError: null },
                    state: 'INVALID' } },
              _done: false },
           _evictor: DefaultEvictor {},
           _scheduledEviction: 
            Timeout {
              _called: false,
              _idleTimeout: 1000,
              _idlePrev: 
               TimersList {
                 _idleNext: [Circular],
                 _idlePrev: [Circular],
                 _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
                 _unrefed: false,
                 msecs: 1000 },
              _idleNext: 
               TimersList {
                 _idleNext: [Circular],
                 _idlePrev: [Circular],
                 _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
                 _unrefed: false,
                 msecs: 1000 },
              _idleStart: 41137,
              _onTimeout: [Function],
              _timerArgs: undefined,
              _repeat: null } } },
     parameters: {},
     rowsAffected: 0,
     _cancel: null },
  results: 
   { recordsets: [],
     recordset: undefined,
     output: {},
     rowsAffected: [ 1 ] },
  rowsAffacted: undefined } 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:10:18.839Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:10:18.841Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:10:18.843Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:10:18.844Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:10:18.845Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:10:18.845Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:10:18.846Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:10:18.846Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:10:18.875Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:10:23.390Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:10:23.390Z] REQUEST PATH : /getData 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:10:25.982Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:10:25.985Z] REQUEST PATH : /getData 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:10:31.134Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:10:31.135Z] REQUEST PATH : /getData 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:10:34.206Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:10:34.207Z] REQUEST PATH : /getData 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:10:36.805Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:10:36.806Z] REQUEST PATH : /getData 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:17:02.307Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:17:07.448Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:17:12.418Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:17:17.518Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:17:22.599Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:17:28.404Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:17:34.093Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:17:39.663Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:17:45.869Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:17:51.708Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:17:56.532Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:18:02.028Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:18:06.979Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:18:12.546Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:18:18.467Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:18:23.494Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:18:29.491Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:18:35.008Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:18:40.173Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:18:46.008Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:18:52.318Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:18:57.639Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:19:02.694Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:19:08.098Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:19:13.314Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:19:18.569Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:19:23.814Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:19:28.890Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:19:33.700Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:19:43.198Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:19:47.701Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:19:52.793Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:19:57.415Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:20:02.443Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:20:07.804Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:20:12.781Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:20:17.844Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:20:22.655Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:20:32.918Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:20:37.969Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:20:44.956Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:20:50.121Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:20:55.365Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:21:00.158Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:21:05.330Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:21:19.208Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:21:29.542Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:21:34.306Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:21:39.221Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:21:44.403Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:21:49.519Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:21:54.554Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:21:59.857Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:22:04.970Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:22:10.320Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:22:16.390Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:22:21.162Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:22:26.373Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:22:31.439Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:22:36.777Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:22:42.062Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:22:47.339Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:22:52.782Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:22:58.026Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:23:03.155Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:23:08.103Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:23:12.887Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:23:17.966Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:23:22.702Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:23:27.736Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:23:32.767Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:23:37.690Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:23:42.624Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:23:48.498Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:23:53.974Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:23:59.456Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:24:09.853Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:24:14.581Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:24:18.209Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:24:22.239Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:24:26.915Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:24:32.411Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:24:36.435Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:24:40.487Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:24:46.386Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:24:52.112Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:24:57.874Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:25:02.982Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:25:08.215Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:25:12.796Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:25:18.846Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:25:28.097Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:25:33.696Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:25:39.363Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:25:44.133Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:25:49.489Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:25:55.326Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:26:04.399Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:26:08.951Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:26:13.790Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:26:18.611Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:26:23.348Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:26:29.080Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:26:33.881Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:26:38.797Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:26:44.697Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:26:50.651Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:26:55.576Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:27:00.672Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:27:05.616Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:27:10.734Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:27:15.626Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:27:21.153Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:27:26.032Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:27:31.114Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:27:36.088Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:27:41.418Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:27:46.724Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:27:51.853Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:27:57.155Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:28:02.353Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:28:07.821Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:28:12.499Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:28:17.417Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:28:22.346Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:28:31.261Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:28:35.611Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:28:40.446Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:28:45.571Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:28:50.408Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:28:55.441Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:29:00.652Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:29:05.532Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:29:10.443Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:29:16.018Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:29:21.118Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:29:25.254Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:29:30.358Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:29:35.076Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:29:39.984Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:29:44.946Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:29:54.230Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:29:58.900Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:30:03.905Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:30:08.462Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:30:13.430Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:30:18.179Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:30:23.118Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:30:28.035Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:30:32.967Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:30:38.345Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:30:43.871Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:30:48.908Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:30:54.033Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:30:58.900Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:31:04.567Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:31:09.595Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:31:14.343Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:31:19.563Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:31:24.568Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:31:29.700Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:31:35.047Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:31:39.961Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:31:45.360Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:31:54.188Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:31:58.707Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:32:03.527Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:32:08.548Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:32:13.723Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:32:18.391Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:32:23.135Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:32:28.164Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:32:33.391Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:32:38.466Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:32:43.511Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:32:48.648Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:32:53.551Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:32:58.561Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:33:03.356Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:33:08.972Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:33:14.504Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:33:19.468Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:33:24.352Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:33:29.462Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:33:38.857Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:33:43.138Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:33:48.194Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:33:52.938Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:33:58.753Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:34:04.894Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:34:10.340Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:34:15.824Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:34:26.431Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:34:31.410Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:34:36.716Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:34:42.761Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:34:48.174Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:34:54.846Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:35:00.406Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:35:05.622Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:35:10.388Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:35:15.284Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:35:20.732Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:35:25.898Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:35:30.041Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:35:35.596Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:35:41.578Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:35:46.429Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:35:52.094Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:36:00.407Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:36:06.099Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:36:11.018Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:36:16.711Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:36:22.398Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:36:27.914Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:36:33.203Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:36:38.296Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:36:43.199Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:36:48.845Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:36:54.615Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:37:00.123Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:37:06.715Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:37:16.572Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:37:24.014Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:37:28.839Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:37:34.887Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:37:40.297Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:37:45.463Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:37:51.124Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:37:56.372Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:38:01.757Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:38:12.630Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:38:18.045Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:38:23.091Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:38:28.022Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:38:33.789Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:38:38.837Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:38:43.388Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:38:48.915Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:38:54.117Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:38:59.028Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:39:04.353Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:39:13.985Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:39:22.965Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:39:29.051Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:39:34.446Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:39:43.956Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:39:54.044Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:40:01.313Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:40:06.476Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:40:11.232Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T06:40:20.758Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ELOGIN",
        "originalError": {
            "message": "사용자 '********'이(가) 로그인하지 못했습니다.",
            "code": "ELOGIN"
        },
        "name": "ConnectionError"
    }
} 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:41:05.944Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:41:05.946Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:41:05.948Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:41:05.949Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:41:05.950Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:41:05.950Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:41:05.951Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:41:05.951Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:41:05.975Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:41:32.569Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:41:32.571Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:41:32.574Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:41:32.576Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:41:32.577Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:41:32.578Z] Initializing : Mysql handler doesn't set to use. 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:41:32.580Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:41:32.584Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:41:32.617Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:41:39.374Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:41:39.376Z] REQUEST PATH : /getData 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 104 | ANONYMOUS_FUNC - 2018-04-21T06:41:39.383Z] [ undefined,
  Request {
    domain: null,
    _events: {},
    _eventsCount: 0,
    _maxListeners: undefined,
    canceled: false,
    parent: 
     ConnectionPool {
       domain: null,
       _events: {},
       _eventsCount: 0,
       _maxListeners: undefined,
       config: 
        { user: 'usrCERND',
          password: 'usrIMSI^0730CERND',
          server: 'DIOPRDB01',
          database: 'front2007',
          port: 1433,
          options: {},
          stream: false,
          parseJSON: false },
       _connected: true,
       _connecting: false,
       pool: 
        Pool {
          domain: null,
          _events: 
           { factoryCreateError: [Function: bound emit],
             factoryDestroyError: [Function: bound emit] },
          _eventsCount: 2,
          _maxListeners: undefined,
          _config: 
           PoolOptions {
             fifo: true,
             priorityRange: 1,
             testOnBorrow: true,
             testOnReturn: false,
             autostart: true,
             acquireTimeoutMillis: 15000,
             max: 10,
             min: 0,
             evictionRunIntervalMillis: 1000,
             numTestsPerEvictionRun: 3,
             softIdleTimeoutMillis: -1,
             idleTimeoutMillis: 30000,
             Promise: [Function: Promise] },
          _Promise: [Function: Promise],
          _factory: 
           { create: [Function: bound _poolCreate],
             validate: [Function: bound _poolValidate],
             destroy: [Function: bound _poolDestroy] },
          _draining: false,
          _started: true,
          _waitingClientsQueue: 
           PriorityQueue {
             _size: 1,
             _slots: 
              [ Queue {
                  _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
          _factoryCreateOperations: Set {},
          _factoryDestroyOperations: Set {},
          _availableObjects: 
           Deque {
             _list: DoublyLinkedList { head: null, tail: null, length: 0 } },
          _testOnBorrowResources: Set {},
          _testOnReturnResources: Set {},
          _validationOperations: Set {},
          _allObjects: Set {},
          _resourceLoans: Map {},
          _evictionIterator: 
           DequeIterator {
             _list: DoublyLinkedList { head: null, tail: null, length: 0 },
             _direction: 'next',
             _startPosition: 'head',
             _started: false,
             _cursor: null,
             _done: false },
          _evictor: DefaultEvictor {},
          _scheduledEviction: 
           Timeout {
             _called: false,
             _idleTimeout: 1000,
             _idlePrev: 
              TimersList {
                _idleNext: [Circular],
                _idlePrev: [Circular],
                _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
                _unrefed: false,
                msecs: 1000 },
             _idleNext: 
              TimersList {
                _idleNext: [Circular],
                _idlePrev: [Circular],
                _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
                _unrefed: false,
                msecs: 1000 },
             _idleStart: 8296,
             _onTimeout: [Function],
             _timerArgs: undefined,
             _repeat: null } } },
    parameters: {} } ] 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:41:39.408Z] Error Occured when [/getData] called.
connection.query is not a function
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:81:15
	Object.executeQuery (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:79:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:37:16
	Object.exports.control (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:3:9)
	executeController (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:166:57)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:26:11
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:42:44.811Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:42:44.813Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:42:44.815Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:42:44.815Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:42:44.815Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:42:44.816Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:42:44.816Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:42:44.817Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:42:44.850Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:42:46.005Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:42:46.006Z] REQUEST PATH : /getData 
[ERROR] - [\core\dispatcher\context_dispatcher.js : 109 | ANONYMOUS_FUNC - 2018-04-21T06:42:46.016Z] _pool.getConnection is not a function
C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:39:10,Object.getConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:36:9),C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:118:17,getMysqlConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:116:9),C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:97:18,getConnections (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:94:9),C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:16:20,Object.exports.dispatching (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:2:10),app.get (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\express_was.js:93:23),Layer.handle [as handle_request] (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\express\lib\router\layer.js:95:5)
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:42:46.020Z] Error Occured when [/getData] called.
_pool.getConnection is not a function
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:39:10
	Object.getConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:36:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:118:17
	getMysqlConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:116:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:97:18
	getConnections (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:94:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:16:20
	Object.exports.dispatching (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:2:10)
	app.get (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\express_was.js:93:23)
	Layer.handle [as handle_request] (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\express\lib\router\layer.js:95:5)

[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:42:47.646Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:42:47.646Z] REQUEST PATH : /getData 
[ERROR] - [\core\dispatcher\context_dispatcher.js : 109 | ANONYMOUS_FUNC - 2018-04-21T06:42:47.647Z] _pool.getConnection is not a function
C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:39:10,Object.getConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:36:9),C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:118:17,getMysqlConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:116:9),C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:97:18,getConnections (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:94:9),C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:16:20,Object.exports.dispatching (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:2:10),app.get (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\express_was.js:93:23),Layer.handle [as handle_request] (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\express\lib\router\layer.js:95:5)
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:42:47.649Z] Error Occured when [/getData] called.
_pool.getConnection is not a function
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:39:10
	Object.getConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:36:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:118:17
	getMysqlConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:116:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:97:18
	getConnections (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:94:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:16:20
	Object.exports.dispatching (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:2:10)
	app.get (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\express_was.js:93:23)
	Layer.handle [as handle_request] (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\express\lib\router\layer.js:95:5)

[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:42:48.239Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:42:48.239Z] REQUEST PATH : /getData 
[ERROR] - [\core\dispatcher\context_dispatcher.js : 109 | ANONYMOUS_FUNC - 2018-04-21T06:42:48.242Z] _pool.getConnection is not a function
C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:39:10,Object.getConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:36:9),C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:118:17,getMysqlConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:116:9),C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:97:18,getConnections (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:94:9),C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:16:20,Object.exports.dispatching (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:2:10),app.get (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\express_was.js:93:23),Layer.handle [as handle_request] (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\express\lib\router\layer.js:95:5)
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:42:48.244Z] Error Occured when [/getData] called.
_pool.getConnection is not a function
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:39:10
	Object.getConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:36:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:118:17
	getMysqlConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:116:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:97:18
	getConnections (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:94:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:16:20
	Object.exports.dispatching (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:2:10)
	app.get (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\express_was.js:93:23)
	Layer.handle [as handle_request] (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\express\lib\router\layer.js:95:5)

[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:42:58.798Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:42:58.799Z] REQUEST PATH : / 
[ERROR] - [\core\dispatcher\context_dispatcher.js : 109 | ANONYMOUS_FUNC - 2018-04-21T06:42:58.804Z] _pool.getConnection is not a function
C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:39:10,Object.getConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:36:9),C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:118:17,getMysqlConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:116:9),C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:97:18,getConnections (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:94:9),C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:16:20,Object.exports.dispatching (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:2:10),app.get (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\express_was.js:93:23),Layer.handle [as handle_request] (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\express\lib\router\layer.js:95:5)
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:42:58.807Z] Error Occured when [/] called.
_pool.getConnection is not a function
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:39:10
	Object.getConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:36:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:118:17
	getMysqlConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:116:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:97:18
	getConnections (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:94:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:16:20
	Object.exports.dispatching (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:2:10)
	app.get (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\express_was.js:93:23)
	Layer.handle [as handle_request] (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\node_modules\express\lib\router\layer.js:95:5)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:44:36.862Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:44:36.864Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:44:36.865Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:44:36.867Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:44:36.868Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:44:36.869Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:44:36.870Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:44:36.871Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:44:36.901Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:44:43.257Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:44:43.262Z] REQUEST PATH : / 
[ERROR] - [\core\dispatcher\context_dispatcher.js : 109 | ANONYMOUS_FUNC - 2018-04-21T06:44:44.280Z] connect ECONNREFUSED 127.0.0.1:3306
Object.exports._errnoException (util.js:1026:11),exports._exceptionWithHostPort (util.js:1049:20),TCPConnectWrap.afterConnect [as oncomplete] (net.js:1085:14)
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:44:44.281Z] Error Occured when [/] called.
connect ECONNREFUSED 127.0.0.1:3306
	Object.exports._errnoException (util.js:1026:11)
	exports._exceptionWithHostPort (util.js:1049:20)
	TCPConnectWrap.afterConnect [as oncomplete] (net.js:1085:14)

[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:44:56.651Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:44:56.652Z] REQUEST PATH : / 
[ERROR] - [\core\dispatcher\context_dispatcher.js : 109 | ANONYMOUS_FUNC - 2018-04-21T06:44:57.657Z] connect ECONNREFUSED 127.0.0.1:3306
Object.exports._errnoException (util.js:1026:11),exports._exceptionWithHostPort (util.js:1049:20),TCPConnectWrap.afterConnect [as oncomplete] (net.js:1085:14)
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:44:57.659Z] Error Occured when [/] called.
connect ECONNREFUSED 127.0.0.1:3306
	Object.exports._errnoException (util.js:1026:11)
	exports._exceptionWithHostPort (util.js:1049:20)
	TCPConnectWrap.afterConnect [as oncomplete] (net.js:1085:14)

[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:45:07.600Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:45:07.603Z] REQUEST PATH : / 
[ERROR] - [\core\dispatcher\context_dispatcher.js : 109 | ANONYMOUS_FUNC - 2018-04-21T06:45:08.610Z] connect ECONNREFUSED 127.0.0.1:3306
Object.exports._errnoException (util.js:1026:11),exports._exceptionWithHostPort (util.js:1049:20),TCPConnectWrap.afterConnect [as oncomplete] (net.js:1085:14)
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:45:08.612Z] Error Occured when [/] called.
connect ECONNREFUSED 127.0.0.1:3306
	Object.exports._errnoException (util.js:1026:11)
	exports._exceptionWithHostPort (util.js:1049:20)
	TCPConnectWrap.afterConnect [as oncomplete] (net.js:1085:14)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:47:19.309Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:47:19.311Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:47:19.313Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:47:19.314Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:47:19.314Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:47:19.315Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:47:19.315Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:47:19.316Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:47:19.345Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:47:21.151Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:47:21.158Z] REQUEST PATH : / 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 104 | ANONYMOUS_FUNC - 2018-04-21T06:47:21.686Z] [ PoolConnection {
    domain: null,
    _events: { end: [Function: _removeFromPool], error: [Function] },
    _eventsCount: 2,
    _maxListeners: undefined,
    config: 
     ConnectionConfig {
       host: '104.199.217.31',
       port: 3306,
       localAddress: undefined,
       socketPath: undefined,
       user: 'root',
       password: '123qwer@',
       database: 'summer-mvc',
       connectTimeout: 10000,
       insecureAuth: false,
       supportBigNumbers: false,
       bigNumberStrings: false,
       dateStrings: false,
       debug: undefined,
       trace: true,
       stringifyObjects: false,
       timezone: 'local',
       flags: '',
       queryFormat: undefined,
       pool: 
        Pool {
          domain: null,
          _events: {},
          _eventsCount: 0,
          _maxListeners: undefined,
          config: 
           PoolConfig {
             acquireTimeout: 10000,
             connectionConfig: 
              ConnectionConfig {
                host: '104.199.217.31',
                port: 3306,
                localAddress: undefined,
                socketPath: undefined,
                user: 'root',
                password: '123qwer@',
                database: 'summer-mvc',
                connectTimeout: 10000,
                insecureAuth: false,
                supportBigNumbers: false,
                bigNumberStrings: false,
                dateStrings: false,
                debug: undefined,
                trace: true,
                stringifyObjects: false,
                timezone: 'local',
                flags: '',
                queryFormat: undefined,
                pool: [Circular],
                ssl: false,
                multipleStatements: false,
                typeCast: true,
                maxPacketSize: 0,
                charsetNumber: 33,
                clientFlags: 455631 },
             waitForConnections: true,
             connectionLimit: 100,
             queueLimit: 0 },
          _acquiringConnections: [],
          _allConnections: [ [Circular] ],
          _freeConnections: [],
          _connectionQueue: [],
          _closed: false },
       ssl: false,
       multipleStatements: false,
       typeCast: true,
       maxPacketSize: 0,
       charsetNumber: 33,
       clientFlags: 455631,
       protocol41: true },
    _socket: 
     Socket {
       connecting: false,
       _hadError: false,
       _handle: 
        TCP {
          bytesRead: 106,
          _externalStream: {},
          fd: -1,
          reading: true,
          owner: [Circular],
          onread: [Function: onread],
          onconnection: null,
          writeQueueSize: 0 },
       _parent: null,
       _host: null,
       _readableState: 
        ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          defaultEncoding: 'utf8',
          ranOut: false,
          awaitDrain: 0,
          readingMore: false,
          decoder: null,
          encoding: null },
       readable: true,
       domain: null,
       _events: 
        { end: [ { [Function: g] listener: [Function: onend] }, [Function] ],
          finish: [Function: onSocketFinish],
          _socketEnd: [Function: onSocketEnd],
          data: [Function],
          error: [Function: bound ],
          connect: [ [Function: bound ] ] },
       _eventsCount: 6,
       _maxListeners: undefined,
       _writableState: 
        WritableState {
          objectMode: false,
          highWaterMark: 16384,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function],
          writecb: null,
          writelen: 0,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 0,
          prefinished: false,
          errorEmitted: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
       writable: true,
       allowHalfOpen: false,
       destroyed: false,
       _bytesDispatched: 73,
       _sockname: null,
       _pendingData: null,
       _pendingEncoding: '',
       server: null,
       _server: null,
       _idleTimeout: -1,
       _idleNext: null,
       _idlePrev: null,
       _idleStart: 5608,
       read: [Function],
       _consuming: true },
    _protocol: 
     Protocol {
       domain: null,
       _events: 
        { data: [Function],
          end: [ [Function], [Function: bound ] ],
          handshake: [Function: bound _handleProtocolHandshake],
          unhandledError: [Function: bound ],
          drain: [Function: bound ],
          enqueue: [Function: bound _handleProtocolEnqueue] },
       _eventsCount: 6,
       _maxListeners: undefined,
       readable: true,
       writable: true,
       _config: 
        ConnectionConfig {
          host: '104.199.217.31',
          port: 3306,
          localAddress: undefined,
          socketPath: undefined,
          user: 'root',
          password: '123qwer@',
          database: 'summer-mvc',
          connectTimeout: 10000,
          insecureAuth: false,
          supportBigNumbers: false,
          bigNumberStrings: false,
          dateStrings: false,
          debug: undefined,
          trace: true,
          stringifyObjects: false,
          timezone: 'local',
          flags: '',
          queryFormat: undefined,
          pool: 
           Pool {
             domain: null,
             _events: {},
             _eventsCount: 0,
             _maxListeners: undefined,
             config: 
              PoolConfig {
                acquireTimeout: 10000,
                connectionConfig: 
                 ConnectionConfig {
                   host: '104.199.217.31',
                   port: 3306,
                   localAddress: undefined,
                   socketPath: undefined,
                   user: 'root',
                   password: '123qwer@',
                   database: 'summer-mvc',
                   connectTimeout: 10000,
                   insecureAuth: false,
                   supportBigNumbers: false,
                   bigNumberStrings: false,
                   dateStrings: false,
                   debug: undefined,
                   trace: true,
                   stringifyObjects: false,
                   timezone: 'local',
                   flags: '',
                   queryFormat: undefined,
                   pool: [Circular],
                   ssl: false,
                   multipleStatements: false,
                   typeCast: true,
                   maxPacketSize: 0,
                   charsetNumber: 33,
                   clientFlags: 455631 },
                waitForConnections: true,
                connectionLimit: 100,
                queueLimit: 0 },
             _acquiringConnections: [],
             _allConnections: [ [Circular] ],
             _freeConnections: [],
             _connectionQueue: [],
             _closed: false },
          ssl: false,
          multipleStatements: false,
          typeCast: true,
          maxPacketSize: 0,
          charsetNumber: 33,
          clientFlags: 455631,
          protocol41: true },
       _connection: [Circular],
       _callback: null,
       _fatalError: null,
       _quitSequence: null,
       _handshake: true,
       _handshaked: true,
       _ended: false,
       _destroyed: false,
       _queue: [],
       _handshakeInitializationPacket: 
        HandshakeInitializationPacket {
          protocolVersion: 10,
          serverVersion: '5.5.59-0ubuntu0.14.04.1',
          threadId: 82762,
          scrambleBuff1: <Buffer 30 3b 75 5e 55 70 55 38>,
          filler1: <Buffer 00>,
          serverCapabilities1: 63487,
          serverLanguage: 192,
          serverStatus: 2,
          serverCapabilities2: 32783,
          scrambleLength: 21,
          filler2: <Buffer 00 00 00 00 00 00 00 00 00 00>,
          scrambleBuff2: <Buffer 56 2b 70 75 7c 30 73 75 72 5c 55 76>,
          filler3: <Buffer 00>,
          pluginData: 'mysql_native_password',
          protocol41: true },
       _parser: 
        Parser {
          _supportBigNumbers: false,
          _buffer: <Buffer 07 00 00 02 00 00 00 02 00 00 00>,
          _nextBuffers: BufferList { bufs: [], size: 0 },
          _longPacketBuffers: BufferList { bufs: [], size: 0 },
          _offset: 11,
          _packetEnd: null,
          _packetHeader: null,
          _packetOffset: null,
          _onError: [Function: bound handleParserError],
          _onPacket: [Function: bound ],
          _nextPacketNumber: 3,
          _encoding: 'utf-8',
          _paused: false } },
    _connectCalled: true,
    state: 'authenticated',
    threadId: 82762,
    _pool: 
     Pool {
       domain: null,
       _events: {},
       _eventsCount: 0,
       _maxListeners: undefined,
       config: 
        PoolConfig {
          acquireTimeout: 10000,
          connectionConfig: 
           ConnectionConfig {
             host: '104.199.217.31',
             port: 3306,
             localAddress: undefined,
             socketPath: undefined,
             user: 'root',
             password: '123qwer@',
             database: 'summer-mvc',
             connectTimeout: 10000,
             insecureAuth: false,
             supportBigNumbers: false,
             bigNumberStrings: false,
             dateStrings: false,
             debug: undefined,
             trace: true,
             stringifyObjects: false,
             timezone: 'local',
             flags: '',
             queryFormat: undefined,
             pool: [Circular],
             ssl: false,
             multipleStatements: false,
             typeCast: true,
             maxPacketSize: 0,
             charsetNumber: 33,
             clientFlags: 455631 },
          waitForConnections: true,
          connectionLimit: 100,
          queueLimit: 0 },
       _acquiringConnections: [],
       _allConnections: [ [Circular] ],
       _freeConnections: [],
       _connectionQueue: [],
       _closed: false } },
  Request {
    domain: null,
    _events: {},
    _eventsCount: 0,
    _maxListeners: undefined,
    canceled: false,
    parent: 
     ConnectionPool {
       domain: null,
       _events: {},
       _eventsCount: 0,
       _maxListeners: undefined,
       config: 
        { user: 'usrCERND',
          password: 'usrIMSI^0730CERND',
          server: 'DIOPRDB01',
          database: 'front2007',
          port: 1433,
          options: {},
          stream: false,
          parseJSON: false },
       _connected: true,
       _connecting: false,
       pool: 
        Pool {
          domain: null,
          _events: 
           { factoryCreateError: [Function: bound emit],
             factoryDestroyError: [Function: bound emit] },
          _eventsCount: 2,
          _maxListeners: undefined,
          _config: 
           PoolOptions {
             fifo: true,
             priorityRange: 1,
             testOnBorrow: true,
             testOnReturn: false,
             autostart: true,
             acquireTimeoutMillis: 15000,
             max: 10,
             min: 0,
             evictionRunIntervalMillis: 1000,
             numTestsPerEvictionRun: 3,
             softIdleTimeoutMillis: -1,
             idleTimeoutMillis: 30000,
             Promise: [Function: Promise] },
          _Promise: [Function: Promise],
          _factory: 
           { create: [Function: bound _poolCreate],
             validate: [Function: bound _poolValidate],
             destroy: [Function: bound _poolDestroy] },
          _draining: false,
          _started: true,
          _waitingClientsQueue: 
           PriorityQueue {
             _size: 1,
             _slots: 
              [ Queue {
                  _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
          _factoryCreateOperations: Set {},
          _factoryDestroyOperations: Set {},
          _availableObjects: 
           Deque {
             _list: DoublyLinkedList { head: null, tail: null, length: 0 } },
          _testOnBorrowResources: Set {},
          _testOnReturnResources: Set {},
          _validationOperations: Set {},
          _allObjects: Set {},
          _resourceLoans: Map {},
          _evictionIterator: 
           DequeIterator {
             _list: DoublyLinkedList { head: null, tail: null, length: 0 },
             _direction: 'next',
             _startPosition: 'head',
             _started: false,
             _cursor: null,
             _done: false },
          _evictor: DefaultEvictor {},
          _scheduledEviction: 
           Timeout {
             _called: false,
             _idleTimeout: 1000,
             _idlePrev: 
              TimersList {
                _idleNext: [Circular],
                _idlePrev: [Circular],
                _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
                _unrefed: false,
                msecs: 1000 },
             _idleNext: 
              TimersList {
                _idleNext: [Circular],
                _idlePrev: [Circular],
                _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
                _unrefed: false,
                msecs: 1000 },
             _idleStart: 5667,
             _onTimeout: [Function],
             _timerArgs: undefined,
             _repeat: null } } },
    parameters: {} } ] 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:47:21.788Z] Error Occured when [/] called.
_connection.destroy is not a function
	Object.releaseConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:147:14)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:155:27
	releaseConnection (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:152:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:30:9
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:47:47.094Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:47:47.096Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:47:47.098Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:47:47.100Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:47:47.101Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:47:47.101Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:47:47.102Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:47:47.103Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:47:47.128Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:48:29.035Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:48:29.038Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:48:29.040Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:48:29.040Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:48:29.041Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:48:29.042Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:48:29.042Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:48:29.043Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:48:29.075Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:00.442Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:00.444Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:00.445Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:00.445Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:00.446Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:00.446Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:00.447Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:00.447Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:49:00.472Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:19.664Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:19.666Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:19.667Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:19.668Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:19.669Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:19.669Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:19.670Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:19.670Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:49:19.696Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:26.053Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:26.054Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:26.055Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:26.056Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:26.057Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:26.057Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:26.058Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:26.058Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:49:26.091Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:37.152Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:37.154Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:37.156Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:37.156Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:37.157Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:37.157Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:37.158Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:37.158Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:49:37.191Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:52.836Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:52.838Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:52.839Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:52.840Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:52.840Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:52.841Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:52.842Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:49:52.843Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:49:52.871Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:50:01.424Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:50:01.426Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:50:01.427Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:50:01.428Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:50:01.428Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:50:01.429Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:50:01.429Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:50:01.430Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:50:01.464Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:51:18.115Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:51:18.117Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:51:18.118Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:51:18.119Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:51:18.120Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:51:18.121Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:51:18.121Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:51:18.122Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:51:18.157Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:13.951Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:13.953Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:13.954Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:13.955Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:13.956Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:13.956Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:13.957Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:13.957Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:52:13.986Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:27.216Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:27.218Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:27.220Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:27.220Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:27.221Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:27.221Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:27.222Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:27.222Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:52:27.269Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:52:30.279Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:52:30.281Z] REQUEST PATH : / 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:52:30.495Z] Error Occured when [/] called.
releaseConnection is not defined
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:30:9
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:48.225Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:48.227Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:48.228Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:48.229Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:48.229Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:48.230Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:48.231Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:52:48.231Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:52:48.261Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:52:49.266Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:52:49.268Z] REQUEST PATH : / 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 156 | ANONYMOUS_FUNC - 2018-04-21T06:52:49.461Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:53:12.798Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:53:12.800Z] REQUEST PATH : /getData 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:53:13.020Z] Error Occured when [/getData] called.
connection.query is not a function
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:81:15
	Object.executeQuery (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:79:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:37:16
	Object.exports.control (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:3:9)
	executeController (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:199:57)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:26:11
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:54:22.584Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:54:22.586Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:54:22.588Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:54:22.588Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:54:22.589Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:54:22.590Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:54:22.591Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:54:22.591Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:54:22.627Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:54:25.376Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:54:25.376Z] REQUEST PATH : /getData 
[ERROR] - [\core\dispatcher\context_dispatcher.js : 110 | ANONYMOUS_FUNC - 2018-04-21T06:54:25.566Z] connection is not defined
C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:106:18,process._tickCallback (internal/process/next_tick.js:103:7)
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:54:25.568Z] Error Occured when [/getData] called.
connection is not defined
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:106:18
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:54:50.950Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:54:50.952Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:54:50.953Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:54:50.954Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:54:50.955Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:54:50.955Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:54:50.956Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:54:50.957Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:54:50.988Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:54:51.913Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:54:51.915Z] REQUEST PATH : /getData 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 106 | ANONYMOUS_FUNC - 2018-04-21T06:54:52.130Z] undefined 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:54:52.135Z] Error Occured when [/getData] called.
connection.query is not a function
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:81:15
	Object.executeQuery (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:79:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:37:16
	Object.exports.control (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:3:9)
	executeController (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:200:57)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:26:11
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:55:27.963Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:55:27.966Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:55:27.967Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:55:27.968Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:55:27.968Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:55:27.969Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:55:27.970Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T06:55:27.970Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T06:55:28.001Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T06:55:28.830Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T06:55:28.832Z] REQUEST PATH : /getData 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 106 | ANONYMOUS_FUNC - 2018-04-21T06:55:29.047Z] PoolConnection {
  domain: null,
  _events: { end: [Function: _removeFromPool], error: [Function] },
  _eventsCount: 2,
  _maxListeners: undefined,
  config: 
   ConnectionConfig {
     host: '104.199.217.31',
     port: 3306,
     localAddress: undefined,
     socketPath: undefined,
     user: 'root',
     password: '123qwer@',
     database: 'summer-mvc',
     connectTimeout: 10000,
     insecureAuth: false,
     supportBigNumbers: false,
     bigNumberStrings: false,
     dateStrings: false,
     debug: undefined,
     trace: true,
     stringifyObjects: false,
     timezone: 'local',
     flags: '',
     queryFormat: undefined,
     pool: 
      Pool {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        config: 
         PoolConfig {
           acquireTimeout: 10000,
           connectionConfig: 
            ConnectionConfig {
              host: '104.199.217.31',
              port: 3306,
              localAddress: undefined,
              socketPath: undefined,
              user: 'root',
              password: '123qwer@',
              database: 'summer-mvc',
              connectTimeout: 10000,
              insecureAuth: false,
              supportBigNumbers: false,
              bigNumberStrings: false,
              dateStrings: false,
              debug: undefined,
              trace: true,
              stringifyObjects: false,
              timezone: 'local',
              flags: '',
              queryFormat: undefined,
              pool: [Circular],
              ssl: false,
              multipleStatements: false,
              typeCast: true,
              maxPacketSize: 0,
              charsetNumber: 33,
              clientFlags: 455631 },
           waitForConnections: true,
           connectionLimit: 100,
           queueLimit: 0 },
        _acquiringConnections: [],
        _allConnections: [ [Circular] ],
        _freeConnections: [],
        _connectionQueue: [],
        _closed: false },
     ssl: false,
     multipleStatements: false,
     typeCast: true,
     maxPacketSize: 0,
     charsetNumber: 33,
     clientFlags: 455631,
     protocol41: true },
  _socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 106,
        _externalStream: {},
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [ { [Function: g] listener: [Function: onend] }, [Function] ],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        data: [Function],
        error: [Function: bound ],
        connect: [ [Function: bound ] ] },
     _eventsCount: 6,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
     writable: true,
     allowHalfOpen: false,
     destroyed: false,
     _bytesDispatched: 73,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: null,
     _server: null,
     _idleTimeout: -1,
     _idleNext: null,
     _idlePrev: null,
     _idleStart: 3638,
     read: [Function],
     _consuming: true },
  _protocol: 
   Protocol {
     domain: null,
     _events: 
      { data: [Function],
        end: [ [Function], [Function: bound ] ],
        handshake: [Function: bound _handleProtocolHandshake],
        unhandledError: [Function: bound ],
        drain: [Function: bound ],
        enqueue: [Function: bound _handleProtocolEnqueue] },
     _eventsCount: 6,
     _maxListeners: undefined,
     readable: true,
     writable: true,
     _config: 
      ConnectionConfig {
        host: '104.199.217.31',
        port: 3306,
        localAddress: undefined,
        socketPath: undefined,
        user: 'root',
        password: '123qwer@',
        database: 'summer-mvc',
        connectTimeout: 10000,
        insecureAuth: false,
        supportBigNumbers: false,
        bigNumberStrings: false,
        dateStrings: false,
        debug: undefined,
        trace: true,
        stringifyObjects: false,
        timezone: 'local',
        flags: '',
        queryFormat: undefined,
        pool: 
         Pool {
           domain: null,
           _events: {},
           _eventsCount: 0,
           _maxListeners: undefined,
           config: 
            PoolConfig {
              acquireTimeout: 10000,
              connectionConfig: 
               ConnectionConfig {
                 host: '104.199.217.31',
                 port: 3306,
                 localAddress: undefined,
                 socketPath: undefined,
                 user: 'root',
                 password: '123qwer@',
                 database: 'summer-mvc',
                 connectTimeout: 10000,
                 insecureAuth: false,
                 supportBigNumbers: false,
                 bigNumberStrings: false,
                 dateStrings: false,
                 debug: undefined,
                 trace: true,
                 stringifyObjects: false,
                 timezone: 'local',
                 flags: '',
                 queryFormat: undefined,
                 pool: [Circular],
                 ssl: false,
                 multipleStatements: false,
                 typeCast: true,
                 maxPacketSize: 0,
                 charsetNumber: 33,
                 clientFlags: 455631 },
              waitForConnections: true,
              connectionLimit: 100,
              queueLimit: 0 },
           _acquiringConnections: [],
           _allConnections: [ [Circular] ],
           _freeConnections: [],
           _connectionQueue: [],
           _closed: false },
        ssl: false,
        multipleStatements: false,
        typeCast: true,
        maxPacketSize: 0,
        charsetNumber: 33,
        clientFlags: 455631,
        protocol41: true },
     _connection: [Circular],
     _callback: null,
     _fatalError: null,
     _quitSequence: null,
     _handshake: true,
     _handshaked: true,
     _ended: false,
     _destroyed: false,
     _queue: [],
     _handshakeInitializationPacket: 
      HandshakeInitializationPacket {
        protocolVersion: 10,
        serverVersion: '5.5.59-0ubuntu0.14.04.1',
        threadId: 82768,
        scrambleBuff1: <Buffer 33 5e 5f 45 79 52 6e 52>,
        filler1: <Buffer 00>,
        serverCapabilities1: 63487,
        serverLanguage: 192,
        serverStatus: 2,
        serverCapabilities2: 32783,
        scrambleLength: 21,
        filler2: <Buffer 00 00 00 00 00 00 00 00 00 00>,
        scrambleBuff2: <Buffer 31 3d 7b 76 5e 55 6f 50 24 5c 26 47>,
        filler3: <Buffer 00>,
        pluginData: 'mysql_native_password',
        protocol41: true },
     _parser: 
      Parser {
        _supportBigNumbers: false,
        _buffer: <Buffer 07 00 00 02 00 00 00 02 00 00 00>,
        _nextBuffers: BufferList { bufs: [], size: 0 },
        _longPacketBuffers: BufferList { bufs: [], size: 0 },
        _offset: 11,
        _packetEnd: null,
        _packetHeader: null,
        _packetOffset: null,
        _onError: [Function: bound handleParserError],
        _onPacket: [Function: bound ],
        _nextPacketNumber: 3,
        _encoding: 'utf-8',
        _paused: false } },
  _connectCalled: true,
  state: 'authenticated',
  threadId: 82768,
  _pool: 
   Pool {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     config: 
      PoolConfig {
        acquireTimeout: 10000,
        connectionConfig: 
         ConnectionConfig {
           host: '104.199.217.31',
           port: 3306,
           localAddress: undefined,
           socketPath: undefined,
           user: 'root',
           password: '123qwer@',
           database: 'summer-mvc',
           connectTimeout: 10000,
           insecureAuth: false,
           supportBigNumbers: false,
           bigNumberStrings: false,
           dateStrings: false,
           debug: undefined,
           trace: true,
           stringifyObjects: false,
           timezone: 'local',
           flags: '',
           queryFormat: undefined,
           pool: [Circular],
           ssl: false,
           multipleStatements: false,
           typeCast: true,
           maxPacketSize: 0,
           charsetNumber: 33,
           clientFlags: 455631 },
        waitForConnections: true,
        connectionLimit: 100,
        queueLimit: 0 },
     _acquiringConnections: [],
     _allConnections: [ [Circular] ],
     _freeConnections: [],
     _connectionQueue: [],
     _closed: false } } 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 107 | ANONYMOUS_FUNC - 2018-04-21T06:55:29.134Z] ---------------------- 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 108 | ANONYMOUS_FUNC - 2018-04-21T06:55:29.145Z] Request {
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  canceled: false,
  parent: 
   ConnectionPool {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     config: 
      { user: 'usrCERND',
        password: 'usrIMSI^0730CERND',
        server: 'DIOPRDB01',
        database: 'front2007',
        port: 1433,
        options: {},
        stream: false,
        parseJSON: false },
     _connected: true,
     _connecting: false,
     pool: 
      Pool {
        domain: null,
        _events: 
         { factoryCreateError: [Function: bound emit],
           factoryDestroyError: [Function: bound emit] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _config: 
         PoolOptions {
           fifo: true,
           priorityRange: 1,
           testOnBorrow: true,
           testOnReturn: false,
           autostart: true,
           acquireTimeoutMillis: 15000,
           max: 10,
           min: 0,
           evictionRunIntervalMillis: 1000,
           numTestsPerEvictionRun: 3,
           softIdleTimeoutMillis: -1,
           idleTimeoutMillis: 30000,
           Promise: [Function: Promise] },
        _Promise: [Function: Promise],
        _factory: 
         { create: [Function: bound _poolCreate],
           validate: [Function: bound _poolValidate],
           destroy: [Function: bound _poolDestroy] },
        _draining: false,
        _started: true,
        _waitingClientsQueue: 
         PriorityQueue {
           _size: 1,
           _slots: 
            [ Queue {
                _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
        _factoryCreateOperations: Set {},
        _factoryDestroyOperations: Set {},
        _availableObjects: 
         Deque {
           _list: DoublyLinkedList { head: null, tail: null, length: 0 } },
        _testOnBorrowResources: Set {},
        _testOnReturnResources: Set {},
        _validationOperations: Set {},
        _allObjects: Set {},
        _resourceLoans: Map {},
        _evictionIterator: 
         DequeIterator {
           _list: DoublyLinkedList { head: null, tail: null, length: 0 },
           _direction: 'next',
           _startPosition: 'head',
           _started: false,
           _cursor: null,
           _done: false },
        _evictor: DefaultEvictor {},
        _scheduledEviction: 
         Timeout {
           _called: false,
           _idleTimeout: 1000,
           _idlePrev: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: false,
              msecs: 1000 },
           _idleNext: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: false,
              msecs: 1000 },
           _idleStart: 3684,
           _onTimeout: [Function],
           _timerArgs: undefined,
           _repeat: null } } },
  parameters: {} } 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T06:55:29.168Z] Error Occured when [/getData] called.
connection.query is not a function
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:81:15
	Object.executeQuery (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:79:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:37:16
	Object.exports.control (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:3:9)
	executeController (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:203:57)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:26:11
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:06:24.819Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:06:24.821Z] REQUEST PATH : / 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 106 | ANONYMOUS_FUNC - 2018-04-21T07:06:25.060Z] PoolConnection {
  domain: null,
  _events: { end: [Function: _removeFromPool], error: [Function] },
  _eventsCount: 2,
  _maxListeners: undefined,
  config: 
   ConnectionConfig {
     host: '104.199.217.31',
     port: 3306,
     localAddress: undefined,
     socketPath: undefined,
     user: 'root',
     password: '123qwer@',
     database: 'summer-mvc',
     connectTimeout: 10000,
     insecureAuth: false,
     supportBigNumbers: false,
     bigNumberStrings: false,
     dateStrings: false,
     debug: undefined,
     trace: true,
     stringifyObjects: false,
     timezone: 'local',
     flags: '',
     queryFormat: undefined,
     pool: 
      Pool {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        config: 
         PoolConfig {
           acquireTimeout: 10000,
           connectionConfig: 
            ConnectionConfig {
              host: '104.199.217.31',
              port: 3306,
              localAddress: undefined,
              socketPath: undefined,
              user: 'root',
              password: '123qwer@',
              database: 'summer-mvc',
              connectTimeout: 10000,
              insecureAuth: false,
              supportBigNumbers: false,
              bigNumberStrings: false,
              dateStrings: false,
              debug: undefined,
              trace: true,
              stringifyObjects: false,
              timezone: 'local',
              flags: '',
              queryFormat: undefined,
              pool: [Circular],
              ssl: false,
              multipleStatements: false,
              typeCast: true,
              maxPacketSize: 0,
              charsetNumber: 33,
              clientFlags: 455631 },
           waitForConnections: true,
           connectionLimit: 100,
           queueLimit: 0 },
        _acquiringConnections: [],
        _allConnections: 
         [ PoolConnection {
             domain: null,
             _events: { end: [Function: _removeFromPool], error: [Function] },
             _eventsCount: 2,
             _maxListeners: undefined,
             config: 
              ConnectionConfig {
                host: '104.199.217.31',
                port: 3306,
                localAddress: undefined,
                socketPath: undefined,
                user: 'root',
                password: '123qwer@',
                database: 'summer-mvc',
                connectTimeout: 10000,
                insecureAuth: false,
                supportBigNumbers: false,
                bigNumberStrings: false,
                dateStrings: false,
                debug: undefined,
                trace: true,
                stringifyObjects: false,
                timezone: 'local',
                flags: '',
                queryFormat: undefined,
                pool: [Circular],
                ssl: false,
                multipleStatements: false,
                typeCast: true,
                maxPacketSize: 0,
                charsetNumber: 33,
                clientFlags: 455631,
                protocol41: true },
             _socket: 
              Socket {
                connecting: false,
                _hadError: false,
                _handle: 
                 TCP {
                   bytesRead: 106,
                   _externalStream: {},
                   fd: -1,
                   reading: true,
                   owner: [Circular],
                   onread: [Function: onread],
                   onconnection: null,
                   writeQueueSize: 0 },
                _parent: null,
                _host: null,
                _readableState: 
                 ReadableState {
                   objectMode: false,
                   highWaterMark: 16384,
                   buffer: BufferList { head: null, tail: null, length: 0 },
                   length: 0,
                   pipes: null,
                   pipesCount: 0,
                   flowing: true,
                   ended: false,
                   endEmitted: false,
                   reading: true,
                   sync: false,
                   needReadable: true,
                   emittedReadable: false,
                   readableListening: false,
                   resumeScheduled: false,
                   defaultEncoding: 'utf8',
                   ranOut: false,
                   awaitDrain: 0,
                   readingMore: false,
                   decoder: null,
                   encoding: null },
                readable: true,
                domain: null,
                _events: 
                 { end: [ { [Function: g] listener: [Function: onend] }, [Function] ],
                   finish: [Function: onSocketFinish],
                   _socketEnd: [Function: onSocketEnd],
                   data: [Function],
                   error: [Function: bound ],
                   connect: [ [Function: bound ] ] },
                _eventsCount: 6,
                _maxListeners: undefined,
                _writableState: 
                 WritableState {
                   objectMode: false,
                   highWaterMark: 16384,
                   needDrain: false,
                   ending: false,
                   ended: false,
                   finished: false,
                   decodeStrings: false,
                   defaultEncoding: 'utf8',
                   length: 0,
                   writing: false,
                   corked: 0,
                   sync: false,
                   bufferProcessing: false,
                   onwrite: [Function],
                   writecb: null,
                   writelen: 0,
                   bufferedRequest: null,
                   lastBufferedRequest: null,
                   pendingcb: 0,
                   prefinished: false,
                   errorEmitted: false,
                   bufferedRequestCount: 0,
                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                writable: true,
                allowHalfOpen: false,
                destroyed: false,
                _bytesDispatched: 73,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: null,
                _server: null,
                _idleTimeout: -1,
                _idleNext: null,
                _idlePrev: null,
                _idleStart: 3638,
                read: [Function],
                _consuming: true },
             _protocol: 
              Protocol {
                domain: null,
                _events: 
                 { data: [Function],
                   end: [ [Function], [Function: bound ] ],
                   handshake: [Function: bound _handleProtocolHandshake],
                   unhandledError: [Function: bound ],
                   drain: [Function: bound ],
                   enqueue: [Function: bound _handleProtocolEnqueue] },
                _eventsCount: 6,
                _maxListeners: undefined,
                readable: true,
                writable: true,
                _config: 
                 ConnectionConfig {
                   host: '104.199.217.31',
                   port: 3306,
                   localAddress: undefined,
                   socketPath: undefined,
                   user: 'root',
                   password: '123qwer@',
                   database: 'summer-mvc',
                   connectTimeout: 10000,
                   insecureAuth: false,
                   supportBigNumbers: false,
                   bigNumberStrings: false,
                   dateStrings: false,
                   debug: undefined,
                   trace: true,
                   stringifyObjects: false,
                   timezone: 'local',
                   flags: '',
                   queryFormat: undefined,
                   pool: [Circular],
                   ssl: false,
                   multipleStatements: false,
                   typeCast: true,
                   maxPacketSize: 0,
                   charsetNumber: 33,
                   clientFlags: 455631,
                   protocol41: true },
                _connection: [Circular],
                _callback: null,
                _fatalError: null,
                _quitSequence: null,
                _handshake: true,
                _handshaked: true,
                _ended: false,
                _destroyed: false,
                _queue: [],
                _handshakeInitializationPacket: 
                 HandshakeInitializationPacket {
                   protocolVersion: 10,
                   serverVersion: '5.5.59-0ubuntu0.14.04.1',
                   threadId: 82768,
                   scrambleBuff1: <Buffer 33 5e 5f 45 79 52 6e 52>,
                   filler1: <Buffer 00>,
                   serverCapabilities1: 63487,
                   serverLanguage: 192,
                   serverStatus: 2,
                   serverCapabilities2: 32783,
                   scrambleLength: 21,
                   filler2: <Buffer 00 00 00 00 00 00 00 00 00 00>,
                   scrambleBuff2: <Buffer 31 3d 7b 76 5e 55 6f 50 24 5c 26 47>,
                   filler3: <Buffer 00>,
                   pluginData: 'mysql_native_password',
                   protocol41: true },
                _parser: 
                 Parser {
                   _supportBigNumbers: false,
                   _buffer: <Buffer 07 00 00 02 00 00 00 02 00 00 00>,
                   _nextBuffers: BufferList { bufs: [], size: 0 },
                   _longPacketBuffers: BufferList { bufs: [], size: 0 },
                   _offset: 11,
                   _packetEnd: null,
                   _packetHeader: null,
                   _packetOffset: null,
                   _onError: [Function: bound handleParserError],
                   _onPacket: [Function: bound ],
                   _nextPacketNumber: 3,
                   _encoding: 'utf-8',
                   _paused: false } },
             _connectCalled: true,
             state: 'authenticated',
             threadId: 82768,
             _pool: [Circular] },
           [Circular] ],
        _freeConnections: [],
        _connectionQueue: [],
        _closed: false },
     ssl: false,
     multipleStatements: false,
     typeCast: true,
     maxPacketSize: 0,
     charsetNumber: 33,
     clientFlags: 455631,
     protocol41: true },
  _socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 106,
        _externalStream: {},
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [ { [Function: g] listener: [Function: onend] }, [Function] ],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        data: [Function],
        error: [Function: bound ],
        connect: [ [Function: bound ] ] },
     _eventsCount: 6,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
     writable: true,
     allowHalfOpen: false,
     destroyed: false,
     _bytesDispatched: 73,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: null,
     _server: null,
     _idleTimeout: -1,
     _idleNext: null,
     _idlePrev: null,
     _idleStart: 659550,
     read: [Function],
     _consuming: true },
  _protocol: 
   Protocol {
     domain: null,
     _events: 
      { data: [Function],
        end: [ [Function], [Function: bound ] ],
        handshake: [Function: bound _handleProtocolHandshake],
        unhandledError: [Function: bound ],
        drain: [Function: bound ],
        enqueue: [Function: bound _handleProtocolEnqueue] },
     _eventsCount: 6,
     _maxListeners: undefined,
     readable: true,
     writable: true,
     _config: 
      ConnectionConfig {
        host: '104.199.217.31',
        port: 3306,
        localAddress: undefined,
        socketPath: undefined,
        user: 'root',
        password: '123qwer@',
        database: 'summer-mvc',
        connectTimeout: 10000,
        insecureAuth: false,
        supportBigNumbers: false,
        bigNumberStrings: false,
        dateStrings: false,
        debug: undefined,
        trace: true,
        stringifyObjects: false,
        timezone: 'local',
        flags: '',
        queryFormat: undefined,
        pool: 
         Pool {
           domain: null,
           _events: {},
           _eventsCount: 0,
           _maxListeners: undefined,
           config: 
            PoolConfig {
              acquireTimeout: 10000,
              connectionConfig: 
               ConnectionConfig {
                 host: '104.199.217.31',
                 port: 3306,
                 localAddress: undefined,
                 socketPath: undefined,
                 user: 'root',
                 password: '123qwer@',
                 database: 'summer-mvc',
                 connectTimeout: 10000,
                 insecureAuth: false,
                 supportBigNumbers: false,
                 bigNumberStrings: false,
                 dateStrings: false,
                 debug: undefined,
                 trace: true,
                 stringifyObjects: false,
                 timezone: 'local',
                 flags: '',
                 queryFormat: undefined,
                 pool: [Circular],
                 ssl: false,
                 multipleStatements: false,
                 typeCast: true,
                 maxPacketSize: 0,
                 charsetNumber: 33,
                 clientFlags: 455631 },
              waitForConnections: true,
              connectionLimit: 100,
              queueLimit: 0 },
           _acquiringConnections: [],
           _allConnections: 
            [ PoolConnection {
                domain: null,
                _events: { end: [Function: _removeFromPool], error: [Function] },
                _eventsCount: 2,
                _maxListeners: undefined,
                config: 
                 ConnectionConfig {
                   host: '104.199.217.31',
                   port: 3306,
                   localAddress: undefined,
                   socketPath: undefined,
                   user: 'root',
                   password: '123qwer@',
                   database: 'summer-mvc',
                   connectTimeout: 10000,
                   insecureAuth: false,
                   supportBigNumbers: false,
                   bigNumberStrings: false,
                   dateStrings: false,
                   debug: undefined,
                   trace: true,
                   stringifyObjects: false,
                   timezone: 'local',
                   flags: '',
                   queryFormat: undefined,
                   pool: [Circular],
                   ssl: false,
                   multipleStatements: false,
                   typeCast: true,
                   maxPacketSize: 0,
                   charsetNumber: 33,
                   clientFlags: 455631,
                   protocol41: true },
                _socket: 
                 Socket {
                   connecting: false,
                   _hadError: false,
                   _handle: 
                    TCP {
                      bytesRead: 106,
                      _externalStream: {},
                      fd: -1,
                      reading: true,
                      owner: [Circular],
                      onread: [Function: onread],
                      onconnection: null,
                      writeQueueSize: 0 },
                   _parent: null,
                   _host: null,
                   _readableState: 
                    ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: null,
                      pipesCount: 0,
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      defaultEncoding: 'utf8',
                      ranOut: false,
                      awaitDrain: 0,
                      readingMore: false,
                      decoder: null,
                      encoding: null },
                   readable: true,
                   domain: null,
                   _events: 
                    { end: [ { [Function: g] listener: [Function: onend] }, [Function] ],
                      finish: [Function: onSocketFinish],
                      _socketEnd: [Function: onSocketEnd],
                      data: [Function],
                      error: [Function: bound ],
                      connect: [ [Function: bound ] ] },
                   _eventsCount: 6,
                   _maxListeners: undefined,
                   _writableState: 
                    WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function],
                      writecb: null,
                      writelen: 0,
                      bufferedRequest: null,
                      lastBufferedRequest: null,
                      pendingcb: 0,
                      prefinished: false,
                      errorEmitted: false,
                      bufferedRequestCount: 0,
                      corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                   writable: true,
                   allowHalfOpen: false,
                   destroyed: false,
                   _bytesDispatched: 73,
                   _sockname: null,
                   _pendingData: null,
                   _pendingEncoding: '',
                   server: null,
                   _server: null,
                   _idleTimeout: -1,
                   _idleNext: null,
                   _idlePrev: null,
                   _idleStart: 3638,
                   read: [Function],
                   _consuming: true },
                _protocol: 
                 Protocol {
                   domain: null,
                   _events: 
                    { data: [Function],
                      end: [ [Function], [Function: bound ] ],
                      handshake: [Function: bound _handleProtocolHandshake],
                      unhandledError: [Function: bound ],
                      drain: [Function: bound ],
                      enqueue: [Function: bound _handleProtocolEnqueue] },
                   _eventsCount: 6,
                   _maxListeners: undefined,
                   readable: true,
                   writable: true,
                   _config: 
                    ConnectionConfig {
                      host: '104.199.217.31',
                      port: 3306,
                      localAddress: undefined,
                      socketPath: undefined,
                      user: 'root',
                      password: '123qwer@',
                      database: 'summer-mvc',
                      connectTimeout: 10000,
                      insecureAuth: false,
                      supportBigNumbers: false,
                      bigNumberStrings: false,
                      dateStrings: false,
                      debug: undefined,
                      trace: true,
                      stringifyObjects: false,
                      timezone: 'local',
                      flags: '',
                      queryFormat: undefined,
                      pool: [Circular],
                      ssl: false,
                      multipleStatements: false,
                      typeCast: true,
                      maxPacketSize: 0,
                      charsetNumber: 33,
                      clientFlags: 455631,
                      protocol41: true },
                   _connection: [Circular],
                   _callback: null,
                   _fatalError: null,
                   _quitSequence: null,
                   _handshake: true,
                   _handshaked: true,
                   _ended: false,
                   _destroyed: false,
                   _queue: [],
                   _handshakeInitializationPacket: 
                    HandshakeInitializationPacket {
                      protocolVersion: 10,
                      serverVersion: '5.5.59-0ubuntu0.14.04.1',
                      threadId: 82768,
                      scrambleBuff1: <Buffer 33 5e 5f 45 79 52 6e 52>,
                      filler1: <Buffer 00>,
                      serverCapabilities1: 63487,
                      serverLanguage: 192,
                      serverStatus: 2,
                      serverCapabilities2: 32783,
                      scrambleLength: 21,
                      filler2: <Buffer 00 00 00 00 00 00 00 00 00 00>,
                      scrambleBuff2: <Buffer 31 3d 7b 76 5e 55 6f 50 24 5c 26 47>,
                      filler3: <Buffer 00>,
                      pluginData: 'mysql_native_password',
                      protocol41: true },
                   _parser: 
                    Parser {
                      _supportBigNumbers: false,
                      _buffer: <Buffer 07 00 00 02 00 00 00 02 00 00 00>,
                      _nextBuffers: BufferList { bufs: [], size: 0 },
                      _longPacketBuffers: BufferList { bufs: [], size: 0 },
                      _offset: 11,
                      _packetEnd: null,
                      _packetHeader: null,
                      _packetOffset: null,
                      _onError: [Function: bound handleParserError],
                      _onPacket: [Function: bound ],
                      _nextPacketNumber: 3,
                      _encoding: 'utf-8',
                      _paused: false } },
                _connectCalled: true,
                state: 'authenticated',
                threadId: 82768,
                _pool: [Circular] },
              [Circular] ],
           _freeConnections: [],
           _connectionQueue: [],
           _closed: false },
        ssl: false,
        multipleStatements: false,
        typeCast: true,
        maxPacketSize: 0,
        charsetNumber: 33,
        clientFlags: 455631,
        protocol41: true },
     _connection: [Circular],
     _callback: null,
     _fatalError: null,
     _quitSequence: null,
     _handshake: true,
     _handshaked: true,
     _ended: false,
     _destroyed: false,
     _queue: [],
     _handshakeInitializationPacket: 
      HandshakeInitializationPacket {
        protocolVersion: 10,
        serverVersion: '5.5.59-0ubuntu0.14.04.1',
        threadId: 82770,
        scrambleBuff1: <Buffer 44 30 63 22 7d 73 4a 56>,
        filler1: <Buffer 00>,
        serverCapabilities1: 63487,
        serverLanguage: 192,
        serverStatus: 2,
        serverCapabilities2: 32783,
        scrambleLength: 21,
        filler2: <Buffer 00 00 00 00 00 00 00 00 00 00>,
        scrambleBuff2: <Buffer 50 6f 60 71 3a 6a 29 2a 39 7d 2b 5d>,
        filler3: <Buffer 00>,
        pluginData: 'mysql_native_password',
        protocol41: true },
     _parser: 
      Parser {
        _supportBigNumbers: false,
        _buffer: <Buffer 07 00 00 02 00 00 00 02 00 00 00>,
        _nextBuffers: BufferList { bufs: [], size: 0 },
        _longPacketBuffers: BufferList { bufs: [], size: 0 },
        _offset: 11,
        _packetEnd: null,
        _packetHeader: null,
        _packetOffset: null,
        _onError: [Function: bound handleParserError],
        _onPacket: [Function: bound ],
        _nextPacketNumber: 3,
        _encoding: 'utf-8',
        _paused: false } },
  _connectCalled: true,
  state: 'authenticated',
  threadId: 82770,
  _pool: 
   Pool {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     config: 
      PoolConfig {
        acquireTimeout: 10000,
        connectionConfig: 
         ConnectionConfig {
           host: '104.199.217.31',
           port: 3306,
           localAddress: undefined,
           socketPath: undefined,
           user: 'root',
           password: '123qwer@',
           database: 'summer-mvc',
           connectTimeout: 10000,
           insecureAuth: false,
           supportBigNumbers: false,
           bigNumberStrings: false,
           dateStrings: false,
           debug: undefined,
           trace: true,
           stringifyObjects: false,
           timezone: 'local',
           flags: '',
           queryFormat: undefined,
           pool: [Circular],
           ssl: false,
           multipleStatements: false,
           typeCast: true,
           maxPacketSize: 0,
           charsetNumber: 33,
           clientFlags: 455631 },
        waitForConnections: true,
        connectionLimit: 100,
        queueLimit: 0 },
     _acquiringConnections: [],
     _allConnections: 
      [ PoolConnection {
          domain: null,
          _events: { end: [Function: _removeFromPool], error: [Function] },
          _eventsCount: 2,
          _maxListeners: undefined,
          config: 
           ConnectionConfig {
             host: '104.199.217.31',
             port: 3306,
             localAddress: undefined,
             socketPath: undefined,
             user: 'root',
             password: '123qwer@',
             database: 'summer-mvc',
             connectTimeout: 10000,
             insecureAuth: false,
             supportBigNumbers: false,
             bigNumberStrings: false,
             dateStrings: false,
             debug: undefined,
             trace: true,
             stringifyObjects: false,
             timezone: 'local',
             flags: '',
             queryFormat: undefined,
             pool: [Circular],
             ssl: false,
             multipleStatements: false,
             typeCast: true,
             maxPacketSize: 0,
             charsetNumber: 33,
             clientFlags: 455631,
             protocol41: true },
          _socket: 
           Socket {
             connecting: false,
             _hadError: false,
             _handle: 
              TCP {
                bytesRead: 106,
                _externalStream: {},
                fd: -1,
                reading: true,
                owner: [Circular],
                onread: [Function: onread],
                onconnection: null,
                writeQueueSize: 0 },
             _parent: null,
             _host: null,
             _readableState: 
              ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: null,
                pipesCount: 0,
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                defaultEncoding: 'utf8',
                ranOut: false,
                awaitDrain: 0,
                readingMore: false,
                decoder: null,
                encoding: null },
             readable: true,
             domain: null,
             _events: 
              { end: [ { [Function: g] listener: [Function: onend] }, [Function] ],
                finish: [Function: onSocketFinish],
                _socketEnd: [Function: onSocketEnd],
                data: [Function],
                error: [Function: bound ],
                connect: [ [Function: bound ] ] },
             _eventsCount: 6,
             _maxListeners: undefined,
             _writableState: 
              WritableState {
                objectMode: false,
                highWaterMark: 16384,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function],
                writecb: null,
                writelen: 0,
                bufferedRequest: null,
                lastBufferedRequest: null,
                pendingcb: 0,
                prefinished: false,
                errorEmitted: false,
                bufferedRequestCount: 0,
                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
             writable: true,
             allowHalfOpen: false,
             destroyed: false,
             _bytesDispatched: 73,
             _sockname: null,
             _pendingData: null,
             _pendingEncoding: '',
             server: null,
             _server: null,
             _idleTimeout: -1,
             _idleNext: null,
             _idlePrev: null,
             _idleStart: 3638,
             read: [Function],
             _consuming: true },
          _protocol: 
           Protocol {
             domain: null,
             _events: 
              { data: [Function],
                end: [ [Function], [Function: bound ] ],
                handshake: [Function: bound _handleProtocolHandshake],
                unhandledError: [Function: bound ],
                drain: [Function: bound ],
                enqueue: [Function: bound _handleProtocolEnqueue] },
             _eventsCount: 6,
             _maxListeners: undefined,
             readable: true,
             writable: true,
             _config: 
              ConnectionConfig {
                host: '104.199.217.31',
                port: 3306,
                localAddress: undefined,
                socketPath: undefined,
                user: 'root',
                password: '123qwer@',
                database: 'summer-mvc',
                connectTimeout: 10000,
                insecureAuth: false,
                supportBigNumbers: false,
                bigNumberStrings: false,
                dateStrings: false,
                debug: undefined,
                trace: true,
                stringifyObjects: false,
                timezone: 'local',
                flags: '',
                queryFormat: undefined,
                pool: [Circular],
                ssl: false,
                multipleStatements: false,
                typeCast: true,
                maxPacketSize: 0,
                charsetNumber: 33,
                clientFlags: 455631,
                protocol41: true },
             _connection: [Circular],
             _callback: null,
             _fatalError: null,
             _quitSequence: null,
             _handshake: true,
             _handshaked: true,
             _ended: false,
             _destroyed: false,
             _queue: [],
             _handshakeInitializationPacket: 
              HandshakeInitializationPacket {
                protocolVersion: 10,
                serverVersion: '5.5.59-0ubuntu0.14.04.1',
                threadId: 82768,
                scrambleBuff1: <Buffer 33 5e 5f 45 79 52 6e 52>,
                filler1: <Buffer 00>,
                serverCapabilities1: 63487,
                serverLanguage: 192,
                serverStatus: 2,
                serverCapabilities2: 32783,
                scrambleLength: 21,
                filler2: <Buffer 00 00 00 00 00 00 00 00 00 00>,
                scrambleBuff2: <Buffer 31 3d 7b 76 5e 55 6f 50 24 5c 26 47>,
                filler3: <Buffer 00>,
                pluginData: 'mysql_native_password',
                protocol41: true },
             _parser: 
              Parser {
                _supportBigNumbers: false,
                _buffer: <Buffer 07 00 00 02 00 00 00 02 00 00 00>,
                _nextBuffers: BufferList { bufs: [], size: 0 },
                _longPacketBuffers: BufferList { bufs: [], size: 0 },
                _offset: 11,
                _packetEnd: null,
                _packetHeader: null,
                _packetOffset: null,
                _onError: [Function: bound handleParserError],
                _onPacket: [Function: bound ],
                _nextPacketNumber: 3,
                _encoding: 'utf-8',
                _paused: false } },
          _connectCalled: true,
          state: 'authenticated',
          threadId: 82768,
          _pool: [Circular] },
        [Circular] ],
     _freeConnections: [],
     _connectionQueue: [],
     _closed: false } } 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 107 | ANONYMOUS_FUNC - 2018-04-21T07:06:25.281Z] ---------------------- 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 108 | ANONYMOUS_FUNC - 2018-04-21T07:06:25.282Z] Request {
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  canceled: false,
  parent: 
   ConnectionPool {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     config: 
      { user: 'usrCERND',
        password: 'usrIMSI^0730CERND',
        server: 'DIOPRDB01',
        database: 'front2007',
        port: 1433,
        options: {},
        stream: false,
        parseJSON: false },
     _connected: true,
     _connecting: false,
     pool: 
      Pool {
        domain: null,
        _events: 
         { factoryCreateError: [Function: bound emit],
           factoryDestroyError: [Function: bound emit] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _config: 
         PoolOptions {
           fifo: true,
           priorityRange: 1,
           testOnBorrow: true,
           testOnReturn: false,
           autostart: true,
           acquireTimeoutMillis: 15000,
           max: 10,
           min: 0,
           evictionRunIntervalMillis: 1000,
           numTestsPerEvictionRun: 3,
           softIdleTimeoutMillis: -1,
           idleTimeoutMillis: 30000,
           Promise: [Function: Promise] },
        _Promise: [Function: Promise],
        _factory: 
         { create: [Function: bound _poolCreate],
           validate: [Function: bound _poolValidate],
           destroy: [Function: bound _poolDestroy] },
        _draining: false,
        _started: true,
        _waitingClientsQueue: 
         PriorityQueue {
           _size: 1,
           _slots: 
            [ Queue {
                _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
        _factoryCreateOperations: Set {},
        _factoryDestroyOperations: Set {},
        _availableObjects: 
         Deque {
           _list: DoublyLinkedList { head: null, tail: null, length: 0 } },
        _testOnBorrowResources: Set {},
        _testOnReturnResources: Set {},
        _validationOperations: Set {},
        _allObjects: Set {},
        _resourceLoans: Map {},
        _evictionIterator: 
         DequeIterator {
           _list: DoublyLinkedList { head: null, tail: null, length: 0 },
           _direction: 'next',
           _startPosition: 'head',
           _started: false,
           _cursor: null,
           _done: false },
        _evictor: DefaultEvictor {},
        _scheduledEviction: 
         Timeout {
           _called: false,
           _idleTimeout: 1000,
           _idlePrev: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: false,
              msecs: 1000 },
           _idleNext: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: false,
              msecs: 1000 },
           _idleStart: 658767,
           _onTimeout: [Function],
           _timerArgs: undefined,
           _repeat: null } } },
  parameters: {} } 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 160 | ANONYMOUS_FUNC - 2018-04-21T07:06:25.307Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:06:29.815Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:06:29.816Z] REQUEST PATH : /getData 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 106 | ANONYMOUS_FUNC - 2018-04-21T07:06:30.001Z] PoolConnection {
  domain: null,
  _events: { end: [Function: _removeFromPool], error: [Function] },
  _eventsCount: 2,
  _maxListeners: undefined,
  config: 
   ConnectionConfig {
     host: '104.199.217.31',
     port: 3306,
     localAddress: undefined,
     socketPath: undefined,
     user: 'root',
     password: '123qwer@',
     database: 'summer-mvc',
     connectTimeout: 10000,
     insecureAuth: false,
     supportBigNumbers: false,
     bigNumberStrings: false,
     dateStrings: false,
     debug: undefined,
     trace: true,
     stringifyObjects: false,
     timezone: 'local',
     flags: '',
     queryFormat: undefined,
     pool: 
      Pool {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        config: 
         PoolConfig {
           acquireTimeout: 10000,
           connectionConfig: 
            ConnectionConfig {
              host: '104.199.217.31',
              port: 3306,
              localAddress: undefined,
              socketPath: undefined,
              user: 'root',
              password: '123qwer@',
              database: 'summer-mvc',
              connectTimeout: 10000,
              insecureAuth: false,
              supportBigNumbers: false,
              bigNumberStrings: false,
              dateStrings: false,
              debug: undefined,
              trace: true,
              stringifyObjects: false,
              timezone: 'local',
              flags: '',
              queryFormat: undefined,
              pool: [Circular],
              ssl: false,
              multipleStatements: false,
              typeCast: true,
              maxPacketSize: 0,
              charsetNumber: 33,
              clientFlags: 455631 },
           waitForConnections: true,
           connectionLimit: 100,
           queueLimit: 0 },
        _acquiringConnections: [],
        _allConnections: 
         [ PoolConnection {
             domain: null,
             _events: { end: [Function: _removeFromPool], error: [Function] },
             _eventsCount: 2,
             _maxListeners: undefined,
             config: 
              ConnectionConfig {
                host: '104.199.217.31',
                port: 3306,
                localAddress: undefined,
                socketPath: undefined,
                user: 'root',
                password: '123qwer@',
                database: 'summer-mvc',
                connectTimeout: 10000,
                insecureAuth: false,
                supportBigNumbers: false,
                bigNumberStrings: false,
                dateStrings: false,
                debug: undefined,
                trace: true,
                stringifyObjects: false,
                timezone: 'local',
                flags: '',
                queryFormat: undefined,
                pool: [Circular],
                ssl: false,
                multipleStatements: false,
                typeCast: true,
                maxPacketSize: 0,
                charsetNumber: 33,
                clientFlags: 455631,
                protocol41: true },
             _socket: 
              Socket {
                connecting: false,
                _hadError: false,
                _handle: 
                 TCP {
                   bytesRead: 106,
                   _externalStream: {},
                   fd: -1,
                   reading: true,
                   owner: [Circular],
                   onread: [Function: onread],
                   onconnection: null,
                   writeQueueSize: 0 },
                _parent: null,
                _host: null,
                _readableState: 
                 ReadableState {
                   objectMode: false,
                   highWaterMark: 16384,
                   buffer: BufferList { head: null, tail: null, length: 0 },
                   length: 0,
                   pipes: null,
                   pipesCount: 0,
                   flowing: true,
                   ended: false,
                   endEmitted: false,
                   reading: true,
                   sync: false,
                   needReadable: true,
                   emittedReadable: false,
                   readableListening: false,
                   resumeScheduled: false,
                   defaultEncoding: 'utf8',
                   ranOut: false,
                   awaitDrain: 0,
                   readingMore: false,
                   decoder: null,
                   encoding: null },
                readable: true,
                domain: null,
                _events: 
                 { end: [ { [Function: g] listener: [Function: onend] }, [Function] ],
                   finish: [Function: onSocketFinish],
                   _socketEnd: [Function: onSocketEnd],
                   data: [Function],
                   error: [Function: bound ],
                   connect: [ [Function: bound ] ] },
                _eventsCount: 6,
                _maxListeners: undefined,
                _writableState: 
                 WritableState {
                   objectMode: false,
                   highWaterMark: 16384,
                   needDrain: false,
                   ending: false,
                   ended: false,
                   finished: false,
                   decodeStrings: false,
                   defaultEncoding: 'utf8',
                   length: 0,
                   writing: false,
                   corked: 0,
                   sync: false,
                   bufferProcessing: false,
                   onwrite: [Function],
                   writecb: null,
                   writelen: 0,
                   bufferedRequest: null,
                   lastBufferedRequest: null,
                   pendingcb: 0,
                   prefinished: false,
                   errorEmitted: false,
                   bufferedRequestCount: 0,
                   corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                writable: true,
                allowHalfOpen: false,
                destroyed: false,
                _bytesDispatched: 73,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: null,
                _server: null,
                _idleTimeout: -1,
                _idleNext: null,
                _idlePrev: null,
                _idleStart: 3638,
                read: [Function],
                _consuming: true },
             _protocol: 
              Protocol {
                domain: null,
                _events: 
                 { data: [Function],
                   end: [ [Function], [Function: bound ] ],
                   handshake: [Function: bound _handleProtocolHandshake],
                   unhandledError: [Function: bound ],
                   drain: [Function: bound ],
                   enqueue: [Function: bound _handleProtocolEnqueue] },
                _eventsCount: 6,
                _maxListeners: undefined,
                readable: true,
                writable: true,
                _config: 
                 ConnectionConfig {
                   host: '104.199.217.31',
                   port: 3306,
                   localAddress: undefined,
                   socketPath: undefined,
                   user: 'root',
                   password: '123qwer@',
                   database: 'summer-mvc',
                   connectTimeout: 10000,
                   insecureAuth: false,
                   supportBigNumbers: false,
                   bigNumberStrings: false,
                   dateStrings: false,
                   debug: undefined,
                   trace: true,
                   stringifyObjects: false,
                   timezone: 'local',
                   flags: '',
                   queryFormat: undefined,
                   pool: [Circular],
                   ssl: false,
                   multipleStatements: false,
                   typeCast: true,
                   maxPacketSize: 0,
                   charsetNumber: 33,
                   clientFlags: 455631,
                   protocol41: true },
                _connection: [Circular],
                _callback: null,
                _fatalError: null,
                _quitSequence: null,
                _handshake: true,
                _handshaked: true,
                _ended: false,
                _destroyed: false,
                _queue: [],
                _handshakeInitializationPacket: 
                 HandshakeInitializationPacket {
                   protocolVersion: 10,
                   serverVersion: '5.5.59-0ubuntu0.14.04.1',
                   threadId: 82768,
                   scrambleBuff1: <Buffer 33 5e 5f 45 79 52 6e 52>,
                   filler1: <Buffer 00>,
                   serverCapabilities1: 63487,
                   serverLanguage: 192,
                   serverStatus: 2,
                   serverCapabilities2: 32783,
                   scrambleLength: 21,
                   filler2: <Buffer 00 00 00 00 00 00 00 00 00 00>,
                   scrambleBuff2: <Buffer 31 3d 7b 76 5e 55 6f 50 24 5c 26 47>,
                   filler3: <Buffer 00>,
                   pluginData: 'mysql_native_password',
                   protocol41: true },
                _parser: 
                 Parser {
                   _supportBigNumbers: false,
                   _buffer: <Buffer 07 00 00 02 00 00 00 02 00 00 00>,
                   _nextBuffers: BufferList { bufs: [], size: 0 },
                   _longPacketBuffers: BufferList { bufs: [], size: 0 },
                   _offset: 11,
                   _packetEnd: null,
                   _packetHeader: null,
                   _packetOffset: null,
                   _onError: [Function: bound handleParserError],
                   _onPacket: [Function: bound ],
                   _nextPacketNumber: 3,
                   _encoding: 'utf-8',
                   _paused: false } },
             _connectCalled: true,
             state: 'authenticated',
             threadId: 82768,
             _pool: [Circular] },
           [Circular] ],
        _freeConnections: [],
        _connectionQueue: [],
        _closed: false },
     ssl: false,
     multipleStatements: false,
     typeCast: true,
     maxPacketSize: 0,
     charsetNumber: 33,
     clientFlags: 455631,
     protocol41: true },
  _socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 106,
        _externalStream: {},
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [ { [Function: g] listener: [Function: onend] }, [Function] ],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        data: [Function],
        error: [Function: bound ],
        connect: [ [Function: bound ] ] },
     _eventsCount: 6,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
     writable: true,
     allowHalfOpen: false,
     destroyed: false,
     _bytesDispatched: 73,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: null,
     _server: null,
     _idleTimeout: -1,
     _idleNext: null,
     _idlePrev: null,
     _idleStart: 664523,
     read: [Function],
     _consuming: true },
  _protocol: 
   Protocol {
     domain: null,
     _events: 
      { data: [Function],
        end: [ [Function], [Function: bound ] ],
        handshake: [Function: bound _handleProtocolHandshake],
        unhandledError: [Function: bound ],
        drain: [Function: bound ],
        enqueue: [Function: bound _handleProtocolEnqueue] },
     _eventsCount: 6,
     _maxListeners: undefined,
     readable: true,
     writable: true,
     _config: 
      ConnectionConfig {
        host: '104.199.217.31',
        port: 3306,
        localAddress: undefined,
        socketPath: undefined,
        user: 'root',
        password: '123qwer@',
        database: 'summer-mvc',
        connectTimeout: 10000,
        insecureAuth: false,
        supportBigNumbers: false,
        bigNumberStrings: false,
        dateStrings: false,
        debug: undefined,
        trace: true,
        stringifyObjects: false,
        timezone: 'local',
        flags: '',
        queryFormat: undefined,
        pool: 
         Pool {
           domain: null,
           _events: {},
           _eventsCount: 0,
           _maxListeners: undefined,
           config: 
            PoolConfig {
              acquireTimeout: 10000,
              connectionConfig: 
               ConnectionConfig {
                 host: '104.199.217.31',
                 port: 3306,
                 localAddress: undefined,
                 socketPath: undefined,
                 user: 'root',
                 password: '123qwer@',
                 database: 'summer-mvc',
                 connectTimeout: 10000,
                 insecureAuth: false,
                 supportBigNumbers: false,
                 bigNumberStrings: false,
                 dateStrings: false,
                 debug: undefined,
                 trace: true,
                 stringifyObjects: false,
                 timezone: 'local',
                 flags: '',
                 queryFormat: undefined,
                 pool: [Circular],
                 ssl: false,
                 multipleStatements: false,
                 typeCast: true,
                 maxPacketSize: 0,
                 charsetNumber: 33,
                 clientFlags: 455631 },
              waitForConnections: true,
              connectionLimit: 100,
              queueLimit: 0 },
           _acquiringConnections: [],
           _allConnections: 
            [ PoolConnection {
                domain: null,
                _events: { end: [Function: _removeFromPool], error: [Function] },
                _eventsCount: 2,
                _maxListeners: undefined,
                config: 
                 ConnectionConfig {
                   host: '104.199.217.31',
                   port: 3306,
                   localAddress: undefined,
                   socketPath: undefined,
                   user: 'root',
                   password: '123qwer@',
                   database: 'summer-mvc',
                   connectTimeout: 10000,
                   insecureAuth: false,
                   supportBigNumbers: false,
                   bigNumberStrings: false,
                   dateStrings: false,
                   debug: undefined,
                   trace: true,
                   stringifyObjects: false,
                   timezone: 'local',
                   flags: '',
                   queryFormat: undefined,
                   pool: [Circular],
                   ssl: false,
                   multipleStatements: false,
                   typeCast: true,
                   maxPacketSize: 0,
                   charsetNumber: 33,
                   clientFlags: 455631,
                   protocol41: true },
                _socket: 
                 Socket {
                   connecting: false,
                   _hadError: false,
                   _handle: 
                    TCP {
                      bytesRead: 106,
                      _externalStream: {},
                      fd: -1,
                      reading: true,
                      owner: [Circular],
                      onread: [Function: onread],
                      onconnection: null,
                      writeQueueSize: 0 },
                   _parent: null,
                   _host: null,
                   _readableState: 
                    ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: null,
                      pipesCount: 0,
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      defaultEncoding: 'utf8',
                      ranOut: false,
                      awaitDrain: 0,
                      readingMore: false,
                      decoder: null,
                      encoding: null },
                   readable: true,
                   domain: null,
                   _events: 
                    { end: [ { [Function: g] listener: [Function: onend] }, [Function] ],
                      finish: [Function: onSocketFinish],
                      _socketEnd: [Function: onSocketEnd],
                      data: [Function],
                      error: [Function: bound ],
                      connect: [ [Function: bound ] ] },
                   _eventsCount: 6,
                   _maxListeners: undefined,
                   _writableState: 
                    WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function],
                      writecb: null,
                      writelen: 0,
                      bufferedRequest: null,
                      lastBufferedRequest: null,
                      pendingcb: 0,
                      prefinished: false,
                      errorEmitted: false,
                      bufferedRequestCount: 0,
                      corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                   writable: true,
                   allowHalfOpen: false,
                   destroyed: false,
                   _bytesDispatched: 73,
                   _sockname: null,
                   _pendingData: null,
                   _pendingEncoding: '',
                   server: null,
                   _server: null,
                   _idleTimeout: -1,
                   _idleNext: null,
                   _idlePrev: null,
                   _idleStart: 3638,
                   read: [Function],
                   _consuming: true },
                _protocol: 
                 Protocol {
                   domain: null,
                   _events: 
                    { data: [Function],
                      end: [ [Function], [Function: bound ] ],
                      handshake: [Function: bound _handleProtocolHandshake],
                      unhandledError: [Function: bound ],
                      drain: [Function: bound ],
                      enqueue: [Function: bound _handleProtocolEnqueue] },
                   _eventsCount: 6,
                   _maxListeners: undefined,
                   readable: true,
                   writable: true,
                   _config: 
                    ConnectionConfig {
                      host: '104.199.217.31',
                      port: 3306,
                      localAddress: undefined,
                      socketPath: undefined,
                      user: 'root',
                      password: '123qwer@',
                      database: 'summer-mvc',
                      connectTimeout: 10000,
                      insecureAuth: false,
                      supportBigNumbers: false,
                      bigNumberStrings: false,
                      dateStrings: false,
                      debug: undefined,
                      trace: true,
                      stringifyObjects: false,
                      timezone: 'local',
                      flags: '',
                      queryFormat: undefined,
                      pool: [Circular],
                      ssl: false,
                      multipleStatements: false,
                      typeCast: true,
                      maxPacketSize: 0,
                      charsetNumber: 33,
                      clientFlags: 455631,
                      protocol41: true },
                   _connection: [Circular],
                   _callback: null,
                   _fatalError: null,
                   _quitSequence: null,
                   _handshake: true,
                   _handshaked: true,
                   _ended: false,
                   _destroyed: false,
                   _queue: [],
                   _handshakeInitializationPacket: 
                    HandshakeInitializationPacket {
                      protocolVersion: 10,
                      serverVersion: '5.5.59-0ubuntu0.14.04.1',
                      threadId: 82768,
                      scrambleBuff1: <Buffer 33 5e 5f 45 79 52 6e 52>,
                      filler1: <Buffer 00>,
                      serverCapabilities1: 63487,
                      serverLanguage: 192,
                      serverStatus: 2,
                      serverCapabilities2: 32783,
                      scrambleLength: 21,
                      filler2: <Buffer 00 00 00 00 00 00 00 00 00 00>,
                      scrambleBuff2: <Buffer 31 3d 7b 76 5e 55 6f 50 24 5c 26 47>,
                      filler3: <Buffer 00>,
                      pluginData: 'mysql_native_password',
                      protocol41: true },
                   _parser: 
                    Parser {
                      _supportBigNumbers: false,
                      _buffer: <Buffer 07 00 00 02 00 00 00 02 00 00 00>,
                      _nextBuffers: BufferList { bufs: [], size: 0 },
                      _longPacketBuffers: BufferList { bufs: [], size: 0 },
                      _offset: 11,
                      _packetEnd: null,
                      _packetHeader: null,
                      _packetOffset: null,
                      _onError: [Function: bound handleParserError],
                      _onPacket: [Function: bound ],
                      _nextPacketNumber: 3,
                      _encoding: 'utf-8',
                      _paused: false } },
                _connectCalled: true,
                state: 'authenticated',
                threadId: 82768,
                _pool: [Circular] },
              [Circular] ],
           _freeConnections: [],
           _connectionQueue: [],
           _closed: false },
        ssl: false,
        multipleStatements: false,
        typeCast: true,
        maxPacketSize: 0,
        charsetNumber: 33,
        clientFlags: 455631,
        protocol41: true },
     _connection: [Circular],
     _callback: null,
     _fatalError: null,
     _quitSequence: null,
     _handshake: true,
     _handshaked: true,
     _ended: false,
     _destroyed: false,
     _queue: [],
     _handshakeInitializationPacket: 
      HandshakeInitializationPacket {
        protocolVersion: 10,
        serverVersion: '5.5.59-0ubuntu0.14.04.1',
        threadId: 82771,
        scrambleBuff1: <Buffer 41 52 5b 4f 5d 62 58 6f>,
        filler1: <Buffer 00>,
        serverCapabilities1: 63487,
        serverLanguage: 192,
        serverStatus: 2,
        serverCapabilities2: 32783,
        scrambleLength: 21,
        filler2: <Buffer 00 00 00 00 00 00 00 00 00 00>,
        scrambleBuff2: <Buffer 48 58 60 5b 27 4e 36 60 62 4a 2d 40>,
        filler3: <Buffer 00>,
        pluginData: 'mysql_native_password',
        protocol41: true },
     _parser: 
      Parser {
        _supportBigNumbers: false,
        _buffer: <Buffer 07 00 00 02 00 00 00 02 00 00 00>,
        _nextBuffers: BufferList { bufs: [], size: 0 },
        _longPacketBuffers: BufferList { bufs: [], size: 0 },
        _offset: 11,
        _packetEnd: null,
        _packetHeader: null,
        _packetOffset: null,
        _onError: [Function: bound handleParserError],
        _onPacket: [Function: bound ],
        _nextPacketNumber: 3,
        _encoding: 'utf-8',
        _paused: false } },
  _connectCalled: true,
  state: 'authenticated',
  threadId: 82771,
  _pool: 
   Pool {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     config: 
      PoolConfig {
        acquireTimeout: 10000,
        connectionConfig: 
         ConnectionConfig {
           host: '104.199.217.31',
           port: 3306,
           localAddress: undefined,
           socketPath: undefined,
           user: 'root',
           password: '123qwer@',
           database: 'summer-mvc',
           connectTimeout: 10000,
           insecureAuth: false,
           supportBigNumbers: false,
           bigNumberStrings: false,
           dateStrings: false,
           debug: undefined,
           trace: true,
           stringifyObjects: false,
           timezone: 'local',
           flags: '',
           queryFormat: undefined,
           pool: [Circular],
           ssl: false,
           multipleStatements: false,
           typeCast: true,
           maxPacketSize: 0,
           charsetNumber: 33,
           clientFlags: 455631 },
        waitForConnections: true,
        connectionLimit: 100,
        queueLimit: 0 },
     _acquiringConnections: [],
     _allConnections: 
      [ PoolConnection {
          domain: null,
          _events: { end: [Function: _removeFromPool], error: [Function] },
          _eventsCount: 2,
          _maxListeners: undefined,
          config: 
           ConnectionConfig {
             host: '104.199.217.31',
             port: 3306,
             localAddress: undefined,
             socketPath: undefined,
             user: 'root',
             password: '123qwer@',
             database: 'summer-mvc',
             connectTimeout: 10000,
             insecureAuth: false,
             supportBigNumbers: false,
             bigNumberStrings: false,
             dateStrings: false,
             debug: undefined,
             trace: true,
             stringifyObjects: false,
             timezone: 'local',
             flags: '',
             queryFormat: undefined,
             pool: [Circular],
             ssl: false,
             multipleStatements: false,
             typeCast: true,
             maxPacketSize: 0,
             charsetNumber: 33,
             clientFlags: 455631,
             protocol41: true },
          _socket: 
           Socket {
             connecting: false,
             _hadError: false,
             _handle: 
              TCP {
                bytesRead: 106,
                _externalStream: {},
                fd: -1,
                reading: true,
                owner: [Circular],
                onread: [Function: onread],
                onconnection: null,
                writeQueueSize: 0 },
             _parent: null,
             _host: null,
             _readableState: 
              ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: null,
                pipesCount: 0,
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                defaultEncoding: 'utf8',
                ranOut: false,
                awaitDrain: 0,
                readingMore: false,
                decoder: null,
                encoding: null },
             readable: true,
             domain: null,
             _events: 
              { end: [ { [Function: g] listener: [Function: onend] }, [Function] ],
                finish: [Function: onSocketFinish],
                _socketEnd: [Function: onSocketEnd],
                data: [Function],
                error: [Function: bound ],
                connect: [ [Function: bound ] ] },
             _eventsCount: 6,
             _maxListeners: undefined,
             _writableState: 
              WritableState {
                objectMode: false,
                highWaterMark: 16384,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function],
                writecb: null,
                writelen: 0,
                bufferedRequest: null,
                lastBufferedRequest: null,
                pendingcb: 0,
                prefinished: false,
                errorEmitted: false,
                bufferedRequestCount: 0,
                corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
             writable: true,
             allowHalfOpen: false,
             destroyed: false,
             _bytesDispatched: 73,
             _sockname: null,
             _pendingData: null,
             _pendingEncoding: '',
             server: null,
             _server: null,
             _idleTimeout: -1,
             _idleNext: null,
             _idlePrev: null,
             _idleStart: 3638,
             read: [Function],
             _consuming: true },
          _protocol: 
           Protocol {
             domain: null,
             _events: 
              { data: [Function],
                end: [ [Function], [Function: bound ] ],
                handshake: [Function: bound _handleProtocolHandshake],
                unhandledError: [Function: bound ],
                drain: [Function: bound ],
                enqueue: [Function: bound _handleProtocolEnqueue] },
             _eventsCount: 6,
             _maxListeners: undefined,
             readable: true,
             writable: true,
             _config: 
              ConnectionConfig {
                host: '104.199.217.31',
                port: 3306,
                localAddress: undefined,
                socketPath: undefined,
                user: 'root',
                password: '123qwer@',
                database: 'summer-mvc',
                connectTimeout: 10000,
                insecureAuth: false,
                supportBigNumbers: false,
                bigNumberStrings: false,
                dateStrings: false,
                debug: undefined,
                trace: true,
                stringifyObjects: false,
                timezone: 'local',
                flags: '',
                queryFormat: undefined,
                pool: [Circular],
                ssl: false,
                multipleStatements: false,
                typeCast: true,
                maxPacketSize: 0,
                charsetNumber: 33,
                clientFlags: 455631,
                protocol41: true },
             _connection: [Circular],
             _callback: null,
             _fatalError: null,
             _quitSequence: null,
             _handshake: true,
             _handshaked: true,
             _ended: false,
             _destroyed: false,
             _queue: [],
             _handshakeInitializationPacket: 
              HandshakeInitializationPacket {
                protocolVersion: 10,
                serverVersion: '5.5.59-0ubuntu0.14.04.1',
                threadId: 82768,
                scrambleBuff1: <Buffer 33 5e 5f 45 79 52 6e 52>,
                filler1: <Buffer 00>,
                serverCapabilities1: 63487,
                serverLanguage: 192,
                serverStatus: 2,
                serverCapabilities2: 32783,
                scrambleLength: 21,
                filler2: <Buffer 00 00 00 00 00 00 00 00 00 00>,
                scrambleBuff2: <Buffer 31 3d 7b 76 5e 55 6f 50 24 5c 26 47>,
                filler3: <Buffer 00>,
                pluginData: 'mysql_native_password',
                protocol41: true },
             _parser: 
              Parser {
                _supportBigNumbers: false,
                _buffer: <Buffer 07 00 00 02 00 00 00 02 00 00 00>,
                _nextBuffers: BufferList { bufs: [], size: 0 },
                _longPacketBuffers: BufferList { bufs: [], size: 0 },
                _offset: 11,
                _packetEnd: null,
                _packetHeader: null,
                _packetOffset: null,
                _onError: [Function: bound handleParserError],
                _onPacket: [Function: bound ],
                _nextPacketNumber: 3,
                _encoding: 'utf-8',
                _paused: false } },
          _connectCalled: true,
          state: 'authenticated',
          threadId: 82768,
          _pool: [Circular] },
        [Circular] ],
     _freeConnections: [],
     _connectionQueue: [],
     _closed: false } } 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 107 | ANONYMOUS_FUNC - 2018-04-21T07:06:30.246Z] ---------------------- 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 108 | ANONYMOUS_FUNC - 2018-04-21T07:06:30.247Z] Request {
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  canceled: false,
  parent: 
   ConnectionPool {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     config: 
      { user: 'usrCERND',
        password: 'usrIMSI^0730CERND',
        server: 'DIOPRDB01',
        database: 'front2007',
        port: 1433,
        options: {},
        stream: false,
        parseJSON: false },
     _connected: true,
     _connecting: false,
     pool: 
      Pool {
        domain: null,
        _events: 
         { factoryCreateError: [Function: bound emit],
           factoryDestroyError: [Function: bound emit] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _config: 
         PoolOptions {
           fifo: true,
           priorityRange: 1,
           testOnBorrow: true,
           testOnReturn: false,
           autostart: true,
           acquireTimeoutMillis: 15000,
           max: 10,
           min: 0,
           evictionRunIntervalMillis: 1000,
           numTestsPerEvictionRun: 3,
           softIdleTimeoutMillis: -1,
           idleTimeoutMillis: 30000,
           Promise: [Function: Promise] },
        _Promise: [Function: Promise],
        _factory: 
         { create: [Function: bound _poolCreate],
           validate: [Function: bound _poolValidate],
           destroy: [Function: bound _poolDestroy] },
        _draining: false,
        _started: true,
        _waitingClientsQueue: 
         PriorityQueue {
           _size: 1,
           _slots: 
            [ Queue {
                _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
        _factoryCreateOperations: Set {},
        _factoryDestroyOperations: Set {},
        _availableObjects: 
         Deque {
           _list: DoublyLinkedList { head: null, tail: null, length: 0 } },
        _testOnBorrowResources: Set {},
        _testOnReturnResources: Set {},
        _validationOperations: Set {},
        _allObjects: Set {},
        _resourceLoans: Map {},
        _evictionIterator: 
         DequeIterator {
           _list: DoublyLinkedList { head: null, tail: null, length: 0 },
           _direction: 'next',
           _startPosition: 'head',
           _started: false,
           _cursor: null,
           _done: false },
        _evictor: DefaultEvictor {},
        _scheduledEviction: 
         Timeout {
           _called: false,
           _idleTimeout: 1000,
           _idlePrev: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: false,
              msecs: 1000 },
           _idleNext: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: false,
              msecs: 1000 },
           _idleStart: 663960,
           _onTimeout: [Function],
           _timerArgs: undefined,
           _repeat: null } } },
  parameters: {} } 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T07:06:30.281Z] Error Occured when [/getData] called.
connection.query is not a function
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:81:15
	Object.executeQuery (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:79:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:37:16
	Object.exports.control (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:3:9)
	executeController (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:203:57)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:26:11
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:06:42.959Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:06:42.961Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:06:42.962Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:06:42.963Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:06:42.964Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:06:42.965Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:06:42.965Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:06:42.966Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:06:42.994Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:07:26.105Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:07:26.107Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:07:26.108Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:07:26.109Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:07:26.110Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:07:26.110Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:07:26.111Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:07:26.111Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:07:26.138Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:07:44.904Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:07:44.906Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:07:44.906Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:07:44.907Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:07:44.907Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:07:44.908Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:07:44.908Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:07:44.909Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:07:44.943Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:09:14.654Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:09:14.656Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:09:14.657Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:09:14.658Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:09:14.669Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:09:14.670Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:09:14.671Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:09:14.674Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:09:14.706Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:10:53.576Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:10:53.578Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:10:53.579Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:10:53.580Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:10:53.580Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:10:53.581Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:10:53.582Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:10:53.582Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:10:53.608Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:11:33.781Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:11:33.786Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:11:33.788Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:11:33.789Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:11:33.790Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:11:33.790Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:11:33.791Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:11:33.791Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:11:33.848Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:11:34.649Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:11:34.663Z] REQUEST PATH : / 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 167 | ANONYMOUS_FUNC - 2018-04-21T07:11:34.939Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:11:36.647Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:11:36.653Z] REQUEST PATH : / 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 167 | ANONYMOUS_FUNC - 2018-04-21T07:11:36.856Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:12:47.890Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:12:47.892Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:12:47.893Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:12:47.893Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:12:47.894Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:12:47.896Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:12:47.897Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:12:47.900Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:12:47.949Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:12:58.527Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:12:58.532Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:12:58.534Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:12:58.534Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:12:58.534Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:12:58.535Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:12:58.536Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:12:58.537Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:12:58.585Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:12:58.681Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:12:58.681Z] REQUEST PATH : / 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 167 | ANONYMOUS_FUNC - 2018-04-21T07:12:58.898Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:13:00.670Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:13:00.677Z] REQUEST PATH : / 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 167 | ANONYMOUS_FUNC - 2018-04-21T07:13:00.867Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:13:02.473Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:13:02.474Z] REQUEST PATH : / 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 167 | ANONYMOUS_FUNC - 2018-04-21T07:13:02.678Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:13:17.517Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:13:17.519Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:13:17.520Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:13:17.521Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:13:17.522Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:13:17.523Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:13:17.524Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:13:17.524Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:13:17.550Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:13:18.500Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:13:18.501Z] REQUEST PATH : / 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:13:18.538Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:13:18.539Z] REQUEST PATH : / 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 167 | ANONYMOUS_FUNC - 2018-04-21T07:13:18.705Z] [
    null,
    null
] 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 167 | ANONYMOUS_FUNC - 2018-04-21T07:13:18.719Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:13:22.907Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:13:22.910Z] REQUEST PATH : /getData 
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T07:13:23.131Z] Error Occured when [/getData] called.
connection.query is not a function
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:81:15
	Object.executeQuery (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mssqlHandler.js:79:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:37:16
	Object.exports.control (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:3:9)
	executeController (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:216:57)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:26:11
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:13:47.877Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:13:47.879Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:13:47.881Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:13:47.882Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:13:47.883Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:13:47.883Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:13:47.884Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:13:47.884Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:13:47.918Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:13:50.046Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:13:50.050Z] REQUEST PATH : /getData 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 167 | ANONYMOUS_FUNC - 2018-04-21T07:13:50.303Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:13:53.929Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:13:53.930Z] REQUEST PATH : /getData 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 167 | ANONYMOUS_FUNC - 2018-04-21T07:13:54.178Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:13:57.054Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:13:57.055Z] REQUEST PATH : /getData 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:14:00.457Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:14:00.458Z] REQUEST PATH : /getData 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:14:01.952Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:14:01.953Z] REQUEST PATH : /getData 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:14:03.240Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:14:03.245Z] REQUEST PATH : /getData 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:15:45.658Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:15:45.659Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:15:45.660Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:15:45.661Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:15:45.661Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:15:45.662Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:15:45.662Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:15:45.663Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:15:45.714Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:16:07.577Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:16:07.579Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:16:07.581Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:16:07.582Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:16:07.582Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:16:07.583Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:16:07.583Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:16:07.584Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:16:07.645Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:16:18.577Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:16:18.578Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:16:18.579Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:16:18.580Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:16:18.581Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:16:18.581Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:16:18.582Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:16:18.583Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:16:18.618Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:16:20.441Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:16:20.442Z] REQUEST PATH : /getData 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 170 | ANONYMOUS_FUNC - 2018-04-21T07:16:20.688Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:16:23.851Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:16:23.852Z] REQUEST PATH : /getData 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 170 | ANONYMOUS_FUNC - 2018-04-21T07:16:24.116Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:16:26.907Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:16:26.908Z] REQUEST PATH : /getData 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 170 | ANONYMOUS_FUNC - 2018-04-21T07:16:27.139Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:17:06.455Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:17:06.457Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:17:06.458Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:17:06.459Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:17:06.459Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:17:06.460Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:17:06.460Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:17:06.461Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:17:06.513Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:17:40.134Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:17:40.140Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:17:40.144Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:17:40.149Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:17:40.150Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:17:40.152Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:17:40.153Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:17:40.153Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:17:40.188Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:18:16.652Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:18:16.653Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:18:16.655Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:18:16.656Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:18:16.657Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:18:16.657Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:18:16.657Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:18:16.658Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:18:16.707Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:18:23.203Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:18:23.205Z] REQUEST PATH : / 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 170 | ANONYMOUS_FUNC - 2018-04-21T07:18:23.423Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:18:26.898Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:18:26.899Z] REQUEST PATH : /getData 
[ERROR] - [\core\dispatcher\context_dispatcher.js : 43 | ANONYMOUS_FUNC - 2018-04-21T07:18:27.089Z] connection.beginTransaction is not a function
C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:106:15,executeTransaction (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:104:9),C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:79:4,Object.executeQuery (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:77:9),C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:40:17,Object.exports.control (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:3:9),executeController (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:219:57),C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:26:11,process._tickCallback (internal/process/next_tick.js:103:7)
[ERROR] - [\tools\error\errorHandler.js : 18 | logErrors - 2018-04-21T07:18:27.092Z] Error Occured when [/getData] called.
connection.beginTransaction is not a function
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:106:15
	executeTransaction (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:104:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:79:4
	Object.executeQuery (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\tools\db\mysqlHandler.js:77:9)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:40:17
	Object.exports.control (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\application\controllers\controller_db.js:3:9)
	executeController (C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:219:57)
	C:\__Repo.Workspace\12. INO_Nodejs\summer-mvc\core\dispatcher\context_dispatcher.js:26:11
	process._tickCallback (internal/process/next_tick.js:103:7)

[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:19:07.466Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:19:07.468Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:19:07.484Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:19:07.488Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:19:07.490Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:19:07.491Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:19:07.491Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:19:07.492Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:19:07.524Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:19:43.055Z] Initializing : Annotation Parsing Succeed 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:19:43.058Z] Initializing : Set View Engine 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:19:43.058Z] Initializing : Set Body Parser 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:19:43.059Z] Initializing : Set Connection Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:19:43.059Z] Initializing : Set File Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:19:43.060Z] Initializing : Set MySql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:19:43.060Z] Initializing : Set MsSql Handler 
[INFO] - [\express_was.js : 37 | ANONYMOUS_FUNC - 2018-04-21T07:19:43.061Z] Initializing : Set Exit Handler 
[INFO] - [\express_was.js : 47 | logger.info - 2018-04-21T07:19:43.092Z] Listen Port for HTTP  : 3000 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:19:45.482Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:19:45.483Z] REQUEST PATH : /getData 
[DEBUG] - [\application\controllers\controller_db.js : 42 | ANONYMOUS_FUNC - 2018-04-21T07:19:46.074Z] [
    {
        "version()": "5.5.59-0ubuntu0.14.04.1"
    }
] 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 170 | ANONYMOUS_FUNC - 2018-04-21T07:19:46.078Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:19:49.016Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:19:49.017Z] REQUEST PATH : /getData 
[DEBUG] - [\application\controllers\controller_db.js : 42 | ANONYMOUS_FUNC - 2018-04-21T07:19:49.572Z] [
    {
        "connectionTime": "2017-09-21T07:10:18.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:10:39.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:11:13.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:11:33.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:16:02.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:18:07.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:25:10.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:25:26.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:26:43.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:27:24.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:28:12.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:29:08.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:30:56.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:31:26.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:31:51.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:32:13.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:33:51.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:34:49.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:35:35.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:35:51.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:36:13.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:36:52.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:37:29.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:38:08.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:38:26.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:39:04.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:39:27.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:40:44.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:41:23.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:41:51.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:42:10.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:42:54.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:58:37.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:58:58.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T07:59:54.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T08:01:05.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T08:01:32.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T08:01:59.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T08:02:56.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T08:03:52.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T08:04:37.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    },
    {
        "connectionTime": "2017-09-21T08:05:20.000Z",
        "userID": "inodient",
        "fullpath": "/dbdb",
        "query": "query",
        "param": "param",
        "method": "GET"
    }
] 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 170 | ANONYMOUS_FUNC - 2018-04-21T07:19:49.619Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:19:51.794Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:19:51.795Z] REQUEST PATH : /getData 
[DEBUG] - [\application\controllers\controller_db.js : 42 | ANONYMOUS_FUNC - 2018-04-21T07:19:52.246Z] {
    "fieldCount": 0,
    "affectedRows": 1,
    "insertId": 0,
    "serverStatus": 3,
    "warningCount": 0,
    "message": "",
    "protocol41": true,
    "changedRows": 0
} 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 170 | ANONYMOUS_FUNC - 2018-04-21T07:19:52.250Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:19:54.486Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:19:54.488Z] REQUEST PATH : /getData 
[DEBUG] - [\application\controllers\controller_db.js : 42 | ANONYMOUS_FUNC - 2018-04-21T07:19:54.886Z] {
    "fieldCount": 0,
    "affectedRows": 0,
    "insertId": 0,
    "serverStatus": 35,
    "warningCount": 0,
    "message": "(Rows matched: 0  Changed: 0  Warnings: 0",
    "protocol41": true,
    "changedRows": 0
} 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 170 | ANONYMOUS_FUNC - 2018-04-21T07:19:54.888Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:19:56.996Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:19:56.998Z] REQUEST PATH : /getData 
[DEBUG] - [\application\controllers\controller_db.js : 42 | ANONYMOUS_FUNC - 2018-04-21T07:19:57.364Z] {
    "fieldCount": 0,
    "affectedRows": 0,
    "insertId": 0,
    "serverStatus": 35,
    "warningCount": 0,
    "message": "",
    "protocol41": true,
    "changedRows": 0
} 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 170 | ANONYMOUS_FUNC - 2018-04-21T07:19:57.367Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:19:59.228Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:19:59.230Z] REQUEST PATH : /getData 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 170 | ANONYMOUS_FUNC - 2018-04-21T07:19:59.594Z] [
    null,
    null
] 
[INFO] - [\express_was.js : 89 | ANONYMOUS_FUNC - 2018-04-21T07:20:01.980Z] ACCEPTED-LANGUAGE : ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 
[INFO] - [\express_was.js : 90 | ANONYMOUS_FUNC - 2018-04-21T07:20:01.981Z] REQUEST PATH : /getData 
[DEBUG] - [\core\dispatcher\context_dispatcher.js : 170 | ANONYMOUS_FUNC - 2018-04-21T07:20:02.197Z] [
    null,
    null
] 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T07:21:12.784Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ESOCKET",
        "originalError": {
            "message": "Failed to connect to **:1433 - getaddrinfo ENOTFOUND **",
            "code": "ESOCKET"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T07:21:28.530Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ESOCKET",
        "originalError": {
            "message": "Failed to connect to **:1433 - getaddrinfo ENOTFOUND **",
            "code": "ESOCKET"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T07:21:41.192Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ESOCKET",
        "originalError": {
            "message": "Failed to connect to **:1433 - getaddrinfo ENOTFOUND **",
            "code": "ESOCKET"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T07:21:49.644Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ESOCKET",
        "originalError": {
            "message": "Failed to connect to **:1433 - getaddrinfo ENOTFOUND **",
            "code": "ESOCKET"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T07:21:57.042Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ESOCKET",
        "originalError": {
            "message": "Failed to connect to **:1433 - getaddrinfo ENOTFOUND **",
            "code": "ESOCKET"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T07:22:04.670Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ESOCKET",
        "originalError": {
            "message": "Failed to connect to **:1433 - getaddrinfo ENOTFOUND **",
            "code": "ESOCKET"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T07:22:12.062Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ESOCKET",
        "originalError": {
            "message": "Failed to connect to **:1433 - getaddrinfo ENOTFOUND **",
            "code": "ESOCKET"
        },
        "name": "ConnectionError"
    }
} 
[ERROR] - [\express_was.js : 187 | ANONYMOUS_FUNC - 2018-04-21T07:22:20.586Z] {
    "message": "Setting MsSql Failed",
    "err": {
        "code": "ESOCKET",
        "originalError": {
            "message": "Failed to connect to **:1433 - getaddrinfo ENOTFOUND **",
            "code": "ESOCKET"
        },
        "name": "ConnectionError"
    }
} 
